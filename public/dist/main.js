/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.1.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-09-22T22:30Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.1.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar arguments$1 = arguments;\n\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments$1[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tvar this$1 = this;\n\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this$1 ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar this$1 = this;\n\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this$1[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis$1[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis$1.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar this$1 = this;\n\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this$1, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\tresolve.call( undefined, value );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.call( undefined, value );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\t\tvar arguments$1 = arguments;\n\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments$1[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar this$1 = this;\n\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this$1 ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this$1, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar this$1 = this;\n\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis$1.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\nfunction manipulationTarget( elem, content ) {\n\tif ( jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn elem.getElementsByTagName( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar this$1 = this;\n\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this$1[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar this$1 = this;\n\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this$1 : this$1.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// Support: IE <=9 only\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar val,\n\t\tvalueIsBorderBox = true,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Support: IE <=11 only\n\t// Running getBoundingClientRect on a disconnected node\n\t// in IE throws an error.\n\tif ( elem.getClientRects().length ) {\n\t\tval = elem.getBoundingClientRect()[ name ];\n\t}\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction raf() {\n\tif ( timerId ) {\n\t\twindow.requestAnimationFrame( raf );\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off or if document is hidden\n\tif ( jQuery.fx.off || document.hidden ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar this$1 = this;\n\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this$1 &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar this$1 = this;\n\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this$1 && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this$1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.requestAnimationFrame ?\n\t\t\twindow.requestAnimationFrame( raf ) :\n\t\t\twindow.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tif ( window.cancelAnimationFrame ) {\n\t\twindow.cancelAnimationFrame( timerId );\n\t} else {\n\t\twindow.clearInterval( timerId );\n\t}\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( jQuery.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win, rect, doc,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\t// Make sure element is not hidden (display: none)\n\t\tif ( rect.width || rect.height ) {\n\t\t\tdoc = elem.ownerDocument;\n\t\t\twin = getWindow( doc );\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\treturn {\n\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden elements (gh-2310)\n\t\treturn rect;\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.parseJSON = JSON.parse;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\treturn jQuery;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\n\nreturn jQuery;\n} );\n\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\neval(\"// shim for using process in browser\\nvar process = module.exports = {};\\n\\n// cached from whatever global is present so that test runners that stub it\\n// don't break things.  But we need to wrap it in a try catch in case it is\\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n// function because try/catches deoptimize in certain engines.\\n\\nvar cachedSetTimeout;\\nvar cachedClearTimeout;\\n\\nfunction defaultSetTimout() {\\n    throw new Error('setTimeout has not been defined');\\n}\\nfunction defaultClearTimeout () {\\n    throw new Error('clearTimeout has not been defined');\\n}\\n(function () {\\n    try {\\n        if (typeof setTimeout === 'function') {\\n            cachedSetTimeout = setTimeout;\\n        } else {\\n            cachedSetTimeout = defaultSetTimout;\\n        }\\n    } catch (e) {\\n        cachedSetTimeout = defaultSetTimout;\\n    }\\n    try {\\n        if (typeof clearTimeout === 'function') {\\n            cachedClearTimeout = clearTimeout;\\n        } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n        }\\n    } catch (e) {\\n        cachedClearTimeout = defaultClearTimeout;\\n    }\\n} ())\\nfunction runTimeout(fun) {\\n    if (cachedSetTimeout === setTimeout) {\\n        //normal enviroments in sane situations\\n        return setTimeout(fun, 0);\\n    }\\n    // if setTimeout wasn't available but was latter defined\\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n        cachedSetTimeout = setTimeout;\\n        return setTimeout(fun, 0);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedSetTimeout(fun, 0);\\n    } catch(e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n            return cachedSetTimeout.call(null, fun, 0);\\n        } catch(e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n            return cachedSetTimeout.call(this, fun, 0);\\n        }\\n    }\\n\\n\\n}\\nfunction runClearTimeout(marker) {\\n    if (cachedClearTimeout === clearTimeout) {\\n        //normal enviroments in sane situations\\n        return clearTimeout(marker);\\n    }\\n    // if clearTimeout wasn't available but was latter defined\\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n        cachedClearTimeout = clearTimeout;\\n        return clearTimeout(marker);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedClearTimeout(marker);\\n    } catch (e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n            return cachedClearTimeout.call(null, marker);\\n        } catch (e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n            return cachedClearTimeout.call(this, marker);\\n        }\\n    }\\n\\n\\n\\n}\\nvar queue = [];\\nvar draining = false;\\nvar currentQueue;\\nvar queueIndex = -1;\\n\\nfunction cleanUpNextTick() {\\n    if (!draining || !currentQueue) {\\n        return;\\n    }\\n    draining = false;\\n    if (currentQueue.length) {\\n        queue = currentQueue.concat(queue);\\n    } else {\\n        queueIndex = -1;\\n    }\\n    if (queue.length) {\\n        drainQueue();\\n    }\\n}\\n\\nfunction drainQueue() {\\n    if (draining) {\\n        return;\\n    }\\n    var timeout = runTimeout(cleanUpNextTick);\\n    draining = true;\\n\\n    var len = queue.length;\\n    while(len) {\\n        currentQueue = queue;\\n        queue = [];\\n        while (++queueIndex < len) {\\n            if (currentQueue) {\\n                currentQueue[queueIndex].run();\\n            }\\n        }\\n        queueIndex = -1;\\n        len = queue.length;\\n    }\\n    currentQueue = null;\\n    draining = false;\\n    runClearTimeout(timeout);\\n}\\n\\nprocess.nextTick = function (fun) {\\n    var arguments$1 = arguments;\\n\\n    var args = new Array(arguments.length - 1);\\n    if (arguments.length > 1) {\\n        for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments$1[i];\\n        }\\n    }\\n    queue.push(new Item(fun, args));\\n    if (queue.length === 1 && !draining) {\\n        runTimeout(drainQueue);\\n    }\\n};\\n\\n// v8 likes predictible objects\\nfunction Item(fun, array) {\\n    this.fun = fun;\\n    this.array = array;\\n}\\nItem.prototype.run = function () {\\n    this.fun.apply(null, this.array);\\n};\\nprocess.title = 'browser';\\nprocess.browser = true;\\nprocess.env = {};\\nprocess.argv = [];\\nprocess.version = ''; // empty string to avoid regexp issues\\nprocess.versions = {};\\n\\nfunction noop() {}\\n\\nprocess.on = noop;\\nprocess.addListener = noop;\\nprocess.once = noop;\\nprocess.off = noop;\\nprocess.removeListener = noop;\\nprocess.removeAllListeners = noop;\\nprocess.emit = noop;\\n\\nprocess.binding = function (name) {\\n    throw new Error('process.binding is not supported');\\n};\\n\\nprocess.cwd = function () { return '/' };\\nprocess.chdir = function (dir) {\\n    throw new Error('process.chdir is not supported');\\n};\\nprocess.umask = function() { return 0; };\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\neval(\"module.exports = function(module) {\\r\\n\\tif(!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tif(!module.children) module.children = [];\\r\\n\\t\\tObject.defineProperty(module, \\\"loaded\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tconfigurable: false,\\r\\n\\t\\t\\tget: function() { return module.l; }\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \\\"id\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tconfigurable: false,\\r\\n\\t\\t\\tget: function() { return module.i; }\\r\\n\\t\\t});\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcz9lZjUxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlLmw7IH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGUuaTsgfVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\neval(\"/* WEBPACK VAR INJECTION */(function(process, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * QUnit 1.20.0\\n * http://qunitjs.com/\\n *\\n * Copyright jQuery Foundation and other contributors\\n * Released under the MIT license\\n * http://jquery.org/license\\n *\\n * Date: 2015-10-27T17:53Z\\n */\\n\\n(function( global ) {\\n\\nvar QUnit = {};\\n\\nvar Date = global.Date;\\nvar now = Date.now || function() {\\n\\treturn new Date().getTime();\\n};\\n\\nvar setTimeout = global.setTimeout;\\nvar clearTimeout = global.clearTimeout;\\n\\n// Store a local window from the global to allow direct references.\\nvar window = global.window;\\n\\nvar defined = {\\n\\tdocument: window && window.document !== undefined,\\n\\tsetTimeout: setTimeout !== undefined,\\n\\tsessionStorage: (function() {\\n\\t\\tvar x = \\\"qunit-test-string\\\";\\n\\t\\ttry {\\n\\t\\t\\tsessionStorage.setItem( x, x );\\n\\t\\t\\tsessionStorage.removeItem( x );\\n\\t\\t\\treturn true;\\n\\t\\t} catch ( e ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}() )\\n};\\n\\nvar fileName = ( sourceFromStacktrace( 0 ) || \\\"\\\" ).replace( /(:\\\\d+)+\\\\)?/, \\\"\\\" ).replace( /.+\\\\//, \\\"\\\" );\\nvar globalStartCalled = false;\\nvar runStarted = false;\\n\\nvar toString = Object.prototype.toString,\\n\\thasOwn = Object.prototype.hasOwnProperty;\\n\\n// returns a new Array with the elements that are in a but not in b\\nfunction diff( a, b ) {\\n\\tvar i, j,\\n\\t\\tresult = a.slice();\\n\\n\\tfor ( i = 0; i < result.length; i++ ) {\\n\\t\\tfor ( j = 0; j < b.length; j++ ) {\\n\\t\\t\\tif ( result[ i ] === b[ j ] ) {\\n\\t\\t\\t\\tresult.splice( i, 1 );\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n}\\n\\n// from jquery.js\\nfunction inArray( elem, array ) {\\n\\tif ( array.indexOf ) {\\n\\t\\treturn array.indexOf( elem );\\n\\t}\\n\\n\\tfor ( var i = 0, length = array.length; i < length; i++ ) {\\n\\t\\tif ( array[ i ] === elem ) {\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n\\n\\treturn -1;\\n}\\n\\n/**\\n * Makes a clone of an object using only Array or Object as base,\\n * and copies over the own enumerable properties.\\n *\\n * @param {Object} obj\\n * @return {Object} New object with only the own properties (recursively).\\n */\\nfunction objectValues ( obj ) {\\n\\tvar key, val,\\n\\t\\tvals = QUnit.is( \\\"array\\\", obj ) ? [] : {};\\n\\tfor ( key in obj ) {\\n\\t\\tif ( hasOwn.call( obj, key ) ) {\\n\\t\\t\\tval = obj[ key ];\\n\\t\\t\\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\\n\\t\\t}\\n\\t}\\n\\treturn vals;\\n}\\n\\nfunction extend( a, b, undefOnly ) {\\n\\tfor ( var prop in b ) {\\n\\t\\tif ( hasOwn.call( b, prop ) ) {\\n\\n\\t\\t\\t// Avoid \\\"Member not found\\\" error in IE8 caused by messing with window.constructor\\n\\t\\t\\t// This block runs on every environment, so `global` is being used instead of `window`\\n\\t\\t\\t// to avoid errors on node.\\n\\t\\t\\tif ( prop !== \\\"constructor\\\" || a !== global ) {\\n\\t\\t\\t\\tif ( b[ prop ] === undefined ) {\\n\\t\\t\\t\\t\\tdelete a[ prop ];\\n\\t\\t\\t\\t} else if ( !( undefOnly && typeof a[ prop ] !== \\\"undefined\\\" ) ) {\\n\\t\\t\\t\\t\\ta[ prop ] = b[ prop ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn a;\\n}\\n\\nfunction objectType( obj ) {\\n\\tif ( typeof obj === \\\"undefined\\\" ) {\\n\\t\\treturn \\\"undefined\\\";\\n\\t}\\n\\n\\t// Consider: typeof null === object\\n\\tif ( obj === null ) {\\n\\t\\treturn \\\"null\\\";\\n\\t}\\n\\n\\tvar match = toString.call( obj ).match( /^\\\\[object\\\\s(.*)\\\\]$/ ),\\n\\t\\ttype = match && match[ 1 ];\\n\\n\\tswitch ( type ) {\\n\\t\\tcase \\\"Number\\\":\\n\\t\\t\\tif ( isNaN( obj ) ) {\\n\\t\\t\\t\\treturn \\\"nan\\\";\\n\\t\\t\\t}\\n\\t\\t\\treturn \\\"number\\\";\\n\\t\\tcase \\\"String\\\":\\n\\t\\tcase \\\"Boolean\\\":\\n\\t\\tcase \\\"Array\\\":\\n\\t\\tcase \\\"Set\\\":\\n\\t\\tcase \\\"Map\\\":\\n\\t\\tcase \\\"Date\\\":\\n\\t\\tcase \\\"RegExp\\\":\\n\\t\\tcase \\\"Function\\\":\\n\\t\\tcase \\\"Symbol\\\":\\n\\t\\t\\treturn type.toLowerCase();\\n\\t}\\n\\tif ( typeof obj === \\\"object\\\" ) {\\n\\t\\treturn \\\"object\\\";\\n\\t}\\n}\\n\\n// Safe object type checking\\nfunction is( type, obj ) {\\n\\treturn QUnit.objectType( obj ) === type;\\n}\\n\\nvar getUrlParams = function() {\\n\\tvar i, current;\\n\\tvar urlParams = {};\\n\\tvar location = window.location;\\n\\tvar params = location.search.slice( 1 ).split( \\\"&\\\" );\\n\\tvar length = params.length;\\n\\n\\tif ( params[ 0 ] ) {\\n\\t\\tfor ( i = 0; i < length; i++ ) {\\n\\t\\t\\tcurrent = params[ i ].split( \\\"=\\\" );\\n\\t\\t\\tcurrent[ 0 ] = decodeURIComponent( current[ 0 ] );\\n\\n\\t\\t\\t// allow just a key to turn on a flag, e.g., test.html?noglobals\\n\\t\\t\\tcurrent[ 1 ] = current[ 1 ] ? decodeURIComponent( current[ 1 ] ) : true;\\n\\t\\t\\tif ( urlParams[ current[ 0 ] ] ) {\\n\\t\\t\\t\\turlParams[ current[ 0 ] ] = [].concat( urlParams[ current[ 0 ] ], current[ 1 ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\turlParams[ current[ 0 ] ] = current[ 1 ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn urlParams;\\n};\\n\\n// Doesn't support IE6 to IE9, it will return undefined on these browsers\\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\\nfunction extractStacktrace( e, offset ) {\\n\\toffset = offset === undefined ? 4 : offset;\\n\\n\\tvar stack, include, i;\\n\\n\\tif ( e.stack ) {\\n\\t\\tstack = e.stack.split( \\\"\\\\n\\\" );\\n\\t\\tif ( /^error$/i.test( stack[ 0 ] ) ) {\\n\\t\\t\\tstack.shift();\\n\\t\\t}\\n\\t\\tif ( fileName ) {\\n\\t\\t\\tinclude = [];\\n\\t\\t\\tfor ( i = offset; i < stack.length; i++ ) {\\n\\t\\t\\t\\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tinclude.push( stack[ i ] );\\n\\t\\t\\t}\\n\\t\\t\\tif ( include.length ) {\\n\\t\\t\\t\\treturn include.join( \\\"\\\\n\\\" );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn stack[ offset ];\\n\\n\\t// Support: Safari <=6 only\\n\\t} else if ( e.sourceURL ) {\\n\\n\\t\\t// exclude useless self-reference for generated Error objects\\n\\t\\tif ( /qunit.js$/.test( e.sourceURL ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// for actual exceptions, this is useful\\n\\t\\treturn e.sourceURL + \\\":\\\" + e.line;\\n\\t}\\n}\\n\\nfunction sourceFromStacktrace( offset ) {\\n\\tvar error = new Error();\\n\\n\\t// Support: Safari <=7 only, IE <=10 - 11 only\\n\\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\\n\\tif ( !error.stack ) {\\n\\t\\ttry {\\n\\t\\t\\tthrow error;\\n\\t\\t} catch ( err ) {\\n\\t\\t\\terror = err;\\n\\t\\t}\\n\\t}\\n\\n\\treturn extractStacktrace( error, offset );\\n}\\n\\n/**\\n * Config object: Maintain internal state\\n * Later exposed as QUnit.config\\n * `config` initialized at top of scope\\n */\\nvar config = {\\n\\t// The queue of tests to run\\n\\tqueue: [],\\n\\n\\t// block until document ready\\n\\tblocking: true,\\n\\n\\t// by default, run previously failed tests first\\n\\t// very useful in combination with \\\"Hide passed tests\\\" checked\\n\\treorder: true,\\n\\n\\t// by default, modify document.title when suite is done\\n\\taltertitle: true,\\n\\n\\t// HTML Reporter: collapse every test except the first failing test\\n\\t// If false, all failing tests will be expanded\\n\\tcollapse: true,\\n\\n\\t// by default, scroll to top of the page when suite is done\\n\\tscrolltop: true,\\n\\n\\t// depth up-to which object will be dumped\\n\\tmaxDepth: 5,\\n\\n\\t// when enabled, all tests must call expect()\\n\\trequireExpects: false,\\n\\n\\t// add checkboxes that are persisted in the query-string\\n\\t// when enabled, the id is set to `true` as a `QUnit.config` property\\n\\turlConfig: [\\n\\t\\t{\\n\\t\\t\\tid: \\\"hidepassed\\\",\\n\\t\\t\\tlabel: \\\"Hide passed tests\\\",\\n\\t\\t\\ttooltip: \\\"Only show tests and assertions that fail. Stored as query-strings.\\\"\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tid: \\\"noglobals\\\",\\n\\t\\t\\tlabel: \\\"Check for Globals\\\",\\n\\t\\t\\ttooltip: \\\"Enabling this will test if any test introduces new properties on the \\\" +\\n\\t\\t\\t\\t\\\"global object (`window` in Browsers). Stored as query-strings.\\\"\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tid: \\\"notrycatch\\\",\\n\\t\\t\\tlabel: \\\"No try-catch\\\",\\n\\t\\t\\ttooltip: \\\"Enabling this will run tests outside of a try-catch block. Makes debugging \\\" +\\n\\t\\t\\t\\t\\\"exceptions in IE reasonable. Stored as query-strings.\\\"\\n\\t\\t}\\n\\t],\\n\\n\\t// Set of all modules.\\n\\tmodules: [],\\n\\n\\t// Stack of nested modules\\n\\tmoduleStack: [],\\n\\n\\t// The first unnamed module\\n\\tcurrentModule: {\\n\\t\\tname: \\\"\\\",\\n\\t\\ttests: []\\n\\t},\\n\\n\\tcallbacks: {}\\n};\\n\\nvar urlParams = defined.document ? getUrlParams() : {};\\n\\n// Push a loose unnamed module to the modules collection\\nconfig.modules.push( config.currentModule );\\n\\nif ( urlParams.filter === true ) {\\n\\tdelete urlParams.filter;\\n}\\n\\n// String search anywhere in moduleName+testName\\nconfig.filter = urlParams.filter;\\n\\nconfig.testId = [];\\nif ( urlParams.testId ) {\\n\\t// Ensure that urlParams.testId is an array\\n\\turlParams.testId = decodeURIComponent( urlParams.testId ).split( \\\",\\\" );\\n\\tfor (var i = 0; i < urlParams.testId.length; i++ ) {\\n\\t\\tconfig.testId.push( urlParams.testId[ i ] );\\n\\t}\\n}\\n\\nvar loggingCallbacks = {};\\n\\n// Register logging callbacks\\nfunction registerLoggingCallbacks( obj ) {\\n\\tvar i, l, key,\\n\\t\\tcallbackNames = [ \\\"begin\\\", \\\"done\\\", \\\"log\\\", \\\"testStart\\\", \\\"testDone\\\",\\n\\t\\t\\t\\\"moduleStart\\\", \\\"moduleDone\\\" ];\\n\\n\\tfunction registerLoggingCallback( key ) {\\n\\t\\tvar loggingCallback = function( callback ) {\\n\\t\\t\\tif ( objectType( callback ) !== \\\"function\\\" ) {\\n\\t\\t\\t\\tthrow new Error(\\n\\t\\t\\t\\t\\t\\\"QUnit logging methods require a callback function as their first parameters.\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tconfig.callbacks[ key ].push( callback );\\n\\t\\t};\\n\\n\\t\\t// DEPRECATED: This will be removed on QUnit 2.0.0+\\n\\t\\t// Stores the registered functions allowing restoring\\n\\t\\t// at verifyLoggingCallbacks() if modified\\n\\t\\tloggingCallbacks[ key ] = loggingCallback;\\n\\n\\t\\treturn loggingCallback;\\n\\t}\\n\\n\\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\\n\\t\\tkey = callbackNames[ i ];\\n\\n\\t\\t// Initialize key collection of logging callback\\n\\t\\tif ( objectType( config.callbacks[ key ] ) === \\\"undefined\\\" ) {\\n\\t\\t\\tconfig.callbacks[ key ] = [];\\n\\t\\t}\\n\\n\\t\\tobj[ key ] = registerLoggingCallback( key );\\n\\t}\\n}\\n\\nfunction runLoggingCallbacks( key, args ) {\\n\\tvar i, l, callbacks;\\n\\n\\tcallbacks = config.callbacks[ key ];\\n\\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\\n\\t\\tcallbacks[ i ]( args );\\n\\t}\\n}\\n\\n// DEPRECATED: This will be removed on 2.0.0+\\n// This function verifies if the loggingCallbacks were modified by the user\\n// If so, it will restore it, assign the given callback and print a console warning\\nfunction verifyLoggingCallbacks() {\\n\\tvar loggingCallback, userCallback;\\n\\n\\tfor ( loggingCallback in loggingCallbacks ) {\\n\\t\\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\\n\\n\\t\\t\\tuserCallback = QUnit[ loggingCallback ];\\n\\n\\t\\t\\t// Restore the callback function\\n\\t\\t\\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\\n\\n\\t\\t\\t// Assign the deprecated given callback\\n\\t\\t\\tQUnit[ loggingCallback ]( userCallback );\\n\\n\\t\\t\\tif ( global.console && global.console.warn ) {\\n\\t\\t\\t\\tglobal.console.warn(\\n\\t\\t\\t\\t\\t\\\"QUnit.\\\" + loggingCallback + \\\" was replaced with a new value.\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\\"Please, check out the documentation on how to apply logging callbacks.\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\\"Reference: http://api.qunitjs.com/category/callbacks/\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n( function() {\\n\\tif ( !defined.document ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// `onErrorFnPrev` initialized at top of scope\\n\\t// Preserve other handlers\\n\\tvar onErrorFnPrev = window.onerror;\\n\\n\\t// Cover uncaught exceptions\\n\\t// Returning true will suppress the default browser handler,\\n\\t// returning false will let it run.\\n\\twindow.onerror = function( error, filePath, linerNr ) {\\n\\t\\tvar ret = false;\\n\\t\\tif ( onErrorFnPrev ) {\\n\\t\\t\\tret = onErrorFnPrev( error, filePath, linerNr );\\n\\t\\t}\\n\\n\\t\\t// Treat return value as window.onerror itself does,\\n\\t\\t// Only do our handling if not suppressed.\\n\\t\\tif ( ret !== true ) {\\n\\t\\t\\tif ( QUnit.config.current ) {\\n\\t\\t\\t\\tif ( QUnit.config.current.ignoreGlobalErrors ) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tQUnit.pushFailure( error, filePath + \\\":\\\" + linerNr );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tQUnit.test( \\\"global failure\\\", extend(function() {\\n\\t\\t\\t\\t\\tQUnit.pushFailure( error, filePath + \\\":\\\" + linerNr );\\n\\t\\t\\t\\t}, { validTest: true } ) );\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t};\\n} )();\\n\\nQUnit.urlParams = urlParams;\\n\\n// Figure out if we're running the tests from a server or not\\nQUnit.isLocal = !( defined.document && window.location.protocol !== \\\"file:\\\" );\\n\\n// Expose the current QUnit version\\nQUnit.version = \\\"1.20.0\\\";\\n\\nextend( QUnit, {\\n\\n\\t// call on start of module test to prepend name to all tests\\n\\tmodule: function( name, testEnvironment, executeNow ) {\\n\\t\\tvar module, moduleFns;\\n\\t\\tvar currentModule = config.currentModule;\\n\\n\\t\\tif ( arguments.length === 2 ) {\\n\\t\\t\\tif ( testEnvironment instanceof Function ) {\\n\\t\\t\\t\\texecuteNow = testEnvironment;\\n\\t\\t\\t\\ttestEnvironment = undefined;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// DEPRECATED: handles setup/teardown functions,\\n\\t\\t// beforeEach and afterEach should be used instead\\n\\t\\tif ( testEnvironment && testEnvironment.setup ) {\\n\\t\\t\\ttestEnvironment.beforeEach = testEnvironment.setup;\\n\\t\\t\\tdelete testEnvironment.setup;\\n\\t\\t}\\n\\t\\tif ( testEnvironment && testEnvironment.teardown ) {\\n\\t\\t\\ttestEnvironment.afterEach = testEnvironment.teardown;\\n\\t\\t\\tdelete testEnvironment.teardown;\\n\\t\\t}\\n\\n\\t\\tmodule = createModule();\\n\\n\\t\\tmoduleFns = {\\n\\t\\t\\tbeforeEach: setHook( module, \\\"beforeEach\\\" ),\\n\\t\\t\\tafterEach: setHook( module, \\\"afterEach\\\" )\\n\\t\\t};\\n\\n\\t\\tif ( executeNow instanceof Function ) {\\n\\t\\t\\tconfig.moduleStack.push( module );\\n\\t\\t\\tsetCurrentModule( module );\\n\\t\\t\\texecuteNow.call( module.testEnvironment, moduleFns );\\n\\t\\t\\tconfig.moduleStack.pop();\\n\\t\\t\\tmodule = module.parentModule || currentModule;\\n\\t\\t}\\n\\n\\t\\tsetCurrentModule( module );\\n\\n\\t\\tfunction createModule() {\\n\\t\\t\\tvar parentModule = config.moduleStack.length ?\\n\\t\\t\\t\\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\\n\\t\\t\\tvar moduleName = parentModule !== null ?\\n\\t\\t\\t\\t[ parentModule.name, name ].join( \\\" > \\\" ) : name;\\n\\t\\t\\tvar module = {\\n\\t\\t\\t\\tname: moduleName,\\n\\t\\t\\t\\tparentModule: parentModule,\\n\\t\\t\\t\\ttests: []\\n\\t\\t\\t};\\n\\n\\t\\t\\tvar env = {};\\n\\t\\t\\tif ( parentModule ) {\\n\\t\\t\\t\\textend( env, parentModule.testEnvironment );\\n\\t\\t\\t\\tdelete env.beforeEach;\\n\\t\\t\\t\\tdelete env.afterEach;\\n\\t\\t\\t}\\n\\t\\t\\textend( env, testEnvironment );\\n\\t\\t\\tmodule.testEnvironment = env;\\n\\n\\t\\t\\tconfig.modules.push( module );\\n\\t\\t\\treturn module;\\n\\t\\t}\\n\\n\\t\\tfunction setCurrentModule( module ) {\\n\\t\\t\\tconfig.currentModule = module;\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\\n\\tasyncTest: asyncTest,\\n\\n\\ttest: test,\\n\\n\\tskip: skip,\\n\\n\\tonly: only,\\n\\n\\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\\n\\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\\n\\tstart: function( count ) {\\n\\t\\tvar globalStartAlreadyCalled = globalStartCalled;\\n\\n\\t\\tif ( !config.current ) {\\n\\t\\t\\tglobalStartCalled = true;\\n\\n\\t\\t\\tif ( runStarted ) {\\n\\t\\t\\t\\tthrow new Error( \\\"Called start() outside of a test context while already started\\\" );\\n\\t\\t\\t} else if ( globalStartAlreadyCalled || count > 1 ) {\\n\\t\\t\\t\\tthrow new Error( \\\"Called start() outside of a test context too many times\\\" );\\n\\t\\t\\t} else if ( config.autostart ) {\\n\\t\\t\\t\\tthrow new Error( \\\"Called start() outside of a test context when \\\" +\\n\\t\\t\\t\\t\\t\\\"QUnit.config.autostart was true\\\" );\\n\\t\\t\\t} else if ( !config.pageLoaded ) {\\n\\n\\t\\t\\t\\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\\n\\t\\t\\t\\tconfig.autostart = true;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\n\\t\\t\\t// If a test is running, adjust its semaphore\\n\\t\\t\\tconfig.current.semaphore -= count || 1;\\n\\n\\t\\t\\t// If semaphore is non-numeric, throw error\\n\\t\\t\\tif ( isNaN( config.current.semaphore ) ) {\\n\\t\\t\\t\\tconfig.current.semaphore = 0;\\n\\n\\t\\t\\t\\tQUnit.pushFailure(\\n\\t\\t\\t\\t\\t\\\"Called start() with a non-numeric decrement.\\\",\\n\\t\\t\\t\\t\\tsourceFromStacktrace( 2 )\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Don't start until equal number of stop-calls\\n\\t\\t\\tif ( config.current.semaphore > 0 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// throw an Error if start is called more often than stop\\n\\t\\t\\tif ( config.current.semaphore < 0 ) {\\n\\t\\t\\t\\tconfig.current.semaphore = 0;\\n\\n\\t\\t\\t\\tQUnit.pushFailure(\\n\\t\\t\\t\\t\\t\\\"Called start() while already started (test's semaphore was 0 already)\\\",\\n\\t\\t\\t\\t\\tsourceFromStacktrace( 2 )\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tresumeProcessing();\\n\\t},\\n\\n\\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\\n\\tstop: function( count ) {\\n\\n\\t\\t// If there isn't a test running, don't allow QUnit.stop() to be called\\n\\t\\tif ( !config.current ) {\\n\\t\\t\\tthrow new Error( \\\"Called stop() outside of a test context\\\" );\\n\\t\\t}\\n\\n\\t\\t// If a test is running, adjust its semaphore\\n\\t\\tconfig.current.semaphore += count || 1;\\n\\n\\t\\tpauseProcessing();\\n\\t},\\n\\n\\tconfig: config,\\n\\n\\tis: is,\\n\\n\\tobjectType: objectType,\\n\\n\\textend: extend,\\n\\n\\tload: function() {\\n\\t\\tconfig.pageLoaded = true;\\n\\n\\t\\t// Initialize the configuration options\\n\\t\\textend( config, {\\n\\t\\t\\tstats: { all: 0, bad: 0 },\\n\\t\\t\\tmoduleStats: { all: 0, bad: 0 },\\n\\t\\t\\tstarted: 0,\\n\\t\\t\\tupdateRate: 1000,\\n\\t\\t\\tautostart: true,\\n\\t\\t\\tfilter: \\\"\\\"\\n\\t\\t}, true );\\n\\n\\t\\tconfig.blocking = false;\\n\\n\\t\\tif ( config.autostart ) {\\n\\t\\t\\tresumeProcessing();\\n\\t\\t}\\n\\t},\\n\\n\\tstack: function( offset ) {\\n\\t\\toffset = ( offset || 0 ) + 2;\\n\\t\\treturn sourceFromStacktrace( offset );\\n\\t}\\n});\\n\\nregisterLoggingCallbacks( QUnit );\\n\\nfunction begin() {\\n\\tvar i, l,\\n\\t\\tmodulesLog = [];\\n\\n\\t// If the test run hasn't officially begun yet\\n\\tif ( !config.started ) {\\n\\n\\t\\t// Record the time of the test run's beginning\\n\\t\\tconfig.started = now();\\n\\n\\t\\tverifyLoggingCallbacks();\\n\\n\\t\\t// Delete the loose unnamed module if unused.\\n\\t\\tif ( config.modules[ 0 ].name === \\\"\\\" && config.modules[ 0 ].tests.length === 0 ) {\\n\\t\\t\\tconfig.modules.shift();\\n\\t\\t}\\n\\n\\t\\t// Avoid unnecessary information by not logging modules' test environments\\n\\t\\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\\n\\t\\t\\tmodulesLog.push({\\n\\t\\t\\t\\tname: config.modules[ i ].name,\\n\\t\\t\\t\\ttests: config.modules[ i ].tests\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// The test run is officially beginning now\\n\\t\\trunLoggingCallbacks( \\\"begin\\\", {\\n\\t\\t\\ttotalTests: Test.count,\\n\\t\\t\\tmodules: modulesLog\\n\\t\\t});\\n\\t}\\n\\n\\tconfig.blocking = false;\\n\\tprocess( true );\\n}\\n\\nfunction process( last ) {\\n\\tfunction next() {\\n\\t\\tprocess( last );\\n\\t}\\n\\tvar start = now();\\n\\tconfig.depth = ( config.depth || 0 ) + 1;\\n\\n\\twhile ( config.queue.length && !config.blocking ) {\\n\\t\\tif ( !defined.setTimeout || config.updateRate <= 0 ||\\n\\t\\t\\t\\t( ( now() - start ) < config.updateRate ) ) {\\n\\t\\t\\tif ( config.current ) {\\n\\n\\t\\t\\t\\t// Reset async tracking for each phase of the Test lifecycle\\n\\t\\t\\t\\tconfig.current.usedAsync = false;\\n\\t\\t\\t}\\n\\t\\t\\tconfig.queue.shift()();\\n\\t\\t} else {\\n\\t\\t\\tsetTimeout( next, 13 );\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tconfig.depth--;\\n\\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\\n\\t\\tdone();\\n\\t}\\n}\\n\\nfunction pauseProcessing() {\\n\\tconfig.blocking = true;\\n\\n\\tif ( config.testTimeout && defined.setTimeout ) {\\n\\t\\tclearTimeout( config.timeout );\\n\\t\\tconfig.timeout = setTimeout(function() {\\n\\t\\t\\tif ( config.current ) {\\n\\t\\t\\t\\tconfig.current.semaphore = 0;\\n\\t\\t\\t\\tQUnit.pushFailure( \\\"Test timed out\\\", sourceFromStacktrace( 2 ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthrow new Error( \\\"Test timed out\\\" );\\n\\t\\t\\t}\\n\\t\\t\\tresumeProcessing();\\n\\t\\t}, config.testTimeout );\\n\\t}\\n}\\n\\nfunction resumeProcessing() {\\n\\trunStarted = true;\\n\\n\\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\\n\\tif ( defined.setTimeout ) {\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tif ( config.current && config.current.semaphore > 0 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tif ( config.timeout ) {\\n\\t\\t\\t\\tclearTimeout( config.timeout );\\n\\t\\t\\t}\\n\\n\\t\\t\\tbegin();\\n\\t\\t}, 13 );\\n\\t} else {\\n\\t\\tbegin();\\n\\t}\\n}\\n\\nfunction done() {\\n\\tvar runtime, passed;\\n\\n\\tconfig.autorun = true;\\n\\n\\t// Log the last module results\\n\\tif ( config.previousModule ) {\\n\\t\\trunLoggingCallbacks( \\\"moduleDone\\\", {\\n\\t\\t\\tname: config.previousModule.name,\\n\\t\\t\\ttests: config.previousModule.tests,\\n\\t\\t\\tfailed: config.moduleStats.bad,\\n\\t\\t\\tpassed: config.moduleStats.all - config.moduleStats.bad,\\n\\t\\t\\ttotal: config.moduleStats.all,\\n\\t\\t\\truntime: now() - config.moduleStats.started\\n\\t\\t});\\n\\t}\\n\\tdelete config.previousModule;\\n\\n\\truntime = now() - config.started;\\n\\tpassed = config.stats.all - config.stats.bad;\\n\\n\\trunLoggingCallbacks( \\\"done\\\", {\\n\\t\\tfailed: config.stats.bad,\\n\\t\\tpassed: passed,\\n\\t\\ttotal: config.stats.all,\\n\\t\\truntime: runtime\\n\\t});\\n}\\n\\nfunction setHook( module, hookName ) {\\n\\tif ( module.testEnvironment === undefined ) {\\n\\t\\tmodule.testEnvironment = {};\\n\\t}\\n\\n\\treturn function( callback ) {\\n\\t\\tmodule.testEnvironment[ hookName ] = callback;\\n\\t};\\n}\\n\\nvar focused = false;\\n\\nfunction Test( settings ) {\\n\\tvar this$1 = this;\\n\\n\\tvar i, l;\\n\\n\\t++Test.count;\\n\\n\\textend( this, settings );\\n\\tthis.assertions = [];\\n\\tthis.semaphore = 0;\\n\\tthis.usedAsync = false;\\n\\tthis.module = config.currentModule;\\n\\tthis.stack = sourceFromStacktrace( 3 );\\n\\n\\t// Register unique strings\\n\\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\\n\\t\\tif ( this$1.module.tests[ i ].name === this$1.testName ) {\\n\\t\\t\\tthis$1.testName += \\\" \\\";\\n\\t\\t}\\n\\t}\\n\\n\\tthis.testId = generateHash( this.module.name, this.testName );\\n\\n\\tthis.module.tests.push({\\n\\t\\tname: this.testName,\\n\\t\\ttestId: this.testId\\n\\t});\\n\\n\\tif ( settings.skip ) {\\n\\n\\t\\t// Skipped tests will fully ignore any sent callback\\n\\t\\tthis.callback = function() {};\\n\\t\\tthis.async = false;\\n\\t\\tthis.expected = 0;\\n\\t} else {\\n\\t\\tthis.assert = new Assert( this );\\n\\t}\\n}\\n\\nTest.count = 0;\\n\\nTest.prototype = {\\n\\tbefore: function() {\\n\\t\\tif (\\n\\n\\t\\t\\t// Emit moduleStart when we're switching from one module to another\\n\\t\\t\\tthis.module !== config.previousModule ||\\n\\n\\t\\t\\t\\t// They could be equal (both undefined) but if the previousModule property doesn't\\n\\t\\t\\t\\t// yet exist it means this is the first test in a suite that isn't wrapped in a\\n\\t\\t\\t\\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\\n\\t\\t\\t\\t// Without this, reporters can get testStart before moduleStart  which is a problem.\\n\\t\\t\\t\\t!hasOwn.call( config, \\\"previousModule\\\" )\\n\\t\\t) {\\n\\t\\t\\tif ( hasOwn.call( config, \\\"previousModule\\\" ) ) {\\n\\t\\t\\t\\trunLoggingCallbacks( \\\"moduleDone\\\", {\\n\\t\\t\\t\\t\\tname: config.previousModule.name,\\n\\t\\t\\t\\t\\ttests: config.previousModule.tests,\\n\\t\\t\\t\\t\\tfailed: config.moduleStats.bad,\\n\\t\\t\\t\\t\\tpassed: config.moduleStats.all - config.moduleStats.bad,\\n\\t\\t\\t\\t\\ttotal: config.moduleStats.all,\\n\\t\\t\\t\\t\\truntime: now() - config.moduleStats.started\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\tconfig.previousModule = this.module;\\n\\t\\t\\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\\n\\t\\t\\trunLoggingCallbacks( \\\"moduleStart\\\", {\\n\\t\\t\\t\\tname: this.module.name,\\n\\t\\t\\t\\ttests: this.module.tests\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tconfig.current = this;\\n\\n\\t\\tif ( this.module.testEnvironment ) {\\n\\t\\t\\tdelete this.module.testEnvironment.beforeEach;\\n\\t\\t\\tdelete this.module.testEnvironment.afterEach;\\n\\t\\t}\\n\\t\\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\\n\\n\\t\\tthis.started = now();\\n\\t\\trunLoggingCallbacks( \\\"testStart\\\", {\\n\\t\\t\\tname: this.testName,\\n\\t\\t\\tmodule: this.module.name,\\n\\t\\t\\ttestId: this.testId\\n\\t\\t});\\n\\n\\t\\tif ( !config.pollution ) {\\n\\t\\t\\tsaveGlobal();\\n\\t\\t}\\n\\t},\\n\\n\\trun: function() {\\n\\t\\tvar promise;\\n\\n\\t\\tconfig.current = this;\\n\\n\\t\\tif ( this.async ) {\\n\\t\\t\\tQUnit.stop();\\n\\t\\t}\\n\\n\\t\\tthis.callbackStarted = now();\\n\\n\\t\\tif ( config.notrycatch ) {\\n\\t\\t\\trunTest( this );\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\trunTest( this );\\n\\t\\t} catch ( e ) {\\n\\t\\t\\tthis.pushFailure( \\\"Died on test #\\\" + ( this.assertions.length + 1 ) + \\\" \\\" +\\n\\t\\t\\t\\tthis.stack + \\\": \\\" + ( e.message || e ), extractStacktrace( e, 0 ) );\\n\\n\\t\\t\\t// else next test will carry the responsibility\\n\\t\\t\\tsaveGlobal();\\n\\n\\t\\t\\t// Restart the tests if they're blocking\\n\\t\\t\\tif ( config.blocking ) {\\n\\t\\t\\t\\tQUnit.start();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction runTest( test ) {\\n\\t\\t\\tpromise = test.callback.call( test.testEnvironment, test.assert );\\n\\t\\t\\ttest.resolvePromise( promise );\\n\\t\\t}\\n\\t},\\n\\n\\tafter: function() {\\n\\t\\tcheckPollution();\\n\\t},\\n\\n\\tqueueHook: function( hook, hookName ) {\\n\\t\\tvar promise,\\n\\t\\t\\ttest = this;\\n\\t\\treturn function runHook() {\\n\\t\\t\\tconfig.current = test;\\n\\t\\t\\tif ( config.notrycatch ) {\\n\\t\\t\\t\\tcallHook();\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tcallHook();\\n\\t\\t\\t} catch ( error ) {\\n\\t\\t\\t\\ttest.pushFailure( hookName + \\\" failed on \\\" + test.testName + \\\": \\\" +\\n\\t\\t\\t\\t( error.message || error ), extractStacktrace( error, 0 ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction callHook() {\\n\\t\\t\\t\\tpromise = hook.call( test.testEnvironment, test.assert );\\n\\t\\t\\t\\ttest.resolvePromise( promise, hookName );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t},\\n\\n\\t// Currently only used for module level hooks, can be used to add global level ones\\n\\thooks: function( handler ) {\\n\\t\\tvar hooks = [];\\n\\n\\t\\tfunction processHooks( test, module ) {\\n\\t\\t\\tif ( module.parentModule ) {\\n\\t\\t\\t\\tprocessHooks( test, module.parentModule );\\n\\t\\t\\t}\\n\\t\\t\\tif ( module.testEnvironment &&\\n\\t\\t\\t\\tQUnit.objectType( module.testEnvironment[ handler ] ) === \\\"function\\\" ) {\\n\\t\\t\\t\\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Hooks are ignored on skipped tests\\n\\t\\tif ( !this.skip ) {\\n\\t\\t\\tprocessHooks( this, this.module );\\n\\t\\t}\\n\\t\\treturn hooks;\\n\\t},\\n\\n\\tfinish: function() {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tconfig.current = this;\\n\\t\\tif ( config.requireExpects && this.expected === null ) {\\n\\t\\t\\tthis.pushFailure( \\\"Expected number of assertions to be defined, but expect() was \\\" +\\n\\t\\t\\t\\t\\\"not called.\\\", this.stack );\\n\\t\\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\\n\\t\\t\\tthis.pushFailure( \\\"Expected \\\" + this.expected + \\\" assertions, but \\\" +\\n\\t\\t\\t\\tthis.assertions.length + \\\" were run\\\", this.stack );\\n\\t\\t} else if ( this.expected === null && !this.assertions.length ) {\\n\\t\\t\\tthis.pushFailure( \\\"Expected at least one assertion, but none were run - call \\\" +\\n\\t\\t\\t\\t\\\"expect(0) to accept zero assertions.\\\", this.stack );\\n\\t\\t}\\n\\n\\t\\tvar i,\\n\\t\\t\\tbad = 0;\\n\\n\\t\\tthis.runtime = now() - this.started;\\n\\t\\tconfig.stats.all += this.assertions.length;\\n\\t\\tconfig.moduleStats.all += this.assertions.length;\\n\\n\\t\\tfor ( i = 0; i < this.assertions.length; i++ ) {\\n\\t\\t\\tif ( !this$1.assertions[ i ].result ) {\\n\\t\\t\\t\\tbad++;\\n\\t\\t\\t\\tconfig.stats.bad++;\\n\\t\\t\\t\\tconfig.moduleStats.bad++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trunLoggingCallbacks( \\\"testDone\\\", {\\n\\t\\t\\tname: this.testName,\\n\\t\\t\\tmodule: this.module.name,\\n\\t\\t\\tskipped: !!this.skip,\\n\\t\\t\\tfailed: bad,\\n\\t\\t\\tpassed: this.assertions.length - bad,\\n\\t\\t\\ttotal: this.assertions.length,\\n\\t\\t\\truntime: this.runtime,\\n\\n\\t\\t\\t// HTML Reporter use\\n\\t\\t\\tassertions: this.assertions,\\n\\t\\t\\ttestId: this.testId,\\n\\n\\t\\t\\t// Source of Test\\n\\t\\t\\tsource: this.stack,\\n\\n\\t\\t\\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\\n\\t\\t\\tduration: this.runtime\\n\\t\\t});\\n\\n\\t\\t// QUnit.reset() is deprecated and will be replaced for a new\\n\\t\\t// fixture reset function on QUnit 2.0/2.1.\\n\\t\\t// It's still called here for backwards compatibility handling\\n\\t\\tQUnit.reset();\\n\\n\\t\\tconfig.current = undefined;\\n\\t},\\n\\n\\tqueue: function() {\\n\\t\\tvar priority,\\n\\t\\t\\ttest = this;\\n\\n\\t\\tif ( !this.valid() ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfunction run() {\\n\\n\\t\\t\\t// each of these can by async\\n\\t\\t\\tsynchronize([\\n\\t\\t\\t\\tfunction() {\\n\\t\\t\\t\\t\\ttest.before();\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\ttest.hooks( \\\"beforeEach\\\" ),\\n\\t\\t\\t\\tfunction() {\\n\\t\\t\\t\\t\\ttest.run();\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\ttest.hooks( \\\"afterEach\\\" ).reverse(),\\n\\n\\t\\t\\t\\tfunction() {\\n\\t\\t\\t\\t\\ttest.after();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tfunction() {\\n\\t\\t\\t\\t\\ttest.finish();\\n\\t\\t\\t\\t}\\n\\t\\t\\t]);\\n\\t\\t}\\n\\n\\t\\t// Prioritize previously failed tests, detected from sessionStorage\\n\\t\\tpriority = QUnit.config.reorder && defined.sessionStorage &&\\n\\t\\t\\t\\t+sessionStorage.getItem( \\\"qunit-test-\\\" + this.module.name + \\\"-\\\" + this.testName );\\n\\n\\t\\treturn synchronize( run, priority );\\n\\t},\\n\\n\\tpush: function( result, actual, expected, message, negative ) {\\n\\t\\tvar source,\\n\\t\\t\\tdetails = {\\n\\t\\t\\t\\tmodule: this.module.name,\\n\\t\\t\\t\\tname: this.testName,\\n\\t\\t\\t\\tresult: result,\\n\\t\\t\\t\\tmessage: message,\\n\\t\\t\\t\\tactual: actual,\\n\\t\\t\\t\\texpected: expected,\\n\\t\\t\\t\\ttestId: this.testId,\\n\\t\\t\\t\\tnegative: negative || false,\\n\\t\\t\\t\\truntime: now() - this.started\\n\\t\\t\\t};\\n\\n\\t\\tif ( !result ) {\\n\\t\\t\\tsource = sourceFromStacktrace();\\n\\n\\t\\t\\tif ( source ) {\\n\\t\\t\\t\\tdetails.source = source;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trunLoggingCallbacks( \\\"log\\\", details );\\n\\n\\t\\tthis.assertions.push({\\n\\t\\t\\tresult: !!result,\\n\\t\\t\\tmessage: message\\n\\t\\t});\\n\\t},\\n\\n\\tpushFailure: function( message, source, actual ) {\\n\\t\\tif ( !( this instanceof Test ) ) {\\n\\t\\t\\tthrow new Error( \\\"pushFailure() assertion outside test context, was \\\" +\\n\\t\\t\\t\\tsourceFromStacktrace( 2 ) );\\n\\t\\t}\\n\\n\\t\\tvar details = {\\n\\t\\t\\t\\tmodule: this.module.name,\\n\\t\\t\\t\\tname: this.testName,\\n\\t\\t\\t\\tresult: false,\\n\\t\\t\\t\\tmessage: message || \\\"error\\\",\\n\\t\\t\\t\\tactual: actual || null,\\n\\t\\t\\t\\ttestId: this.testId,\\n\\t\\t\\t\\truntime: now() - this.started\\n\\t\\t\\t};\\n\\n\\t\\tif ( source ) {\\n\\t\\t\\tdetails.source = source;\\n\\t\\t}\\n\\n\\t\\trunLoggingCallbacks( \\\"log\\\", details );\\n\\n\\t\\tthis.assertions.push({\\n\\t\\t\\tresult: false,\\n\\t\\t\\tmessage: message\\n\\t\\t});\\n\\t},\\n\\n\\tresolvePromise: function( promise, phase ) {\\n\\t\\tvar then, message,\\n\\t\\t\\ttest = this;\\n\\t\\tif ( promise != null ) {\\n\\t\\t\\tthen = promise.then;\\n\\t\\t\\tif ( QUnit.objectType( then ) === \\\"function\\\" ) {\\n\\t\\t\\t\\tQUnit.stop();\\n\\t\\t\\t\\tthen.call(\\n\\t\\t\\t\\t\\tpromise,\\n\\t\\t\\t\\t\\tfunction() { QUnit.start(); },\\n\\t\\t\\t\\t\\tfunction( error ) {\\n\\t\\t\\t\\t\\t\\tmessage = \\\"Promise rejected \\\" +\\n\\t\\t\\t\\t\\t\\t\\t( !phase ? \\\"during\\\" : phase.replace( /Each$/, \\\"\\\" ) ) +\\n\\t\\t\\t\\t\\t\\t\\t\\\" \\\" + test.testName + \\\": \\\" + ( error.message || error );\\n\\t\\t\\t\\t\\t\\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\\n\\n\\t\\t\\t\\t\\t\\t// else next test will carry the responsibility\\n\\t\\t\\t\\t\\t\\tsaveGlobal();\\n\\n\\t\\t\\t\\t\\t\\t// Unblock\\n\\t\\t\\t\\t\\t\\tQUnit.start();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\tvalid: function() {\\n\\t\\tvar include,\\n\\t\\t\\tfilter = config.filter && config.filter.toLowerCase(),\\n\\t\\t\\tmodule = QUnit.urlParams.module && QUnit.urlParams.module.toLowerCase(),\\n\\t\\t\\tfullName = ( this.module.name + \\\": \\\" + this.testName ).toLowerCase();\\n\\n\\t\\tfunction testInModuleChain( testModule ) {\\n\\t\\t\\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\\n\\t\\t\\tif ( testModuleName === module ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} else if ( testModule.parentModule ) {\\n\\t\\t\\t\\treturn testInModuleChain( testModule.parentModule );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Internally-generated tests are always valid\\n\\t\\tif ( this.callback && this.callback.validTest ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif ( config.testId.length > 0 && inArray( this.testId, config.testId ) < 0 ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( module && !testInModuleChain( this.module ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( !filter ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tinclude = filter.charAt( 0 ) !== \\\"!\\\";\\n\\t\\tif ( !include ) {\\n\\t\\t\\tfilter = filter.slice( 1 );\\n\\t\\t}\\n\\n\\t\\t// If the filter matches, we need to honour include\\n\\t\\tif ( fullName.indexOf( filter ) !== -1 ) {\\n\\t\\t\\treturn include;\\n\\t\\t}\\n\\n\\t\\t// Otherwise, do the opposite\\n\\t\\treturn !include;\\n\\t}\\n};\\n\\n// Resets the test setup. Useful for tests that modify the DOM.\\n/*\\nDEPRECATED: Use multiple tests instead of resetting inside a test.\\nUse testStart or testDone for custom cleanup.\\nThis method will throw an error in 2.0, and will be removed in 2.1\\n*/\\nQUnit.reset = function() {\\n\\n\\t// Return on non-browser environments\\n\\t// This is necessary to not break on node tests\\n\\tif ( !defined.document ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar fixture = defined.document && document.getElementById &&\\n\\t\\t\\tdocument.getElementById( \\\"qunit-fixture\\\" );\\n\\n\\tif ( fixture ) {\\n\\t\\tfixture.innerHTML = config.fixture;\\n\\t}\\n};\\n\\nQUnit.pushFailure = function() {\\n\\tif ( !QUnit.config.current ) {\\n\\t\\tthrow new Error( \\\"pushFailure() assertion outside test context, in \\\" +\\n\\t\\t\\tsourceFromStacktrace( 2 ) );\\n\\t}\\n\\n\\t// Gets current test obj\\n\\tvar currentTest = QUnit.config.current;\\n\\n\\treturn currentTest.pushFailure.apply( currentTest, arguments );\\n};\\n\\n// Based on Java's String.hashCode, a simple but not\\n// rigorously collision resistant hashing function\\nfunction generateHash( module, testName ) {\\n\\tvar hex,\\n\\t\\ti = 0,\\n\\t\\thash = 0,\\n\\t\\tstr = module + \\\"\\\\x1C\\\" + testName,\\n\\t\\tlen = str.length;\\n\\n\\tfor ( ; i < len; i++ ) {\\n\\t\\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\\n\\t\\thash |= 0;\\n\\t}\\n\\n\\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\\n\\t// strictly necessary but increases user understanding that the id is a SHA-like hash\\n\\thex = ( 0x100000000 + hash ).toString( 16 );\\n\\tif ( hex.length < 8 ) {\\n\\t\\thex = \\\"0000000\\\" + hex;\\n\\t}\\n\\n\\treturn hex.slice( -8 );\\n}\\n\\nfunction synchronize( callback, priority ) {\\n\\tvar last = !priority;\\n\\n\\tif ( QUnit.objectType( callback ) === \\\"array\\\" ) {\\n\\t\\twhile ( callback.length ) {\\n\\t\\t\\tsynchronize( callback.shift() );\\n\\t\\t}\\n\\t\\treturn;\\n\\t}\\n\\n\\tif ( priority ) {\\n\\t\\tpriorityFill( callback );\\n\\t} else {\\n\\t\\tconfig.queue.push( callback );\\n\\t}\\n\\n\\tif ( config.autorun && !config.blocking ) {\\n\\t\\tprocess( last );\\n\\t}\\n}\\n\\n// Place previously failed tests on a queue priority line, respecting the order they get assigned.\\nfunction priorityFill( callback ) {\\n\\tvar queue, prioritizedQueue;\\n\\n\\tqueue = config.queue.slice( priorityFill.pos );\\n\\tprioritizedQueue = config.queue.slice( 0, -config.queue.length + priorityFill.pos );\\n\\n\\tqueue.unshift( callback );\\n\\tqueue.unshift.apply( queue, prioritizedQueue );\\n\\n\\tconfig.queue = queue;\\n\\n\\tpriorityFill.pos += 1;\\n}\\npriorityFill.pos = 0;\\n\\nfunction saveGlobal() {\\n\\tconfig.pollution = [];\\n\\n\\tif ( config.noglobals ) {\\n\\t\\tfor ( var key in global ) {\\n\\t\\t\\tif ( hasOwn.call( global, key ) ) {\\n\\n\\t\\t\\t\\t// in Opera sometimes DOM element ids show up here, ignore them\\n\\t\\t\\t\\tif ( /^qunit-test-output/.test( key ) ) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconfig.pollution.push( key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction checkPollution() {\\n\\tvar newGlobals,\\n\\t\\tdeletedGlobals,\\n\\t\\told = config.pollution;\\n\\n\\tsaveGlobal();\\n\\n\\tnewGlobals = diff( config.pollution, old );\\n\\tif ( newGlobals.length > 0 ) {\\n\\t\\tQUnit.pushFailure( \\\"Introduced global variable(s): \\\" + newGlobals.join( \\\", \\\" ) );\\n\\t}\\n\\n\\tdeletedGlobals = diff( old, config.pollution );\\n\\tif ( deletedGlobals.length > 0 ) {\\n\\t\\tQUnit.pushFailure( \\\"Deleted global variable(s): \\\" + deletedGlobals.join( \\\", \\\" ) );\\n\\t}\\n}\\n\\n// Will be exposed as QUnit.asyncTest\\nfunction asyncTest( testName, expected, callback ) {\\n\\tif ( arguments.length === 2 ) {\\n\\t\\tcallback = expected;\\n\\t\\texpected = null;\\n\\t}\\n\\n\\tQUnit.test( testName, expected, callback, true );\\n}\\n\\n// Will be exposed as QUnit.test\\nfunction test( testName, expected, callback, async ) {\\n\\tif ( focused )  { return; }\\n\\n\\tvar newTest;\\n\\n\\tif ( arguments.length === 2 ) {\\n\\t\\tcallback = expected;\\n\\t\\texpected = null;\\n\\t}\\n\\n\\tnewTest = new Test({\\n\\t\\ttestName: testName,\\n\\t\\texpected: expected,\\n\\t\\tasync: async,\\n\\t\\tcallback: callback\\n\\t});\\n\\n\\tnewTest.queue();\\n}\\n\\n// Will be exposed as QUnit.skip\\nfunction skip( testName ) {\\n\\tif ( focused )  { return; }\\n\\n\\tvar test = new Test({\\n\\t\\ttestName: testName,\\n\\t\\tskip: true\\n\\t});\\n\\n\\ttest.queue();\\n}\\n\\n// Will be exposed as QUnit.only\\nfunction only( testName, expected, callback, async ) {\\n\\tvar newTest;\\n\\n\\tif ( focused )  { return; }\\n\\n\\tQUnit.config.queue.length = 0;\\n\\tfocused = true;\\n\\n\\tif ( arguments.length === 2 ) {\\n\\t\\tcallback = expected;\\n\\t\\texpected = null;\\n\\t}\\n\\n\\tnewTest = new Test({\\n\\t\\ttestName: testName,\\n\\t\\texpected: expected,\\n\\t\\tasync: async,\\n\\t\\tcallback: callback\\n\\t});\\n\\n\\tnewTest.queue();\\n}\\n\\nfunction Assert( testContext ) {\\n\\tthis.test = testContext;\\n}\\n\\n// Assert helpers\\nQUnit.assert = Assert.prototype = {\\n\\n\\t// Specify the number of expected assertions to guarantee that failed test\\n\\t// (no assertions are run at all) don't slip through.\\n\\texpect: function( asserts ) {\\n\\t\\tif ( arguments.length === 1 ) {\\n\\t\\t\\tthis.test.expected = asserts;\\n\\t\\t} else {\\n\\t\\t\\treturn this.test.expected;\\n\\t\\t}\\n\\t},\\n\\n\\t// Increment this Test's semaphore counter, then return a function that\\n\\t// decrements that counter a maximum of once.\\n\\tasync: function( count ) {\\n\\t\\tvar test = this.test,\\n\\t\\t\\tpopped = false,\\n\\t\\t\\tacceptCallCount = count;\\n\\n\\t\\tif ( typeof acceptCallCount === \\\"undefined\\\" ) {\\n\\t\\t\\tacceptCallCount = 1;\\n\\t\\t}\\n\\n\\t\\ttest.semaphore += 1;\\n\\t\\ttest.usedAsync = true;\\n\\t\\tpauseProcessing();\\n\\n\\t\\treturn function done() {\\n\\n\\t\\t\\tif ( popped ) {\\n\\t\\t\\t\\ttest.pushFailure( \\\"Too many calls to the `assert.async` callback\\\",\\n\\t\\t\\t\\t\\tsourceFromStacktrace( 2 ) );\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tacceptCallCount -= 1;\\n\\t\\t\\tif ( acceptCallCount > 0 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttest.semaphore -= 1;\\n\\t\\t\\tpopped = true;\\n\\t\\t\\tresumeProcessing();\\n\\t\\t};\\n\\t},\\n\\n\\t// Exports test.push() to the user API\\n\\tpush: function( /* result, actual, expected, message, negative */ ) {\\n\\t\\tvar assert = this,\\n\\t\\t\\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\\n\\n\\t\\t// Backwards compatibility fix.\\n\\t\\t// Allows the direct use of global exported assertions and QUnit.assert.*\\n\\t\\t// Although, it's use is not recommended as it can leak assertions\\n\\t\\t// to other tests from async tests, because we only get a reference to the current test,\\n\\t\\t// not exactly the test where assertion were intended to be called.\\n\\t\\tif ( !currentTest ) {\\n\\t\\t\\tthrow new Error( \\\"assertion outside test context, in \\\" + sourceFromStacktrace( 2 ) );\\n\\t\\t}\\n\\n\\t\\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\\n\\t\\t\\tcurrentTest.pushFailure( \\\"Assertion after the final `assert.async` was resolved\\\",\\n\\t\\t\\t\\tsourceFromStacktrace( 2 ) );\\n\\n\\t\\t\\t// Allow this assertion to continue running anyway...\\n\\t\\t}\\n\\n\\t\\tif ( !( assert instanceof Assert ) ) {\\n\\t\\t\\tassert = currentTest.assert;\\n\\t\\t}\\n\\t\\treturn assert.test.push.apply( assert.test, arguments );\\n\\t},\\n\\n\\tok: function( result, message ) {\\n\\t\\tmessage = message || ( result ? \\\"okay\\\" : \\\"failed, expected argument to be truthy, was: \\\" +\\n\\t\\t\\tQUnit.dump.parse( result ) );\\n\\t\\tthis.push( !!result, result, true, message );\\n\\t},\\n\\n\\tnotOk: function( result, message ) {\\n\\t\\tmessage = message || ( !result ? \\\"okay\\\" : \\\"failed, expected argument to be falsy, was: \\\" +\\n\\t\\t\\tQUnit.dump.parse( result ) );\\n\\t\\tthis.push( !result, result, false, message, true );\\n\\t},\\n\\n\\tequal: function( actual, expected, message ) {\\n\\t\\t/*jshint eqeqeq:false */\\n\\t\\tthis.push( expected == actual, actual, expected, message );\\n\\t},\\n\\n\\tnotEqual: function( actual, expected, message ) {\\n\\t\\t/*jshint eqeqeq:false */\\n\\t\\tthis.push( expected != actual, actual, expected, message, true );\\n\\t},\\n\\n\\tpropEqual: function( actual, expected, message ) {\\n\\t\\tactual = objectValues( actual );\\n\\t\\texpected = objectValues( expected );\\n\\t\\tthis.push( QUnit.equiv( actual, expected ), actual, expected, message );\\n\\t},\\n\\n\\tnotPropEqual: function( actual, expected, message ) {\\n\\t\\tactual = objectValues( actual );\\n\\t\\texpected = objectValues( expected );\\n\\t\\tthis.push( !QUnit.equiv( actual, expected ), actual, expected, message, true );\\n\\t},\\n\\n\\tdeepEqual: function( actual, expected, message ) {\\n\\t\\tthis.push( QUnit.equiv( actual, expected ), actual, expected, message );\\n\\t},\\n\\n\\tnotDeepEqual: function( actual, expected, message ) {\\n\\t\\tthis.push( !QUnit.equiv( actual, expected ), actual, expected, message, true );\\n\\t},\\n\\n\\tstrictEqual: function( actual, expected, message ) {\\n\\t\\tthis.push( expected === actual, actual, expected, message );\\n\\t},\\n\\n\\tnotStrictEqual: function( actual, expected, message ) {\\n\\t\\tthis.push( expected !== actual, actual, expected, message, true );\\n\\t},\\n\\n\\t\\\"throws\\\": function( block, expected, message ) {\\n\\t\\tvar actual, expectedType,\\n\\t\\t\\texpectedOutput = expected,\\n\\t\\t\\tok = false,\\n\\t\\t\\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\\n\\n\\t\\t// 'expected' is optional unless doing string comparison\\n\\t\\tif ( message == null && typeof expected === \\\"string\\\" ) {\\n\\t\\t\\tmessage = expected;\\n\\t\\t\\texpected = null;\\n\\t\\t}\\n\\n\\t\\tcurrentTest.ignoreGlobalErrors = true;\\n\\t\\ttry {\\n\\t\\t\\tblock.call( currentTest.testEnvironment );\\n\\t\\t} catch (e) {\\n\\t\\t\\tactual = e;\\n\\t\\t}\\n\\t\\tcurrentTest.ignoreGlobalErrors = false;\\n\\n\\t\\tif ( actual ) {\\n\\t\\t\\texpectedType = QUnit.objectType( expected );\\n\\n\\t\\t\\t// we don't want to validate thrown error\\n\\t\\t\\tif ( !expected ) {\\n\\t\\t\\t\\tok = true;\\n\\t\\t\\t\\texpectedOutput = null;\\n\\n\\t\\t\\t// expected is a regexp\\n\\t\\t\\t} else if ( expectedType === \\\"regexp\\\" ) {\\n\\t\\t\\t\\tok = expected.test( errorString( actual ) );\\n\\n\\t\\t\\t// expected is a string\\n\\t\\t\\t} else if ( expectedType === \\\"string\\\" ) {\\n\\t\\t\\t\\tok = expected === errorString( actual );\\n\\n\\t\\t\\t// expected is a constructor, maybe an Error constructor\\n\\t\\t\\t} else if ( expectedType === \\\"function\\\" && actual instanceof expected ) {\\n\\t\\t\\t\\tok = true;\\n\\n\\t\\t\\t// expected is an Error object\\n\\t\\t\\t} else if ( expectedType === \\\"object\\\" ) {\\n\\t\\t\\t\\tok = actual instanceof expected.constructor &&\\n\\t\\t\\t\\t\\tactual.name === expected.name &&\\n\\t\\t\\t\\t\\tactual.message === expected.message;\\n\\n\\t\\t\\t// expected is a validation function which returns true if validation passed\\n\\t\\t\\t} else if ( expectedType === \\\"function\\\" && expected.call( {}, actual ) === true ) {\\n\\t\\t\\t\\texpectedOutput = null;\\n\\t\\t\\t\\tok = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tcurrentTest.assert.push( ok, actual, expectedOutput, message );\\n\\t}\\n};\\n\\n// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\\n// Known to us are: Closure Compiler, Narwhal\\n(function() {\\n\\t/*jshint sub:true */\\n\\tAssert.prototype.raises = Assert.prototype[ \\\"throws\\\" ];\\n}());\\n\\nfunction errorString( error ) {\\n\\tvar name, message,\\n\\t\\tresultErrorString = error.toString();\\n\\tif ( resultErrorString.substring( 0, 7 ) === \\\"[object\\\" ) {\\n\\t\\tname = error.name ? error.name.toString() : \\\"Error\\\";\\n\\t\\tmessage = error.message ? error.message.toString() : \\\"\\\";\\n\\t\\tif ( name && message ) {\\n\\t\\t\\treturn name + \\\": \\\" + message;\\n\\t\\t} else if ( name ) {\\n\\t\\t\\treturn name;\\n\\t\\t} else if ( message ) {\\n\\t\\t\\treturn message;\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"Error\\\";\\n\\t\\t}\\n\\t} else {\\n\\t\\treturn resultErrorString;\\n\\t}\\n}\\n\\n// Test for equality any JavaScript type.\\n// Author: Philippe Rathé <prathe@gmail.com>\\nQUnit.equiv = (function() {\\n\\n\\t// Stack to decide between skip/abort functions\\n\\tvar callers = [];\\n\\n\\t// Stack to avoiding loops from circular referencing\\n\\tvar parents = [];\\n\\tvar parentsB = [];\\n\\n\\tfunction useStrictEquality( b, a ) {\\n\\n\\t\\t/*jshint eqeqeq:false */\\n\\t\\tif ( b instanceof a.constructor || a instanceof b.constructor ) {\\n\\n\\t\\t\\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\\n\\t\\t\\t// `var i = 1;`\\n\\t\\t\\t// `var j = new Number(1);`\\n\\t\\t\\treturn a == b;\\n\\t\\t} else {\\n\\t\\t\\treturn a === b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction compareConstructors( a, b ) {\\n\\t\\tvar getProto = Object.getPrototypeOf || function( obj ) {\\n\\n\\t\\t\\t/*jshint proto: true */\\n\\t\\t\\treturn obj.__proto__;\\n\\t\\t};\\n\\t\\tvar protoA = getProto( a );\\n\\t\\tvar protoB = getProto( b );\\n\\n\\t\\t// Comparing constructors is more strict than using `instanceof`\\n\\t\\tif ( a.constructor === b.constructor ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Ref #851\\n\\t\\t// If the obj prototype descends from a null constructor, treat it\\n\\t\\t// as a null prototype.\\n\\t\\tif ( protoA && protoA.constructor === null ) {\\n\\t\\t\\tprotoA = null;\\n\\t\\t}\\n\\t\\tif ( protoB && protoB.constructor === null ) {\\n\\t\\t\\tprotoB = null;\\n\\t\\t}\\n\\n\\t\\t// Allow objects with no prototype to be equivalent to\\n\\t\\t// objects with Object as their constructor.\\n\\t\\tif ( ( protoA === null && protoB === Object.prototype ) ||\\n\\t\\t\\t\\t( protoB === null && protoA === Object.prototype ) ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\tvar callbacks = {\\n\\t\\t\\\"string\\\": useStrictEquality,\\n\\t\\t\\\"boolean\\\": useStrictEquality,\\n\\t\\t\\\"number\\\": useStrictEquality,\\n\\t\\t\\\"null\\\": useStrictEquality,\\n\\t\\t\\\"undefined\\\": useStrictEquality,\\n\\t\\t\\\"symbol\\\": useStrictEquality,\\n\\n\\t\\t\\\"nan\\\": function( b ) {\\n\\t\\t\\treturn isNaN( b );\\n\\t\\t},\\n\\n\\t\\t\\\"date\\\": function( b, a ) {\\n\\t\\t\\treturn QUnit.objectType( b ) === \\\"date\\\" && a.valueOf() === b.valueOf();\\n\\t\\t},\\n\\n\\t\\t\\\"regexp\\\": function( b, a ) {\\n\\t\\t\\treturn QUnit.objectType( b ) === \\\"regexp\\\" &&\\n\\n\\t\\t\\t\\t// The regex itself\\n\\t\\t\\t\\ta.source === b.source &&\\n\\n\\t\\t\\t\\t// And its modifiers\\n\\t\\t\\t\\ta.global === b.global &&\\n\\n\\t\\t\\t\\t// (gmi) ...\\n\\t\\t\\t\\ta.ignoreCase === b.ignoreCase &&\\n\\t\\t\\t\\ta.multiline === b.multiline &&\\n\\t\\t\\t\\ta.sticky === b.sticky;\\n\\t\\t},\\n\\n\\t\\t// - skip when the property is a method of an instance (OOP)\\n\\t\\t// - abort otherwise,\\n\\t\\t// initial === would have catch identical references anyway\\n\\t\\t\\\"function\\\": function() {\\n\\t\\t\\tvar caller = callers[ callers.length - 1 ];\\n\\t\\t\\treturn caller !== Object && typeof caller !== \\\"undefined\\\";\\n\\t\\t},\\n\\n\\t\\t\\\"array\\\": function( b, a ) {\\n\\t\\t\\tvar i, j, len, loop, aCircular, bCircular;\\n\\n\\t\\t\\t// b could be an object literal here\\n\\t\\t\\tif ( QUnit.objectType( b ) !== \\\"array\\\" ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tlen = a.length;\\n\\t\\t\\tif ( len !== b.length ) {\\n\\t\\t\\t\\t// safe and faster\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Track reference to avoid circular references\\n\\t\\t\\tparents.push( a );\\n\\t\\t\\tparentsB.push( b );\\n\\t\\t\\tfor ( i = 0; i < len; i++ ) {\\n\\t\\t\\t\\tloop = false;\\n\\t\\t\\t\\tfor ( j = 0; j < parents.length; j++ ) {\\n\\t\\t\\t\\t\\taCircular = parents[ j ] === a[ i ];\\n\\t\\t\\t\\t\\tbCircular = parentsB[ j ] === b[ i ];\\n\\t\\t\\t\\t\\tif ( aCircular || bCircular ) {\\n\\t\\t\\t\\t\\t\\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\\n\\t\\t\\t\\t\\t\\t\\tloop = true;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tparents.pop();\\n\\t\\t\\t\\t\\t\\t\\tparentsB.pop();\\n\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\\n\\t\\t\\t\\t\\tparents.pop();\\n\\t\\t\\t\\t\\tparentsB.pop();\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tparents.pop();\\n\\t\\t\\tparentsB.pop();\\n\\t\\t\\treturn true;\\n\\t\\t},\\n\\n\\t\\t\\\"set\\\": function( b, a ) {\\n\\t\\t\\tvar aArray, bArray;\\n\\n\\t\\t\\t// `b` could be any object here\\n\\t\\t\\tif ( QUnit.objectType( b ) !== \\\"set\\\" ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\taArray = [];\\n\\t\\t\\ta.forEach( function( v ) {\\n\\t\\t\\t\\taArray.push( v );\\n\\t\\t\\t});\\n\\t\\t\\tbArray = [];\\n\\t\\t\\tb.forEach( function( v ) {\\n\\t\\t\\t\\tbArray.push( v );\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn innerEquiv( bArray, aArray );\\n\\t\\t},\\n\\n\\t\\t\\\"map\\\": function( b, a ) {\\n\\t\\t\\tvar aArray, bArray;\\n\\n\\t\\t\\t// `b` could be any object here\\n\\t\\t\\tif ( QUnit.objectType( b ) !== \\\"map\\\" ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\taArray = [];\\n\\t\\t\\ta.forEach( function( v, k ) {\\n\\t\\t\\t\\taArray.push( [ k, v ] );\\n\\t\\t\\t});\\n\\t\\t\\tbArray = [];\\n\\t\\t\\tb.forEach( function( v, k ) {\\n\\t\\t\\t\\tbArray.push( [ k, v ] );\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn innerEquiv( bArray, aArray );\\n\\t\\t},\\n\\n\\t\\t\\\"object\\\": function( b, a ) {\\n\\t\\t\\tvar i, j, loop, aCircular, bCircular;\\n\\n\\t\\t\\t// Default to true\\n\\t\\t\\tvar eq = true;\\n\\t\\t\\tvar aProperties = [];\\n\\t\\t\\tvar bProperties = [];\\n\\n\\t\\t\\tif ( compareConstructors( a, b ) === false ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Stack constructor before traversing properties\\n\\t\\t\\tcallers.push( a.constructor );\\n\\n\\t\\t\\t// Track reference to avoid circular references\\n\\t\\t\\tparents.push( a );\\n\\t\\t\\tparentsB.push( b );\\n\\n\\t\\t\\t// Be strict: don't ensure hasOwnProperty and go deep\\n\\t\\t\\tfor ( i in a ) {\\n\\t\\t\\t\\tloop = false;\\n\\t\\t\\t\\tfor ( j = 0; j < parents.length; j++ ) {\\n\\t\\t\\t\\t\\taCircular = parents[ j ] === a[ i ];\\n\\t\\t\\t\\t\\tbCircular = parentsB[ j ] === b[ i ];\\n\\t\\t\\t\\t\\tif ( aCircular || bCircular ) {\\n\\t\\t\\t\\t\\t\\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\\n\\t\\t\\t\\t\\t\\t\\tloop = true;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\teq = false;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\taProperties.push( i );\\n\\t\\t\\t\\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\\n\\t\\t\\t\\t\\teq = false;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tparents.pop();\\n\\t\\t\\tparentsB.pop();\\n\\n\\t\\t\\t// Unstack, we are done\\n\\t\\t\\tcallers.pop();\\n\\n\\t\\t\\tfor ( i in b ) {\\n\\n\\t\\t\\t\\t// Collect b's properties\\n\\t\\t\\t\\tbProperties.push( i );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Ensures identical properties name\\n\\t\\t\\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\\n\\t\\t}\\n\\t};\\n\\n\\tfunction typeEquiv( a, b ) {\\n\\t\\tvar prop = QUnit.objectType( a );\\n\\t\\treturn callbacks[ prop ]( b, a );\\n\\t}\\n\\n\\t// The real equiv function\\n\\tfunction innerEquiv() {\\n\\t\\tvar args = [].slice.apply( arguments );\\n\\t\\tif ( args.length < 2 ) {\\n\\n\\t\\t\\t// End transition\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn ( (function( a, b ) {\\n\\t\\t\\tif ( a === b ) {\\n\\n\\t\\t\\t\\t// Catch the most you can\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} else if ( a === null || b === null || typeof a === \\\"undefined\\\" ||\\n\\t\\t\\t\\t\\ttypeof b === \\\"undefined\\\" ||\\n\\t\\t\\t\\t\\tQUnit.objectType( a ) !== QUnit.objectType( b ) ) {\\n\\n\\t\\t\\t\\t// Don't lose time with error prone cases\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn typeEquiv( a, b );\\n\\t\\t\\t}\\n\\n\\t\\t// Apply transition with (1..n) arguments\\n\\t\\t}( args[ 0 ], args[ 1 ] ) ) &&\\n\\t\\t\\tinnerEquiv.apply( this, args.splice( 1, args.length - 1 ) ) );\\n\\t}\\n\\n\\treturn innerEquiv;\\n}());\\n\\n// Based on jsDump by Ariel Flesler\\n// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\\nQUnit.dump = (function() {\\n\\tfunction quote( str ) {\\n\\t\\treturn \\\"\\\\\\\"\\\" + str.toString().replace( /\\\\\\\\/g, \\\"\\\\\\\\\\\\\\\\\\\" ).replace( /\\\"/g, \\\"\\\\\\\\\\\\\\\"\\\" ) + \\\"\\\\\\\"\\\";\\n\\t}\\n\\tfunction literal( o ) {\\n\\t\\treturn o + \\\"\\\";\\n\\t}\\n\\tfunction join( pre, arr, post ) {\\n\\t\\tvar s = dump.separator(),\\n\\t\\t\\tbase = dump.indent(),\\n\\t\\t\\tinner = dump.indent( 1 );\\n\\t\\tif ( arr.join ) {\\n\\t\\t\\tarr = arr.join( \\\",\\\" + s + inner );\\n\\t\\t}\\n\\t\\tif ( !arr ) {\\n\\t\\t\\treturn pre + post;\\n\\t\\t}\\n\\t\\treturn [ pre, inner + arr, base + post ].join( s );\\n\\t}\\n\\tfunction array( arr, stack ) {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tvar i = arr.length,\\n\\t\\t\\tret = new Array( i );\\n\\n\\t\\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\\n\\t\\t\\treturn \\\"[object Array]\\\";\\n\\t\\t}\\n\\n\\t\\tthis.up();\\n\\t\\twhile ( i-- ) {\\n\\t\\t\\tret[ i ] = this$1.parse( arr[ i ], undefined, stack );\\n\\t\\t}\\n\\t\\tthis.down();\\n\\t\\treturn join( \\\"[\\\", ret, \\\"]\\\" );\\n\\t}\\n\\n\\tvar reName = /^function (\\\\w+)/,\\n\\t\\tdump = {\\n\\n\\t\\t\\t// objType is used mostly internally, you can fix a (custom) type in advance\\n\\t\\t\\tparse: function( obj, objType, stack ) {\\n\\t\\t\\t\\tstack = stack || [];\\n\\t\\t\\t\\tvar res, parser, parserType,\\n\\t\\t\\t\\t\\tinStack = inArray( obj, stack );\\n\\n\\t\\t\\t\\tif ( inStack !== -1 ) {\\n\\t\\t\\t\\t\\treturn \\\"recursion(\\\" + ( inStack - stack.length ) + \\\")\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tobjType = objType || this.typeOf( obj  );\\n\\t\\t\\t\\tparser = this.parsers[ objType ];\\n\\t\\t\\t\\tparserType = typeof parser;\\n\\n\\t\\t\\t\\tif ( parserType === \\\"function\\\" ) {\\n\\t\\t\\t\\t\\tstack.push( obj );\\n\\t\\t\\t\\t\\tres = parser.call( this, obj, stack );\\n\\t\\t\\t\\t\\tstack.pop();\\n\\t\\t\\t\\t\\treturn res;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ( parserType === \\\"string\\\" ) ? parser : this.parsers.error;\\n\\t\\t\\t},\\n\\t\\t\\ttypeOf: function( obj ) {\\n\\t\\t\\t\\tvar type;\\n\\t\\t\\t\\tif ( obj === null ) {\\n\\t\\t\\t\\t\\ttype = \\\"null\\\";\\n\\t\\t\\t\\t} else if ( typeof obj === \\\"undefined\\\" ) {\\n\\t\\t\\t\\t\\ttype = \\\"undefined\\\";\\n\\t\\t\\t\\t} else if ( QUnit.is( \\\"regexp\\\", obj ) ) {\\n\\t\\t\\t\\t\\ttype = \\\"regexp\\\";\\n\\t\\t\\t\\t} else if ( QUnit.is( \\\"date\\\", obj ) ) {\\n\\t\\t\\t\\t\\ttype = \\\"date\\\";\\n\\t\\t\\t\\t} else if ( QUnit.is( \\\"function\\\", obj ) ) {\\n\\t\\t\\t\\t\\ttype = \\\"function\\\";\\n\\t\\t\\t\\t} else if ( obj.setInterval !== undefined &&\\n\\t\\t\\t\\t\\t\\tobj.document !== undefined &&\\n\\t\\t\\t\\t\\t\\tobj.nodeType === undefined ) {\\n\\t\\t\\t\\t\\ttype = \\\"window\\\";\\n\\t\\t\\t\\t} else if ( obj.nodeType === 9 ) {\\n\\t\\t\\t\\t\\ttype = \\\"document\\\";\\n\\t\\t\\t\\t} else if ( obj.nodeType ) {\\n\\t\\t\\t\\t\\ttype = \\\"node\\\";\\n\\t\\t\\t\\t} else if (\\n\\n\\t\\t\\t\\t\\t// native arrays\\n\\t\\t\\t\\t\\ttoString.call( obj ) === \\\"[object Array]\\\" ||\\n\\n\\t\\t\\t\\t\\t// NodeList objects\\n\\t\\t\\t\\t\\t( typeof obj.length === \\\"number\\\" && obj.item !== undefined &&\\n\\t\\t\\t\\t\\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\\n\\t\\t\\t\\t\\tobj[ 0 ] === undefined ) ) )\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\ttype = \\\"array\\\";\\n\\t\\t\\t\\t} else if ( obj.constructor === Error.prototype.constructor ) {\\n\\t\\t\\t\\t\\ttype = \\\"error\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttype = typeof obj;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn type;\\n\\t\\t\\t},\\n\\t\\t\\tseparator: function() {\\n\\t\\t\\t\\treturn this.multiline ? this.HTML ? \\\"<br />\\\" : \\\"\\\\n\\\" : this.HTML ? \\\"&#160;\\\" : \\\" \\\";\\n\\t\\t\\t},\\n\\t\\t\\t// extra can be a number, shortcut for increasing-calling-decreasing\\n\\t\\t\\tindent: function( extra ) {\\n\\t\\t\\t\\tif ( !this.multiline ) {\\n\\t\\t\\t\\t\\treturn \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar chr = this.indentChar;\\n\\t\\t\\t\\tif ( this.HTML ) {\\n\\t\\t\\t\\t\\tchr = chr.replace( /\\\\t/g, \\\"   \\\" ).replace( / /g, \\\"&#160;\\\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\\n\\t\\t\\t},\\n\\t\\t\\tup: function( a ) {\\n\\t\\t\\t\\tthis.depth += a || 1;\\n\\t\\t\\t},\\n\\t\\t\\tdown: function( a ) {\\n\\t\\t\\t\\tthis.depth -= a || 1;\\n\\t\\t\\t},\\n\\t\\t\\tsetParser: function( name, parser ) {\\n\\t\\t\\t\\tthis.parsers[ name ] = parser;\\n\\t\\t\\t},\\n\\t\\t\\t// The next 3 are exposed so you can use them\\n\\t\\t\\tquote: quote,\\n\\t\\t\\tliteral: literal,\\n\\t\\t\\tjoin: join,\\n\\t\\t\\t//\\n\\t\\t\\tdepth: 1,\\n\\t\\t\\tmaxDepth: QUnit.config.maxDepth,\\n\\n\\t\\t\\t// This is the list of parsers, to modify them, use dump.setParser\\n\\t\\t\\tparsers: {\\n\\t\\t\\t\\twindow: \\\"[Window]\\\",\\n\\t\\t\\t\\tdocument: \\\"[Document]\\\",\\n\\t\\t\\t\\terror: function( error ) {\\n\\t\\t\\t\\t\\treturn \\\"Error(\\\\\\\"\\\" + error.message + \\\"\\\\\\\")\\\";\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tunknown: \\\"[Unknown]\\\",\\n\\t\\t\\t\\t\\\"null\\\": \\\"null\\\",\\n\\t\\t\\t\\t\\\"undefined\\\": \\\"undefined\\\",\\n\\t\\t\\t\\t\\\"function\\\": function( fn ) {\\n\\t\\t\\t\\t\\tvar ret = \\\"function\\\",\\n\\n\\t\\t\\t\\t\\t\\t// functions never have name in IE\\n\\t\\t\\t\\t\\t\\tname = \\\"name\\\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\\n\\n\\t\\t\\t\\t\\tif ( name ) {\\n\\t\\t\\t\\t\\t\\tret += \\\" \\\" + name;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tret += \\\"( \\\";\\n\\n\\t\\t\\t\\t\\tret = [ ret, dump.parse( fn, \\\"functionArgs\\\" ), \\\"){\\\" ].join( \\\"\\\" );\\n\\t\\t\\t\\t\\treturn join( ret, dump.parse( fn, \\\"functionCode\\\" ), \\\"}\\\" );\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tarray: array,\\n\\t\\t\\t\\tnodelist: array,\\n\\t\\t\\t\\t\\\"arguments\\\": array,\\n\\t\\t\\t\\tobject: function( map, stack ) {\\n\\t\\t\\t\\t\\tvar keys, key, val, i, nonEnumerableProperties,\\n\\t\\t\\t\\t\\t\\tret = [];\\n\\n\\t\\t\\t\\t\\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\\n\\t\\t\\t\\t\\t\\treturn \\\"[object Object]\\\";\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tdump.up();\\n\\t\\t\\t\\t\\tkeys = [];\\n\\t\\t\\t\\t\\tfor ( key in map ) {\\n\\t\\t\\t\\t\\t\\tkeys.push( key );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Some properties are not always enumerable on Error objects.\\n\\t\\t\\t\\t\\tnonEnumerableProperties = [ \\\"message\\\", \\\"name\\\" ];\\n\\t\\t\\t\\t\\tfor ( i in nonEnumerableProperties ) {\\n\\t\\t\\t\\t\\t\\tkey = nonEnumerableProperties[ i ];\\n\\t\\t\\t\\t\\t\\tif ( key in map && inArray( key, keys ) < 0 ) {\\n\\t\\t\\t\\t\\t\\t\\tkeys.push( key );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tkeys.sort();\\n\\t\\t\\t\\t\\tfor ( i = 0; i < keys.length; i++ ) {\\n\\t\\t\\t\\t\\t\\tkey = keys[ i ];\\n\\t\\t\\t\\t\\t\\tval = map[ key ];\\n\\t\\t\\t\\t\\t\\tret.push( dump.parse( key, \\\"key\\\" ) + \\\": \\\" +\\n\\t\\t\\t\\t\\t\\t\\tdump.parse( val, undefined, stack ) );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdump.down();\\n\\t\\t\\t\\t\\treturn join( \\\"{\\\", ret, \\\"}\\\" );\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tnode: function( node ) {\\n\\t\\t\\t\\t\\tvar len, i, val,\\n\\t\\t\\t\\t\\t\\topen = dump.HTML ? \\\"&lt;\\\" : \\\"<\\\",\\n\\t\\t\\t\\t\\t\\tclose = dump.HTML ? \\\"&gt;\\\" : \\\">\\\",\\n\\t\\t\\t\\t\\t\\ttag = node.nodeName.toLowerCase(),\\n\\t\\t\\t\\t\\t\\tret = open + tag,\\n\\t\\t\\t\\t\\t\\tattrs = node.attributes;\\n\\n\\t\\t\\t\\t\\tif ( attrs ) {\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\\n\\t\\t\\t\\t\\t\\t\\tval = attrs[ i ].nodeValue;\\n\\n\\t\\t\\t\\t\\t\\t\\t// IE6 includes all attributes in .attributes, even ones not explicitly\\n\\t\\t\\t\\t\\t\\t\\t// set. Those have values like undefined, null, 0, false, \\\"\\\" or\\n\\t\\t\\t\\t\\t\\t\\t// \\\"inherit\\\".\\n\\t\\t\\t\\t\\t\\t\\tif ( val && val !== \\\"inherit\\\" ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tret += \\\" \\\" + attrs[ i ].nodeName + \\\"=\\\" +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdump.parse( val, \\\"attribute\\\" );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tret += close;\\n\\n\\t\\t\\t\\t\\t// Show content of TextNode or CDATASection\\n\\t\\t\\t\\t\\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\\n\\t\\t\\t\\t\\t\\tret += node.nodeValue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn ret + open + \\\"/\\\" + tag + close;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// function calls it internally, it's the arguments part of the function\\n\\t\\t\\t\\tfunctionArgs: function( fn ) {\\n\\t\\t\\t\\t\\tvar args,\\n\\t\\t\\t\\t\\t\\tl = fn.length;\\n\\n\\t\\t\\t\\t\\tif ( !l ) {\\n\\t\\t\\t\\t\\t\\treturn \\\"\\\";\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\targs = new Array( l );\\n\\t\\t\\t\\t\\twhile ( l-- ) {\\n\\n\\t\\t\\t\\t\\t\\t// 97 is 'a'\\n\\t\\t\\t\\t\\t\\targs[ l ] = String.fromCharCode( 97 + l );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn \\\" \\\" + args.join( \\\", \\\" ) + \\\" \\\";\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t// object calls it internally, the key part of an item in a map\\n\\t\\t\\t\\tkey: quote,\\n\\t\\t\\t\\t// function calls it internally, it's the content of the function\\n\\t\\t\\t\\tfunctionCode: \\\"[code]\\\",\\n\\t\\t\\t\\t// node calls it internally, it's an html attribute value\\n\\t\\t\\t\\tattribute: quote,\\n\\t\\t\\t\\tstring: quote,\\n\\t\\t\\t\\tdate: quote,\\n\\t\\t\\t\\tregexp: literal,\\n\\t\\t\\t\\tnumber: literal,\\n\\t\\t\\t\\t\\\"boolean\\\": literal\\n\\t\\t\\t},\\n\\t\\t\\t// if true, entities are escaped ( <, >, \\\\t, space and \\\\n )\\n\\t\\t\\tHTML: false,\\n\\t\\t\\t// indentation unit\\n\\t\\t\\tindentChar: \\\"  \\\",\\n\\t\\t\\t// if true, items in a collection, are separated by a \\\\n, else just a space.\\n\\t\\t\\tmultiline: true\\n\\t\\t};\\n\\n\\treturn dump;\\n}());\\n\\n// back compat\\nQUnit.jsDump = QUnit.dump;\\n\\n// For browser, export only select globals\\nif ( defined.document ) {\\n\\n\\t// Deprecated\\n\\t// Extend assert methods to QUnit and Global scope through Backwards compatibility\\n\\t(function() {\\n\\t\\tvar i,\\n\\t\\t\\tassertions = Assert.prototype;\\n\\n\\t\\tfunction applyCurrent( current ) {\\n\\t\\t\\treturn function() {\\n\\t\\t\\t\\tvar assert = new Assert( QUnit.config.current );\\n\\t\\t\\t\\tcurrent.apply( assert, arguments );\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tfor ( i in assertions ) {\\n\\t\\t\\tQUnit[ i ] = applyCurrent( assertions[ i ] );\\n\\t\\t}\\n\\t})();\\n\\n\\t(function() {\\n\\t\\tvar i, l,\\n\\t\\t\\tkeys = [\\n\\t\\t\\t\\t\\\"test\\\",\\n\\t\\t\\t\\t\\\"module\\\",\\n\\t\\t\\t\\t\\\"expect\\\",\\n\\t\\t\\t\\t\\\"asyncTest\\\",\\n\\t\\t\\t\\t\\\"start\\\",\\n\\t\\t\\t\\t\\\"stop\\\",\\n\\t\\t\\t\\t\\\"ok\\\",\\n\\t\\t\\t\\t\\\"notOk\\\",\\n\\t\\t\\t\\t\\\"equal\\\",\\n\\t\\t\\t\\t\\\"notEqual\\\",\\n\\t\\t\\t\\t\\\"propEqual\\\",\\n\\t\\t\\t\\t\\\"notPropEqual\\\",\\n\\t\\t\\t\\t\\\"deepEqual\\\",\\n\\t\\t\\t\\t\\\"notDeepEqual\\\",\\n\\t\\t\\t\\t\\\"strictEqual\\\",\\n\\t\\t\\t\\t\\\"notStrictEqual\\\",\\n\\t\\t\\t\\t\\\"throws\\\",\\n\\t\\t\\t\\t\\\"raises\\\"\\n\\t\\t\\t];\\n\\n\\t\\tfor ( i = 0, l = keys.length; i < l; i++ ) {\\n\\t\\t\\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\\n\\t\\t}\\n\\t})();\\n\\n\\twindow.QUnit = QUnit;\\n}\\n\\n// For nodejs\\nif ( typeof module !== \\\"undefined\\\" && module && module.exports ) {\\n\\tmodule.exports = QUnit;\\n\\n\\t// For consistency with CommonJS environments' exports\\n\\tmodule.exports.QUnit = QUnit;\\n}\\n\\n// For CommonJS with exports, but without module.exports, like Rhino\\nif ( typeof exports !== \\\"undefined\\\" && exports ) {\\n\\texports.QUnit = QUnit;\\n}\\n\\nif ( true ) {\\n\\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\\n\\t\\treturn QUnit;\\n\\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\tQUnit.config.autostart = false;\\n}\\n\\n/*\\n * This file is a modified version of google-diff-match-patch's JavaScript implementation\\n * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\\n * modifications are licensed as more fully set forth in LICENSE.txt.\\n *\\n * The original source of google-diff-match-patch is attributable and licensed as follows:\\n *\\n * Copyright 2006 Google Inc.\\n * http://code.google.com/p/google-diff-match-patch/\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * More Info:\\n *  https://code.google.com/p/google-diff-match-patch/\\n *\\n * Usage: QUnit.diff(expected, actual)\\n *\\n */\\nQUnit.diff = ( function() {\\n\\tfunction DiffMatchPatch() {\\n\\t}\\n\\n\\t//  DIFF FUNCTIONS\\n\\n\\t/**\\n\\t * The data structure representing a diff is an array of tuples:\\n\\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\\n\\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\\n\\t */\\n\\tvar DIFF_DELETE = -1,\\n\\t\\tDIFF_INSERT = 1,\\n\\t\\tDIFF_EQUAL = 0;\\n\\n\\t/**\\n\\t * Find the differences between two texts.  Simplifies the problem by stripping\\n\\t * any common prefix or suffix off the texts before diffing.\\n\\t * @param {string} text1 Old string to be diffed.\\n\\t * @param {string} text2 New string to be diffed.\\n\\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\\n\\t *     then don't run a line-level diff first to identify the changed areas.\\n\\t *     Defaults to true, which does a faster, slightly less optimal diff.\\n\\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\\n\\t */\\n\\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\\n\\t\\tvar deadline, checklines, commonlength,\\n\\t\\t\\tcommonprefix, commonsuffix, diffs;\\n\\n\\t\\t// The diff must be complete in up to 1 second.\\n\\t\\tdeadline = ( new Date() ).getTime() + 1000;\\n\\n\\t\\t// Check for null inputs.\\n\\t\\tif ( text1 === null || text2 === null ) {\\n\\t\\t\\tthrow new Error( \\\"Null input. (DiffMain)\\\" );\\n\\t\\t}\\n\\n\\t\\t// Check for equality (speedup).\\n\\t\\tif ( text1 === text2 ) {\\n\\t\\t\\tif ( text1 ) {\\n\\t\\t\\t\\treturn [\\n\\t\\t\\t\\t\\t[ DIFF_EQUAL, text1 ]\\n\\t\\t\\t\\t];\\n\\t\\t\\t}\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\n\\t\\tif ( typeof optChecklines === \\\"undefined\\\" ) {\\n\\t\\t\\toptChecklines = true;\\n\\t\\t}\\n\\n\\t\\tchecklines = optChecklines;\\n\\n\\t\\t// Trim off common prefix (speedup).\\n\\t\\tcommonlength = this.diffCommonPrefix( text1, text2 );\\n\\t\\tcommonprefix = text1.substring( 0, commonlength );\\n\\t\\ttext1 = text1.substring( commonlength );\\n\\t\\ttext2 = text2.substring( commonlength );\\n\\n\\t\\t// Trim off common suffix (speedup).\\n\\t\\tcommonlength = this.diffCommonSuffix( text1, text2 );\\n\\t\\tcommonsuffix = text1.substring( text1.length - commonlength );\\n\\t\\ttext1 = text1.substring( 0, text1.length - commonlength );\\n\\t\\ttext2 = text2.substring( 0, text2.length - commonlength );\\n\\n\\t\\t// Compute the diff on the middle block.\\n\\t\\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\\n\\n\\t\\t// Restore the prefix and suffix.\\n\\t\\tif ( commonprefix ) {\\n\\t\\t\\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\\n\\t\\t}\\n\\t\\tif ( commonsuffix ) {\\n\\t\\t\\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\\n\\t\\t}\\n\\t\\tthis.diffCleanupMerge( diffs );\\n\\t\\treturn diffs;\\n\\t};\\n\\n\\t/**\\n\\t * Reduce the number of edits by eliminating operationally trivial equalities.\\n\\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\\n\\t\\tvar changes, equalities, equalitiesLength, lastequality,\\n\\t\\t\\tpointer, preIns, preDel, postIns, postDel;\\n\\t\\tchanges = false;\\n\\t\\tequalities = []; // Stack of indices where equalities are found.\\n\\t\\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\\n\\t\\t/** @type {?string} */\\n\\t\\tlastequality = null;\\n\\t\\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\\n\\t\\tpointer = 0; // Index of current position.\\n\\t\\t// Is there an insertion operation before the last equality.\\n\\t\\tpreIns = false;\\n\\t\\t// Is there a deletion operation before the last equality.\\n\\t\\tpreDel = false;\\n\\t\\t// Is there an insertion operation after the last equality.\\n\\t\\tpostIns = false;\\n\\t\\t// Is there a deletion operation after the last equality.\\n\\t\\tpostDel = false;\\n\\t\\twhile ( pointer < diffs.length ) {\\n\\n\\t\\t\\t// Equality found.\\n\\t\\t\\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\\n\\t\\t\\t\\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\\n\\n\\t\\t\\t\\t\\t// Candidate found.\\n\\t\\t\\t\\t\\tequalities[ equalitiesLength++ ] = pointer;\\n\\t\\t\\t\\t\\tpreIns = postIns;\\n\\t\\t\\t\\t\\tpreDel = postDel;\\n\\t\\t\\t\\t\\tlastequality = diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// Not a candidate, and can never become one.\\n\\t\\t\\t\\t\\tequalitiesLength = 0;\\n\\t\\t\\t\\t\\tlastequality = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpostIns = postDel = false;\\n\\n\\t\\t\\t// An insertion or deletion.\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\\n\\t\\t\\t\\t\\tpostDel = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpostIns = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\t * Five types to be split:\\n\\t\\t\\t\\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\\n\\t\\t\\t\\t * <ins>A</ins>X<ins>C</ins><del>D</del>\\n\\t\\t\\t\\t * <ins>A</ins><del>B</del>X<ins>C</ins>\\n\\t\\t\\t\\t * <ins>A</del>X<ins>C</ins><del>D</del>\\n\\t\\t\\t\\t * <ins>A</ins><del>B</del>X<del>C</del>\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\\n\\t\\t\\t\\t\\t\\t( ( lastequality.length < 2 ) &&\\n\\t\\t\\t\\t\\t\\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\\n\\n\\t\\t\\t\\t\\t// Duplicate record.\\n\\t\\t\\t\\t\\tdiffs.splice(\\n\\t\\t\\t\\t\\t\\tequalities[ equalitiesLength - 1 ],\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t[ DIFF_DELETE, lastequality ]\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t// Change second copy to insert.\\n\\t\\t\\t\\t\\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\\n\\t\\t\\t\\t\\tequalitiesLength--; // Throw away the equality we just deleted;\\n\\t\\t\\t\\t\\tlastequality = null;\\n\\t\\t\\t\\t\\tif ( preIns && preDel ) {\\n\\t\\t\\t\\t\\t\\t// No changes made which could affect previous entry, keep going.\\n\\t\\t\\t\\t\\t\\tpostIns = postDel = true;\\n\\t\\t\\t\\t\\t\\tequalitiesLength = 0;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tequalitiesLength--; // Throw away the previous equality.\\n\\t\\t\\t\\t\\t\\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\\n\\t\\t\\t\\t\\t\\tpostIns = postDel = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tchanges = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tpointer++;\\n\\t\\t}\\n\\n\\t\\tif ( changes ) {\\n\\t\\t\\tthis.diffCleanupMerge( diffs );\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Convert a diff array into a pretty HTML report.\\n\\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\\n\\t * @param {integer} string to be beautified.\\n\\t * @return {string} HTML representation.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\\n\\t\\tvar op, data, x,\\n\\t\\t\\thtml = [];\\n\\t\\tfor ( x = 0; x < diffs.length; x++ ) {\\n\\t\\t\\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\\n\\t\\t\\tdata = diffs[ x ][ 1 ]; // Text of change.\\n\\t\\t\\tswitch ( op ) {\\n\\t\\t\\tcase DIFF_INSERT:\\n\\t\\t\\t\\thtml[ x ] = \\\"<ins>\\\" + data + \\\"</ins>\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_DELETE:\\n\\t\\t\\t\\thtml[ x ] = \\\"<del>\\\" + data + \\\"</del>\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_EQUAL:\\n\\t\\t\\t\\thtml[ x ] = \\\"<span>\\\" + data + \\\"</span>\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn html.join( \\\"\\\" );\\n\\t};\\n\\n\\t/**\\n\\t * Determine the common prefix of two strings.\\n\\t * @param {string} text1 First string.\\n\\t * @param {string} text2 Second string.\\n\\t * @return {number} The number of characters common to the start of each\\n\\t *     string.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\\n\\t\\tvar pointermid, pointermax, pointermin, pointerstart;\\n\\t\\t// Quick check for common null cases.\\n\\t\\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// Binary search.\\n\\t\\t// Performance analysis: http://neil.fraser.name/news/2007/10/09/\\n\\t\\tpointermin = 0;\\n\\t\\tpointermax = Math.min( text1.length, text2.length );\\n\\t\\tpointermid = pointermax;\\n\\t\\tpointerstart = 0;\\n\\t\\twhile ( pointermin < pointermid ) {\\n\\t\\t\\tif ( text1.substring( pointerstart, pointermid ) ===\\n\\t\\t\\t\\t\\ttext2.substring( pointerstart, pointermid ) ) {\\n\\t\\t\\t\\tpointermin = pointermid;\\n\\t\\t\\t\\tpointerstart = pointermin;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpointermax = pointermid;\\n\\t\\t\\t}\\n\\t\\t\\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\\n\\t\\t}\\n\\t\\treturn pointermid;\\n\\t};\\n\\n\\t/**\\n\\t * Determine the common suffix of two strings.\\n\\t * @param {string} text1 First string.\\n\\t * @param {string} text2 Second string.\\n\\t * @return {number} The number of characters common to the end of each string.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\\n\\t\\tvar pointermid, pointermax, pointermin, pointerend;\\n\\t\\t// Quick check for common null cases.\\n\\t\\tif ( !text1 ||\\n\\t\\t\\t\\t!text2 ||\\n\\t\\t\\t\\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// Binary search.\\n\\t\\t// Performance analysis: http://neil.fraser.name/news/2007/10/09/\\n\\t\\tpointermin = 0;\\n\\t\\tpointermax = Math.min( text1.length, text2.length );\\n\\t\\tpointermid = pointermax;\\n\\t\\tpointerend = 0;\\n\\t\\twhile ( pointermin < pointermid ) {\\n\\t\\t\\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\\n\\t\\t\\t\\t\\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\\n\\t\\t\\t\\tpointermin = pointermid;\\n\\t\\t\\t\\tpointerend = pointermin;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpointermax = pointermid;\\n\\t\\t\\t}\\n\\t\\t\\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\\n\\t\\t}\\n\\t\\treturn pointermid;\\n\\t};\\n\\n\\t/**\\n\\t * Find the differences between two texts.  Assumes that the texts do not\\n\\t * have any common prefix or suffix.\\n\\t * @param {string} text1 Old string to be diffed.\\n\\t * @param {string} text2 New string to be diffed.\\n\\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\\n\\t *     line-level diff first to identify the changed areas.\\n\\t *     If true, then run a faster, slightly less optimal diff.\\n\\t * @param {number} deadline Time when the diff should be complete by.\\n\\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\\n\\t\\tvar diffs, longtext, shorttext, i, hm,\\n\\t\\t\\ttext1A, text2A, text1B, text2B,\\n\\t\\t\\tmidCommon, diffsA, diffsB;\\n\\n\\t\\tif ( !text1 ) {\\n\\t\\t\\t// Just add some text (speedup).\\n\\t\\t\\treturn [\\n\\t\\t\\t\\t[ DIFF_INSERT, text2 ]\\n\\t\\t\\t];\\n\\t\\t}\\n\\n\\t\\tif ( !text2 ) {\\n\\t\\t\\t// Just delete some text (speedup).\\n\\t\\t\\treturn [\\n\\t\\t\\t\\t[ DIFF_DELETE, text1 ]\\n\\t\\t\\t];\\n\\t\\t}\\n\\n\\t\\tlongtext = text1.length > text2.length ? text1 : text2;\\n\\t\\tshorttext = text1.length > text2.length ? text2 : text1;\\n\\t\\ti = longtext.indexOf( shorttext );\\n\\t\\tif ( i !== -1 ) {\\n\\t\\t\\t// Shorter text is inside the longer text (speedup).\\n\\t\\t\\tdiffs = [\\n\\t\\t\\t\\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\\n\\t\\t\\t\\t[ DIFF_EQUAL, shorttext ],\\n\\t\\t\\t\\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\\n\\t\\t\\t];\\n\\t\\t\\t// Swap insertions for deletions if diff is reversed.\\n\\t\\t\\tif ( text1.length > text2.length ) {\\n\\t\\t\\t\\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\\n\\t\\t\\t}\\n\\t\\t\\treturn diffs;\\n\\t\\t}\\n\\n\\t\\tif ( shorttext.length === 1 ) {\\n\\t\\t\\t// Single character string.\\n\\t\\t\\t// After the previous speedup, the character can't be an equality.\\n\\t\\t\\treturn [\\n\\t\\t\\t\\t[ DIFF_DELETE, text1 ],\\n\\t\\t\\t\\t[ DIFF_INSERT, text2 ]\\n\\t\\t\\t];\\n\\t\\t}\\n\\n\\t\\t// Check to see if the problem can be split in two.\\n\\t\\thm = this.diffHalfMatch( text1, text2 );\\n\\t\\tif ( hm ) {\\n\\t\\t\\t// A half-match was found, sort out the return data.\\n\\t\\t\\ttext1A = hm[ 0 ];\\n\\t\\t\\ttext1B = hm[ 1 ];\\n\\t\\t\\ttext2A = hm[ 2 ];\\n\\t\\t\\ttext2B = hm[ 3 ];\\n\\t\\t\\tmidCommon = hm[ 4 ];\\n\\t\\t\\t// Send both pairs off for separate processing.\\n\\t\\t\\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\\n\\t\\t\\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\\n\\t\\t\\t// Merge the results.\\n\\t\\t\\treturn diffsA.concat( [\\n\\t\\t\\t\\t[ DIFF_EQUAL, midCommon ]\\n\\t\\t\\t], diffsB );\\n\\t\\t}\\n\\n\\t\\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\\n\\t\\t\\treturn this.diffLineMode( text1, text2, deadline );\\n\\t\\t}\\n\\n\\t\\treturn this.diffBisect( text1, text2, deadline );\\n\\t};\\n\\n\\t/**\\n\\t * Do the two texts share a substring which is at least half the length of the\\n\\t * longer text?\\n\\t * This speedup can produce non-minimal diffs.\\n\\t * @param {string} text1 First string.\\n\\t * @param {string} text2 Second string.\\n\\t * @return {Array.<string>} Five element Array, containing the prefix of\\n\\t *     text1, the suffix of text1, the prefix of text2, the suffix of\\n\\t *     text2 and the common middle.  Or null if there was no match.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\\n\\t\\tvar longtext, shorttext, dmp,\\n\\t\\t\\ttext1A, text2B, text2A, text1B, midCommon,\\n\\t\\t\\thm1, hm2, hm;\\n\\n\\t\\tlongtext = text1.length > text2.length ? text1 : text2;\\n\\t\\tshorttext = text1.length > text2.length ? text2 : text1;\\n\\t\\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\\n\\t\\t\\treturn null; // Pointless.\\n\\t\\t}\\n\\t\\tdmp = this; // 'this' becomes 'window' in a closure.\\n\\n\\t\\t/**\\n\\t\\t * Does a substring of shorttext exist within longtext such that the substring\\n\\t\\t * is at least half the length of longtext?\\n\\t\\t * Closure, but does not reference any external variables.\\n\\t\\t * @param {string} longtext Longer string.\\n\\t\\t * @param {string} shorttext Shorter string.\\n\\t\\t * @param {number} i Start index of quarter length substring within longtext.\\n\\t\\t * @return {Array.<string>} Five element Array, containing the prefix of\\n\\t\\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\\n\\t\\t *     of shorttext and the common middle.  Or null if there was no match.\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tfunction diffHalfMatchI( longtext, shorttext, i ) {\\n\\t\\t\\tvar seed, j, bestCommon, prefixLength, suffixLength,\\n\\t\\t\\t\\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\\n\\t\\t\\t// Start with a 1/4 length substring at position i as a seed.\\n\\t\\t\\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\\n\\t\\t\\tj = -1;\\n\\t\\t\\tbestCommon = \\\"\\\";\\n\\t\\t\\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\\n\\t\\t\\t\\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\\n\\t\\t\\t\\t\\tshorttext.substring( j ) );\\n\\t\\t\\t\\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\\n\\t\\t\\t\\t\\tshorttext.substring( 0, j ) );\\n\\t\\t\\t\\tif ( bestCommon.length < suffixLength + prefixLength ) {\\n\\t\\t\\t\\t\\tbestCommon = shorttext.substring( j - suffixLength, j ) +\\n\\t\\t\\t\\t\\t\\tshorttext.substring( j, j + prefixLength );\\n\\t\\t\\t\\t\\tbestLongtextA = longtext.substring( 0, i - suffixLength );\\n\\t\\t\\t\\t\\tbestLongtextB = longtext.substring( i + prefixLength );\\n\\t\\t\\t\\t\\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\\n\\t\\t\\t\\t\\tbestShorttextB = shorttext.substring( j + prefixLength );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif ( bestCommon.length * 2 >= longtext.length ) {\\n\\t\\t\\t\\treturn [ bestLongtextA, bestLongtextB,\\n\\t\\t\\t\\t\\tbestShorttextA, bestShorttextB, bestCommon\\n\\t\\t\\t\\t];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// First check if the second quarter is the seed for a half-match.\\n\\t\\thm1 = diffHalfMatchI( longtext, shorttext,\\n\\t\\t\\tMath.ceil( longtext.length / 4 ) );\\n\\t\\t// Check again based on the third quarter.\\n\\t\\thm2 = diffHalfMatchI( longtext, shorttext,\\n\\t\\t\\tMath.ceil( longtext.length / 2 ) );\\n\\t\\tif ( !hm1 && !hm2 ) {\\n\\t\\t\\treturn null;\\n\\t\\t} else if ( !hm2 ) {\\n\\t\\t\\thm = hm1;\\n\\t\\t} else if ( !hm1 ) {\\n\\t\\t\\thm = hm2;\\n\\t\\t} else {\\n\\t\\t\\t// Both matched.  Select the longest.\\n\\t\\t\\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\\n\\t\\t}\\n\\n\\t\\t// A half-match was found, sort out the return data.\\n\\t\\ttext1A, text1B, text2A, text2B;\\n\\t\\tif ( text1.length > text2.length ) {\\n\\t\\t\\ttext1A = hm[ 0 ];\\n\\t\\t\\ttext1B = hm[ 1 ];\\n\\t\\t\\ttext2A = hm[ 2 ];\\n\\t\\t\\ttext2B = hm[ 3 ];\\n\\t\\t} else {\\n\\t\\t\\ttext2A = hm[ 0 ];\\n\\t\\t\\ttext2B = hm[ 1 ];\\n\\t\\t\\ttext1A = hm[ 2 ];\\n\\t\\t\\ttext1B = hm[ 3 ];\\n\\t\\t}\\n\\t\\tmidCommon = hm[ 4 ];\\n\\t\\treturn [ text1A, text1B, text2A, text2B, midCommon ];\\n\\t};\\n\\n\\t/**\\n\\t * Do a quick line-level diff on both strings, then rediff the parts for\\n\\t * greater accuracy.\\n\\t * This speedup can produce non-minimal diffs.\\n\\t * @param {string} text1 Old string to be diffed.\\n\\t * @param {string} text2 New string to be diffed.\\n\\t * @param {number} deadline Time when the diff should be complete by.\\n\\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tvar a, diffs, linearray, pointer, countInsert,\\n\\t\\t\\tcountDelete, textInsert, textDelete, j;\\n\\t\\t// Scan the text on a line-by-line basis first.\\n\\t\\ta = this.diffLinesToChars( text1, text2 );\\n\\t\\ttext1 = a.chars1;\\n\\t\\ttext2 = a.chars2;\\n\\t\\tlinearray = a.lineArray;\\n\\n\\t\\tdiffs = this.DiffMain( text1, text2, false, deadline );\\n\\n\\t\\t// Convert the diff back to original text.\\n\\t\\tthis.diffCharsToLines( diffs, linearray );\\n\\t\\t// Eliminate freak matches (e.g. blank lines)\\n\\t\\tthis.diffCleanupSemantic( diffs );\\n\\n\\t\\t// Rediff any replacement blocks, this time character-by-character.\\n\\t\\t// Add a dummy entry at the end.\\n\\t\\tdiffs.push( [ DIFF_EQUAL, \\\"\\\" ] );\\n\\t\\tpointer = 0;\\n\\t\\tcountDelete = 0;\\n\\t\\tcountInsert = 0;\\n\\t\\ttextDelete = \\\"\\\";\\n\\t\\ttextInsert = \\\"\\\";\\n\\t\\twhile ( pointer < diffs.length ) {\\n\\t\\t\\tswitch ( diffs[ pointer ][ 0 ] ) {\\n\\t\\t\\tcase DIFF_INSERT:\\n\\t\\t\\t\\tcountInsert++;\\n\\t\\t\\t\\ttextInsert += diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_DELETE:\\n\\t\\t\\t\\tcountDelete++;\\n\\t\\t\\t\\ttextDelete += diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_EQUAL:\\n\\t\\t\\t\\t// Upon reaching an equality, check for prior redundancies.\\n\\t\\t\\t\\tif ( countDelete >= 1 && countInsert >= 1 ) {\\n\\t\\t\\t\\t\\t// Delete the offending records and add the merged ones.\\n\\t\\t\\t\\t\\tdiffs.splice( pointer - countDelete - countInsert,\\n\\t\\t\\t\\t\\t\\tcountDelete + countInsert );\\n\\t\\t\\t\\t\\tpointer = pointer - countDelete - countInsert;\\n\\t\\t\\t\\t\\ta = this$1.DiffMain( textDelete, textInsert, false, deadline );\\n\\t\\t\\t\\t\\tfor ( j = a.length - 1; j >= 0; j-- ) {\\n\\t\\t\\t\\t\\t\\tdiffs.splice( pointer, 0, a[ j ] );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tpointer = pointer + a.length;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcountInsert = 0;\\n\\t\\t\\t\\tcountDelete = 0;\\n\\t\\t\\t\\ttextDelete = \\\"\\\";\\n\\t\\t\\t\\ttextInsert = \\\"\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tpointer++;\\n\\t\\t}\\n\\t\\tdiffs.pop(); // Remove the dummy entry at the end.\\n\\n\\t\\treturn diffs;\\n\\t};\\n\\n\\t/**\\n\\t * Find the 'middle snake' of a diff, split the problem in two\\n\\t * and return the recursively constructed diff.\\n\\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\\n\\t * @param {string} text1 Old string to be diffed.\\n\\t * @param {string} text2 New string to be diffed.\\n\\t * @param {number} deadline Time at which to bail if not yet complete.\\n\\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tvar text1Length, text2Length, maxD, vOffset, vLength,\\n\\t\\t\\tv1, v2, x, delta, front, k1start, k1end, k2start,\\n\\t\\t\\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\\n\\t\\t// Cache the text lengths to prevent multiple calls.\\n\\t\\ttext1Length = text1.length;\\n\\t\\ttext2Length = text2.length;\\n\\t\\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\\n\\t\\tvOffset = maxD;\\n\\t\\tvLength = 2 * maxD;\\n\\t\\tv1 = new Array( vLength );\\n\\t\\tv2 = new Array( vLength );\\n\\t\\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\\n\\t\\t// integers and undefined.\\n\\t\\tfor ( x = 0; x < vLength; x++ ) {\\n\\t\\t\\tv1[ x ] = -1;\\n\\t\\t\\tv2[ x ] = -1;\\n\\t\\t}\\n\\t\\tv1[ vOffset + 1 ] = 0;\\n\\t\\tv2[ vOffset + 1 ] = 0;\\n\\t\\tdelta = text1Length - text2Length;\\n\\t\\t// If the total number of characters is odd, then the front path will collide\\n\\t\\t// with the reverse path.\\n\\t\\tfront = ( delta % 2 !== 0 );\\n\\t\\t// Offsets for start and end of k loop.\\n\\t\\t// Prevents mapping of space beyond the grid.\\n\\t\\tk1start = 0;\\n\\t\\tk1end = 0;\\n\\t\\tk2start = 0;\\n\\t\\tk2end = 0;\\n\\t\\tfor ( d = 0; d < maxD; d++ ) {\\n\\t\\t\\t// Bail out if deadline is reached.\\n\\t\\t\\tif ( ( new Date() ).getTime() > deadline ) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Walk the front path one step.\\n\\t\\t\\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\\n\\t\\t\\t\\tk1Offset = vOffset + k1;\\n\\t\\t\\t\\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\\n\\t\\t\\t\\t\\tx1 = v1[ k1Offset + 1 ];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tx1 = v1[ k1Offset - 1 ] + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ty1 = x1 - k1;\\n\\t\\t\\t\\twhile ( x1 < text1Length && y1 < text2Length &&\\n\\t\\t\\t\\t\\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\\n\\t\\t\\t\\t\\tx1++;\\n\\t\\t\\t\\t\\ty1++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tv1[ k1Offset ] = x1;\\n\\t\\t\\t\\tif ( x1 > text1Length ) {\\n\\t\\t\\t\\t\\t// Ran off the right of the graph.\\n\\t\\t\\t\\t\\tk1end += 2;\\n\\t\\t\\t\\t} else if ( y1 > text2Length ) {\\n\\t\\t\\t\\t\\t// Ran off the bottom of the graph.\\n\\t\\t\\t\\t\\tk1start += 2;\\n\\t\\t\\t\\t} else if ( front ) {\\n\\t\\t\\t\\t\\tk2Offset = vOffset + delta - k1;\\n\\t\\t\\t\\t\\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\\n\\t\\t\\t\\t\\t\\t// Mirror x2 onto top-left coordinate system.\\n\\t\\t\\t\\t\\t\\tx2 = text1Length - v2[ k2Offset ];\\n\\t\\t\\t\\t\\t\\tif ( x1 >= x2 ) {\\n\\t\\t\\t\\t\\t\\t\\t// Overlap detected.\\n\\t\\t\\t\\t\\t\\t\\treturn this$1.diffBisectSplit( text1, text2, x1, y1, deadline );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Walk the reverse path one step.\\n\\t\\t\\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\\n\\t\\t\\t\\tk2Offset = vOffset + k2;\\n\\t\\t\\t\\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\\n\\t\\t\\t\\t\\tx2 = v2[ k2Offset + 1 ];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tx2 = v2[ k2Offset - 1 ] + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ty2 = x2 - k2;\\n\\t\\t\\t\\twhile ( x2 < text1Length && y2 < text2Length &&\\n\\t\\t\\t\\t\\ttext1.charAt( text1Length - x2 - 1 ) ===\\n\\t\\t\\t\\t\\ttext2.charAt( text2Length - y2 - 1 ) ) {\\n\\t\\t\\t\\t\\tx2++;\\n\\t\\t\\t\\t\\ty2++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tv2[ k2Offset ] = x2;\\n\\t\\t\\t\\tif ( x2 > text1Length ) {\\n\\t\\t\\t\\t\\t// Ran off the left of the graph.\\n\\t\\t\\t\\t\\tk2end += 2;\\n\\t\\t\\t\\t} else if ( y2 > text2Length ) {\\n\\t\\t\\t\\t\\t// Ran off the top of the graph.\\n\\t\\t\\t\\t\\tk2start += 2;\\n\\t\\t\\t\\t} else if ( !front ) {\\n\\t\\t\\t\\t\\tk1Offset = vOffset + delta - k2;\\n\\t\\t\\t\\t\\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\\n\\t\\t\\t\\t\\t\\tx1 = v1[ k1Offset ];\\n\\t\\t\\t\\t\\t\\ty1 = vOffset + x1 - k1Offset;\\n\\t\\t\\t\\t\\t\\t// Mirror x2 onto top-left coordinate system.\\n\\t\\t\\t\\t\\t\\tx2 = text1Length - x2;\\n\\t\\t\\t\\t\\t\\tif ( x1 >= x2 ) {\\n\\t\\t\\t\\t\\t\\t\\t// Overlap detected.\\n\\t\\t\\t\\t\\t\\t\\treturn this$1.diffBisectSplit( text1, text2, x1, y1, deadline );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Diff took too long and hit the deadline or\\n\\t\\t// number of diffs equals number of characters, no commonality at all.\\n\\t\\treturn [\\n\\t\\t\\t[ DIFF_DELETE, text1 ],\\n\\t\\t\\t[ DIFF_INSERT, text2 ]\\n\\t\\t];\\n\\t};\\n\\n\\t/**\\n\\t * Given the location of the 'middle snake', split the diff in two parts\\n\\t * and recurse.\\n\\t * @param {string} text1 Old string to be diffed.\\n\\t * @param {string} text2 New string to be diffed.\\n\\t * @param {number} x Index of split point in text1.\\n\\t * @param {number} y Index of split point in text2.\\n\\t * @param {number} deadline Time at which to bail if not yet complete.\\n\\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\\n\\t\\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\\n\\t\\ttext1a = text1.substring( 0, x );\\n\\t\\ttext2a = text2.substring( 0, y );\\n\\t\\ttext1b = text1.substring( x );\\n\\t\\ttext2b = text2.substring( y );\\n\\n\\t\\t// Compute both diffs serially.\\n\\t\\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\\n\\t\\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\\n\\n\\t\\treturn diffs.concat( diffsb );\\n\\t};\\n\\n\\t/**\\n\\t * Reduce the number of edits by eliminating semantically trivial equalities.\\n\\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tvar changes, equalities, equalitiesLength, lastequality,\\n\\t\\t\\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\\n\\t\\t\\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\\n\\t\\tchanges = false;\\n\\t\\tequalities = []; // Stack of indices where equalities are found.\\n\\t\\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\\n\\t\\t/** @type {?string} */\\n\\t\\tlastequality = null;\\n\\t\\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\\n\\t\\tpointer = 0; // Index of current position.\\n\\t\\t// Number of characters that changed prior to the equality.\\n\\t\\tlengthInsertions1 = 0;\\n\\t\\tlengthDeletions1 = 0;\\n\\t\\t// Number of characters that changed after the equality.\\n\\t\\tlengthInsertions2 = 0;\\n\\t\\tlengthDeletions2 = 0;\\n\\t\\twhile ( pointer < diffs.length ) {\\n\\t\\t\\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\\n\\t\\t\\t\\tequalities[ equalitiesLength++ ] = pointer;\\n\\t\\t\\t\\tlengthInsertions1 = lengthInsertions2;\\n\\t\\t\\t\\tlengthDeletions1 = lengthDeletions2;\\n\\t\\t\\t\\tlengthInsertions2 = 0;\\n\\t\\t\\t\\tlengthDeletions2 = 0;\\n\\t\\t\\t\\tlastequality = diffs[ pointer ][ 1 ];\\n\\t\\t\\t} else { // An insertion or deletion.\\n\\t\\t\\t\\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\\n\\t\\t\\t\\t\\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Eliminate an equality that is smaller or equal to the edits on both\\n\\t\\t\\t\\t// sides of it.\\n\\t\\t\\t\\tif ( lastequality && ( lastequality.length <=\\n\\t\\t\\t\\t\\t\\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\\n\\t\\t\\t\\t\\t\\t( lastequality.length <= Math.max( lengthInsertions2,\\n\\t\\t\\t\\t\\t\\t\\tlengthDeletions2 ) ) ) {\\n\\n\\t\\t\\t\\t\\t// Duplicate record.\\n\\t\\t\\t\\t\\tdiffs.splice(\\n\\t\\t\\t\\t\\t\\tequalities[ equalitiesLength - 1 ],\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t[ DIFF_DELETE, lastequality ]\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t// Change second copy to insert.\\n\\t\\t\\t\\t\\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\\n\\n\\t\\t\\t\\t\\t// Throw away the equality we just deleted.\\n\\t\\t\\t\\t\\tequalitiesLength--;\\n\\n\\t\\t\\t\\t\\t// Throw away the previous equality (it needs to be reevaluated).\\n\\t\\t\\t\\t\\tequalitiesLength--;\\n\\t\\t\\t\\t\\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\\n\\n\\t\\t\\t\\t\\t// Reset the counters.\\n\\t\\t\\t\\t\\tlengthInsertions1 = 0;\\n\\t\\t\\t\\t\\tlengthDeletions1 = 0;\\n\\t\\t\\t\\t\\tlengthInsertions2 = 0;\\n\\t\\t\\t\\t\\tlengthDeletions2 = 0;\\n\\t\\t\\t\\t\\tlastequality = null;\\n\\t\\t\\t\\t\\tchanges = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tpointer++;\\n\\t\\t}\\n\\n\\t\\t// Normalize the diff.\\n\\t\\tif ( changes ) {\\n\\t\\t\\tthis.diffCleanupMerge( diffs );\\n\\t\\t}\\n\\n\\t\\t// Find any overlaps between deletions and insertions.\\n\\t\\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\\n\\t\\t//   -> <del>abc</del>xxx<ins>def</ins>\\n\\t\\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\\n\\t\\t//   -> <ins>def</ins>xxx<del>abc</del>\\n\\t\\t// Only extract an overlap if it is as big as the edit ahead or behind it.\\n\\t\\tpointer = 1;\\n\\t\\twhile ( pointer < diffs.length ) {\\n\\t\\t\\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\\n\\t\\t\\t\\t\\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\\n\\t\\t\\t\\tdeletion = diffs[ pointer - 1 ][ 1 ];\\n\\t\\t\\t\\tinsertion = diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\toverlapLength1 = this$1.diffCommonOverlap( deletion, insertion );\\n\\t\\t\\t\\toverlapLength2 = this$1.diffCommonOverlap( insertion, deletion );\\n\\t\\t\\t\\tif ( overlapLength1 >= overlapLength2 ) {\\n\\t\\t\\t\\t\\tif ( overlapLength1 >= deletion.length / 2 ||\\n\\t\\t\\t\\t\\t\\t\\toverlapLength1 >= insertion.length / 2 ) {\\n\\t\\t\\t\\t\\t\\t// Overlap found.  Insert an equality and trim the surrounding edits.\\n\\t\\t\\t\\t\\t\\tdiffs.splice(\\n\\t\\t\\t\\t\\t\\t\\tpointer,\\n\\t\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t\\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ] =\\n\\t\\t\\t\\t\\t\\t\\tdeletion.substring( 0, deletion.length - overlapLength1 );\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\\n\\t\\t\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif ( overlapLength2 >= deletion.length / 2 ||\\n\\t\\t\\t\\t\\t\\t\\toverlapLength2 >= insertion.length / 2 ) {\\n\\n\\t\\t\\t\\t\\t\\t// Reverse overlap found.\\n\\t\\t\\t\\t\\t\\t// Insert an equality and swap and trim the surrounding edits.\\n\\t\\t\\t\\t\\t\\tdiffs.splice(\\n\\t\\t\\t\\t\\t\\t\\tpointer,\\n\\t\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\t\\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ] =\\n\\t\\t\\t\\t\\t\\t\\tinsertion.substring( 0, insertion.length - overlapLength2 );\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 1 ] =\\n\\t\\t\\t\\t\\t\\t\\tdeletion.substring( overlapLength2 );\\n\\t\\t\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpointer++;\\n\\t\\t\\t}\\n\\t\\t\\tpointer++;\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Determine if the suffix of one string is the prefix of another.\\n\\t * @param {string} text1 First string.\\n\\t * @param {string} text2 Second string.\\n\\t * @return {number} The number of characters common to the end of the first\\n\\t *     string and the start of the second string.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\\n\\t\\tvar text1Length, text2Length, textLength,\\n\\t\\t\\tbest, length, pattern, found;\\n\\t\\t// Cache the text lengths to prevent multiple calls.\\n\\t\\ttext1Length = text1.length;\\n\\t\\ttext2Length = text2.length;\\n\\t\\t// Eliminate the null case.\\n\\t\\tif ( text1Length === 0 || text2Length === 0 ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// Truncate the longer string.\\n\\t\\tif ( text1Length > text2Length ) {\\n\\t\\t\\ttext1 = text1.substring( text1Length - text2Length );\\n\\t\\t} else if ( text1Length < text2Length ) {\\n\\t\\t\\ttext2 = text2.substring( 0, text1Length );\\n\\t\\t}\\n\\t\\ttextLength = Math.min( text1Length, text2Length );\\n\\t\\t// Quick check for the worst case.\\n\\t\\tif ( text1 === text2 ) {\\n\\t\\t\\treturn textLength;\\n\\t\\t}\\n\\n\\t\\t// Start by looking for a single character match\\n\\t\\t// and increase length until no match is found.\\n\\t\\t// Performance analysis: http://neil.fraser.name/news/2010/11/04/\\n\\t\\tbest = 0;\\n\\t\\tlength = 1;\\n\\t\\twhile ( true ) {\\n\\t\\t\\tpattern = text1.substring( textLength - length );\\n\\t\\t\\tfound = text2.indexOf( pattern );\\n\\t\\t\\tif ( found === -1 ) {\\n\\t\\t\\t\\treturn best;\\n\\t\\t\\t}\\n\\t\\t\\tlength += found;\\n\\t\\t\\tif ( found === 0 || text1.substring( textLength - length ) ===\\n\\t\\t\\t\\t\\ttext2.substring( 0, length ) ) {\\n\\t\\t\\t\\tbest = length;\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Split two texts into an array of strings.  Reduce the texts to a string of\\n\\t * hashes where each Unicode character represents one line.\\n\\t * @param {string} text1 First string.\\n\\t * @param {string} text2 Second string.\\n\\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\\n\\t *     An object containing the encoded text1, the encoded text2 and\\n\\t *     the array of unique strings.\\n\\t *     The zeroth element of the array of unique strings is intentionally blank.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\\n\\t\\tvar lineArray, lineHash, chars1, chars2;\\n\\t\\tlineArray = []; // e.g. lineArray[4] === 'Hello\\\\n'\\n\\t\\tlineHash = {}; // e.g. lineHash['Hello\\\\n'] === 4\\n\\n\\t\\t// '\\\\x00' is a valid character, but various debuggers don't like it.\\n\\t\\t// So we'll insert a junk entry to avoid generating a null character.\\n\\t\\tlineArray[ 0 ] = \\\"\\\";\\n\\n\\t\\t/**\\n\\t\\t * Split a text into an array of strings.  Reduce the texts to a string of\\n\\t\\t * hashes where each Unicode character represents one line.\\n\\t\\t * Modifies linearray and linehash through being a closure.\\n\\t\\t * @param {string} text String to encode.\\n\\t\\t * @return {string} Encoded string.\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tfunction diffLinesToCharsMunge( text ) {\\n\\t\\t\\tvar chars, lineStart, lineEnd, lineArrayLength, line;\\n\\t\\t\\tchars = \\\"\\\";\\n\\t\\t\\t// Walk the text, pulling out a substring for each line.\\n\\t\\t\\t// text.split('\\\\n') would would temporarily double our memory footprint.\\n\\t\\t\\t// Modifying text would create many large strings to garbage collect.\\n\\t\\t\\tlineStart = 0;\\n\\t\\t\\tlineEnd = -1;\\n\\t\\t\\t// Keeping our own length variable is faster than looking it up.\\n\\t\\t\\tlineArrayLength = lineArray.length;\\n\\t\\t\\twhile ( lineEnd < text.length - 1 ) {\\n\\t\\t\\t\\tlineEnd = text.indexOf( \\\"\\\\n\\\", lineStart );\\n\\t\\t\\t\\tif ( lineEnd === -1 ) {\\n\\t\\t\\t\\t\\tlineEnd = text.length - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tline = text.substring( lineStart, lineEnd + 1 );\\n\\t\\t\\t\\tlineStart = lineEnd + 1;\\n\\n\\t\\t\\t\\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\\n\\t\\t\\t\\t\\t\\t\\t( lineHash[ line ] !== undefined ) ) {\\n\\t\\t\\t\\t\\tchars += String.fromCharCode( lineHash[ line ] );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tchars += String.fromCharCode( lineArrayLength );\\n\\t\\t\\t\\t\\tlineHash[ line ] = lineArrayLength;\\n\\t\\t\\t\\t\\tlineArray[ lineArrayLength++ ] = line;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn chars;\\n\\t\\t}\\n\\n\\t\\tchars1 = diffLinesToCharsMunge( text1 );\\n\\t\\tchars2 = diffLinesToCharsMunge( text2 );\\n\\t\\treturn {\\n\\t\\t\\tchars1: chars1,\\n\\t\\t\\tchars2: chars2,\\n\\t\\t\\tlineArray: lineArray\\n\\t\\t};\\n\\t};\\n\\n\\t/**\\n\\t * Rehydrate the text in a diff from a string of line hashes to real lines of\\n\\t * text.\\n\\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\\n\\t * @param {!Array.<string>} lineArray Array of unique strings.\\n\\t * @private\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\\n\\t\\tvar x, chars, text, y;\\n\\t\\tfor ( x = 0; x < diffs.length; x++ ) {\\n\\t\\t\\tchars = diffs[ x ][ 1 ];\\n\\t\\t\\ttext = [];\\n\\t\\t\\tfor ( y = 0; y < chars.length; y++ ) {\\n\\t\\t\\t\\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\\n\\t\\t\\t}\\n\\t\\t\\tdiffs[ x ][ 1 ] = text.join( \\\"\\\" );\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Reorder and merge like edit sections.  Merge equalities.\\n\\t * Any edit section can move as long as it doesn't cross an equality.\\n\\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\\n\\t */\\n\\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\\n\\t\\tvar this$1 = this;\\n\\n\\t\\tvar pointer, countDelete, countInsert, textInsert, textDelete,\\n\\t\\t\\tcommonlength, changes, diffPointer, position;\\n\\t\\tdiffs.push( [ DIFF_EQUAL, \\\"\\\" ] ); // Add a dummy entry at the end.\\n\\t\\tpointer = 0;\\n\\t\\tcountDelete = 0;\\n\\t\\tcountInsert = 0;\\n\\t\\ttextDelete = \\\"\\\";\\n\\t\\ttextInsert = \\\"\\\";\\n\\t\\tcommonlength;\\n\\t\\twhile ( pointer < diffs.length ) {\\n\\t\\t\\tswitch ( diffs[ pointer ][ 0 ] ) {\\n\\t\\t\\tcase DIFF_INSERT:\\n\\t\\t\\t\\tcountInsert++;\\n\\t\\t\\t\\ttextInsert += diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_DELETE:\\n\\t\\t\\t\\tcountDelete++;\\n\\t\\t\\t\\ttextDelete += diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase DIFF_EQUAL:\\n\\t\\t\\t\\t// Upon reaching an equality, check for prior redundancies.\\n\\t\\t\\t\\tif ( countDelete + countInsert > 1 ) {\\n\\t\\t\\t\\t\\tif ( countDelete !== 0 && countInsert !== 0 ) {\\n\\t\\t\\t\\t\\t\\t// Factor out any common prefixies.\\n\\t\\t\\t\\t\\t\\tcommonlength = this$1.diffCommonPrefix( textInsert, textDelete );\\n\\t\\t\\t\\t\\t\\tif ( commonlength !== 0 ) {\\n\\t\\t\\t\\t\\t\\t\\tif ( ( pointer - countDelete - countInsert ) > 0 &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tDIFF_EQUAL ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttextInsert.substring( 0, commonlength );\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttextInsert.substring( 0, commonlength )\\n\\t\\t\\t\\t\\t\\t\\t\\t] );\\n\\t\\t\\t\\t\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\ttextInsert = textInsert.substring( commonlength );\\n\\t\\t\\t\\t\\t\\t\\ttextDelete = textDelete.substring( commonlength );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t// Factor out any common suffixies.\\n\\t\\t\\t\\t\\t\\tcommonlength = this$1.diffCommonSuffix( textInsert, textDelete );\\n\\t\\t\\t\\t\\t\\tif ( commonlength !== 0 ) {\\n\\t\\t\\t\\t\\t\\t\\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcommonlength ) + diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\t\\t\\t\\ttextInsert = textInsert.substring( 0, textInsert.length -\\n\\t\\t\\t\\t\\t\\t\\t\\tcommonlength );\\n\\t\\t\\t\\t\\t\\t\\ttextDelete = textDelete.substring( 0, textDelete.length -\\n\\t\\t\\t\\t\\t\\t\\t\\tcommonlength );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Delete the offending records and add the merged ones.\\n\\t\\t\\t\\t\\tif ( countDelete === 0 ) {\\n\\t\\t\\t\\t\\t\\tdiffs.splice( pointer - countInsert,\\n\\t\\t\\t\\t\\t\\t\\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\\n\\t\\t\\t\\t\\t} else if ( countInsert === 0 ) {\\n\\t\\t\\t\\t\\t\\tdiffs.splice( pointer - countDelete,\\n\\t\\t\\t\\t\\t\\t\\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tdiffs.splice(\\n\\t\\t\\t\\t\\t\\t\\tpointer - countDelete - countInsert,\\n\\t\\t\\t\\t\\t\\t\\tcountDelete + countInsert,\\n\\t\\t\\t\\t\\t\\t\\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tpointer = pointer - countDelete - countInsert +\\n\\t\\t\\t\\t\\t\\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\\n\\t\\t\\t\\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\\n\\n\\t\\t\\t\\t\\t// Merge this equality with the previous one.\\n\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\t\\tdiffs.splice( pointer, 1 );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpointer++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcountInsert = 0;\\n\\t\\t\\t\\tcountDelete = 0;\\n\\t\\t\\t\\ttextDelete = \\\"\\\";\\n\\t\\t\\t\\ttextInsert = \\\"\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif ( diffs[ diffs.length - 1 ][ 1 ] === \\\"\\\" ) {\\n\\t\\t\\tdiffs.pop(); // Remove the dummy entry at the end.\\n\\t\\t}\\n\\n\\t\\t// Second pass: look for single edits surrounded on both sides by equalities\\n\\t\\t// which can be shifted sideways to eliminate an equality.\\n\\t\\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\\n\\t\\tchanges = false;\\n\\t\\tpointer = 1;\\n\\n\\t\\t// Intentionally ignore the first and last element (don't need checking).\\n\\t\\twhile ( pointer < diffs.length - 1 ) {\\n\\t\\t\\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\\n\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\\n\\n\\t\\t\\t\\tdiffPointer = diffs[ pointer ][ 1 ];\\n\\t\\t\\t\\tposition = diffPointer.substring(\\n\\t\\t\\t\\t\\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// This is a single edit surrounded by equalities.\\n\\t\\t\\t\\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\\n\\n\\t\\t\\t\\t\\t// Shift the edit over the previous equality.\\n\\t\\t\\t\\t\\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\\n\\t\\t\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ].length );\\n\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 1 ] =\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\\n\\t\\t\\t\\t\\tdiffs.splice( pointer - 1, 1 );\\n\\t\\t\\t\\t\\tchanges = true;\\n\\t\\t\\t\\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 1 ] ) {\\n\\n\\t\\t\\t\\t\\t// Shift the edit over the next equality.\\n\\t\\t\\t\\t\\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\\n\\t\\t\\t\\t\\tdiffs[ pointer ][ 1 ] =\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\\n\\t\\t\\t\\t\\t\\tdiffs[ pointer + 1 ][ 1 ];\\n\\t\\t\\t\\t\\tdiffs.splice( pointer + 1, 1 );\\n\\t\\t\\t\\t\\tchanges = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tpointer++;\\n\\t\\t}\\n\\t\\t// If shifts were made, the diff needs reordering and another shift sweep.\\n\\t\\tif ( changes ) {\\n\\t\\t\\tthis.diffCleanupMerge( diffs );\\n\\t\\t}\\n\\t};\\n\\n\\treturn function( o, n ) {\\n\\t\\tvar diff, output, text;\\n\\t\\tdiff = new DiffMatchPatch();\\n\\t\\toutput = diff.DiffMain( o, n );\\n\\t\\tdiff.diffCleanupEfficiency( output );\\n\\t\\ttext = diff.diffPrettyHtml( output );\\n\\n\\t\\treturn text;\\n\\t};\\n}() );\\n\\n// Get a reference to the global object, like window in browsers\\n}( (function() {\\n\\treturn this;\\n})() ));\\n\\n(function() {\\n\\n// Don't load the HTML Reporter on non-Browser environments\\nif ( typeof window === \\\"undefined\\\" || !window.document ) {\\n\\treturn;\\n}\\n\\n// Deprecated QUnit.init - Ref #530\\n// Re-initialize the configuration options\\nQUnit.init = function() {\\n\\tvar tests, banner, result, qunit,\\n\\t\\tconfig = QUnit.config;\\n\\n\\tconfig.stats = { all: 0, bad: 0 };\\n\\tconfig.moduleStats = { all: 0, bad: 0 };\\n\\tconfig.started = 0;\\n\\tconfig.updateRate = 1000;\\n\\tconfig.blocking = false;\\n\\tconfig.autostart = true;\\n\\tconfig.autorun = false;\\n\\tconfig.filter = \\\"\\\";\\n\\tconfig.queue = [];\\n\\n\\t// Return on non-browser environments\\n\\t// This is necessary to not break on node tests\\n\\tif ( typeof window === \\\"undefined\\\" ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tqunit = id( \\\"qunit\\\" );\\n\\tif ( qunit ) {\\n\\t\\tqunit.innerHTML =\\n\\t\\t\\t\\\"<h1 id='qunit-header'>\\\" + escapeText( document.title ) + \\\"</h1>\\\" +\\n\\t\\t\\t\\\"<h2 id='qunit-banner'></h2>\\\" +\\n\\t\\t\\t\\\"<div id='qunit-testrunner-toolbar'></div>\\\" +\\n\\t\\t\\t\\\"<h2 id='qunit-userAgent'></h2>\\\" +\\n\\t\\t\\t\\\"<ol id='qunit-tests'></ol>\\\";\\n\\t}\\n\\n\\ttests = id( \\\"qunit-tests\\\" );\\n\\tbanner = id( \\\"qunit-banner\\\" );\\n\\tresult = id( \\\"qunit-testresult\\\" );\\n\\n\\tif ( tests ) {\\n\\t\\ttests.innerHTML = \\\"\\\";\\n\\t}\\n\\n\\tif ( banner ) {\\n\\t\\tbanner.className = \\\"\\\";\\n\\t}\\n\\n\\tif ( result ) {\\n\\t\\tresult.parentNode.removeChild( result );\\n\\t}\\n\\n\\tif ( tests ) {\\n\\t\\tresult = document.createElement( \\\"p\\\" );\\n\\t\\tresult.id = \\\"qunit-testresult\\\";\\n\\t\\tresult.className = \\\"result\\\";\\n\\t\\ttests.parentNode.insertBefore( result, tests );\\n\\t\\tresult.innerHTML = \\\"Running...<br />&#160;\\\";\\n\\t}\\n};\\n\\nvar config = QUnit.config,\\n\\tcollapseNext = false,\\n\\thasOwn = Object.prototype.hasOwnProperty,\\n\\tdefined = {\\n\\t\\tdocument: window.document !== undefined,\\n\\t\\tsessionStorage: (function() {\\n\\t\\t\\tvar x = \\\"qunit-test-string\\\";\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tsessionStorage.setItem( x, x );\\n\\t\\t\\t\\tsessionStorage.removeItem( x );\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} catch ( e ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}())\\n\\t},\\n\\tmodulesList = [];\\n\\n/**\\n* Escape text for attribute or text content.\\n*/\\nfunction escapeText( s ) {\\n\\tif ( !s ) {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\ts = s + \\\"\\\";\\n\\n\\t// Both single quotes and double quotes (for attributes)\\n\\treturn s.replace( /['\\\"<>&]/g, function( s ) {\\n\\t\\tswitch ( s ) {\\n\\t\\tcase \\\"'\\\":\\n\\t\\t\\treturn \\\"&#039;\\\";\\n\\t\\tcase \\\"\\\\\\\"\\\":\\n\\t\\t\\treturn \\\"&quot;\\\";\\n\\t\\tcase \\\"<\\\":\\n\\t\\t\\treturn \\\"&lt;\\\";\\n\\t\\tcase \\\">\\\":\\n\\t\\t\\treturn \\\"&gt;\\\";\\n\\t\\tcase \\\"&\\\":\\n\\t\\t\\treturn \\\"&amp;\\\";\\n\\t\\t}\\n\\t});\\n}\\n\\n/**\\n * @param {HTMLElement} elem\\n * @param {string} type\\n * @param {Function} fn\\n */\\nfunction addEvent( elem, type, fn ) {\\n\\tif ( elem.addEventListener ) {\\n\\n\\t\\t// Standards-based browsers\\n\\t\\telem.addEventListener( type, fn, false );\\n\\t} else if ( elem.attachEvent ) {\\n\\n\\t\\t// support: IE <9\\n\\t\\telem.attachEvent( \\\"on\\\" + type, function() {\\n\\t\\t\\tvar event = window.event;\\n\\t\\t\\tif ( !event.target ) {\\n\\t\\t\\t\\tevent.target = event.srcElement || document;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfn.call( elem, event );\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * @param {Array|NodeList} elems\\n * @param {string} type\\n * @param {Function} fn\\n */\\nfunction addEvents( elems, type, fn ) {\\n\\tvar i = elems.length;\\n\\twhile ( i-- ) {\\n\\t\\taddEvent( elems[ i ], type, fn );\\n\\t}\\n}\\n\\nfunction hasClass( elem, name ) {\\n\\treturn ( \\\" \\\" + elem.className + \\\" \\\" ).indexOf( \\\" \\\" + name + \\\" \\\" ) >= 0;\\n}\\n\\nfunction addClass( elem, name ) {\\n\\tif ( !hasClass( elem, name ) ) {\\n\\t\\telem.className += ( elem.className ? \\\" \\\" : \\\"\\\" ) + name;\\n\\t}\\n}\\n\\nfunction toggleClass( elem, name ) {\\n\\tif ( hasClass( elem, name ) ) {\\n\\t\\tremoveClass( elem, name );\\n\\t} else {\\n\\t\\taddClass( elem, name );\\n\\t}\\n}\\n\\nfunction removeClass( elem, name ) {\\n\\tvar set = \\\" \\\" + elem.className + \\\" \\\";\\n\\n\\t// Class name may appear multiple times\\n\\twhile ( set.indexOf( \\\" \\\" + name + \\\" \\\" ) >= 0 ) {\\n\\t\\tset = set.replace( \\\" \\\" + name + \\\" \\\", \\\" \\\" );\\n\\t}\\n\\n\\t// trim for prettiness\\n\\telem.className = typeof set.trim === \\\"function\\\" ? set.trim() : set.replace( /^\\\\s+|\\\\s+$/g, \\\"\\\" );\\n}\\n\\nfunction id( name ) {\\n\\treturn defined.document && document.getElementById && document.getElementById( name );\\n}\\n\\nfunction getUrlConfigHtml() {\\n\\tvar i, j, val,\\n\\t\\tescaped, escapedTooltip,\\n\\t\\tselection = false,\\n\\t\\tlen = config.urlConfig.length,\\n\\t\\turlConfigHtml = \\\"\\\";\\n\\n\\tfor ( i = 0; i < len; i++ ) {\\n\\t\\tval = config.urlConfig[ i ];\\n\\t\\tif ( typeof val === \\\"string\\\" ) {\\n\\t\\t\\tval = {\\n\\t\\t\\t\\tid: val,\\n\\t\\t\\t\\tlabel: val\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tescaped = escapeText( val.id );\\n\\t\\tescapedTooltip = escapeText( val.tooltip );\\n\\n\\t\\tif ( config[ val.id ] === undefined ) {\\n\\t\\t\\tconfig[ val.id ] = QUnit.urlParams[ val.id ];\\n\\t\\t}\\n\\n\\t\\tif ( !val.value || typeof val.value === \\\"string\\\" ) {\\n\\t\\t\\turlConfigHtml += \\\"<input id='qunit-urlconfig-\\\" + escaped +\\n\\t\\t\\t\\t\\\"' name='\\\" + escaped + \\\"' type='checkbox'\\\" +\\n\\t\\t\\t\\t( val.value ? \\\" value='\\\" + escapeText( val.value ) + \\\"'\\\" : \\\"\\\" ) +\\n\\t\\t\\t\\t( config[ val.id ] ? \\\" checked='checked'\\\" : \\\"\\\" ) +\\n\\t\\t\\t\\t\\\" title='\\\" + escapedTooltip + \\\"' /><label for='qunit-urlconfig-\\\" + escaped +\\n\\t\\t\\t\\t\\\"' title='\\\" + escapedTooltip + \\\"'>\\\" + val.label + \\\"</label>\\\";\\n\\t\\t} else {\\n\\t\\t\\turlConfigHtml += \\\"<label for='qunit-urlconfig-\\\" + escaped +\\n\\t\\t\\t\\t\\\"' title='\\\" + escapedTooltip + \\\"'>\\\" + val.label +\\n\\t\\t\\t\\t\\\": </label><select id='qunit-urlconfig-\\\" + escaped +\\n\\t\\t\\t\\t\\\"' name='\\\" + escaped + \\\"' title='\\\" + escapedTooltip + \\\"'><option></option>\\\";\\n\\n\\t\\t\\tif ( QUnit.is( \\\"array\\\", val.value ) ) {\\n\\t\\t\\t\\tfor ( j = 0; j < val.value.length; j++ ) {\\n\\t\\t\\t\\t\\tescaped = escapeText( val.value[ j ] );\\n\\t\\t\\t\\t\\turlConfigHtml += \\\"<option value='\\\" + escaped + \\\"'\\\" +\\n\\t\\t\\t\\t\\t\\t( config[ val.id ] === val.value[ j ] ?\\n\\t\\t\\t\\t\\t\\t\\t( selection = true ) && \\\" selected='selected'\\\" : \\\"\\\" ) +\\n\\t\\t\\t\\t\\t\\t\\\">\\\" + escaped + \\\"</option>\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor ( j in val.value ) {\\n\\t\\t\\t\\t\\tif ( hasOwn.call( val.value, j ) ) {\\n\\t\\t\\t\\t\\t\\turlConfigHtml += \\\"<option value='\\\" + escapeText( j ) + \\\"'\\\" +\\n\\t\\t\\t\\t\\t\\t\\t( config[ val.id ] === j ?\\n\\t\\t\\t\\t\\t\\t\\t\\t( selection = true ) && \\\" selected='selected'\\\" : \\\"\\\" ) +\\n\\t\\t\\t\\t\\t\\t\\t\\\">\\\" + escapeText( val.value[ j ] ) + \\\"</option>\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif ( config[ val.id ] && !selection ) {\\n\\t\\t\\t\\tescaped = escapeText( config[ val.id ] );\\n\\t\\t\\t\\turlConfigHtml += \\\"<option value='\\\" + escaped +\\n\\t\\t\\t\\t\\t\\\"' selected='selected' disabled='disabled'>\\\" + escaped + \\\"</option>\\\";\\n\\t\\t\\t}\\n\\t\\t\\turlConfigHtml += \\\"</select>\\\";\\n\\t\\t}\\n\\t}\\n\\n\\treturn urlConfigHtml;\\n}\\n\\n// Handle \\\"click\\\" events on toolbar checkboxes and \\\"change\\\" for select menus.\\n// Updates the URL with the new state of `config.urlConfig` values.\\nfunction toolbarChanged() {\\n\\tvar updatedUrl, value,\\n\\t\\tfield = this,\\n\\t\\tparams = {};\\n\\n\\t// Detect if field is a select menu or a checkbox\\n\\tif ( \\\"selectedIndex\\\" in field ) {\\n\\t\\tvalue = field.options[ field.selectedIndex ].value || undefined;\\n\\t} else {\\n\\t\\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\\n\\t}\\n\\n\\tparams[ field.name ] = value;\\n\\tupdatedUrl = setUrl( params );\\n\\n\\tif ( \\\"hidepassed\\\" === field.name && \\\"replaceState\\\" in window.history ) {\\n\\t\\tconfig[ field.name ] = value || false;\\n\\t\\tif ( value ) {\\n\\t\\t\\taddClass( id( \\\"qunit-tests\\\" ), \\\"hidepass\\\" );\\n\\t\\t} else {\\n\\t\\t\\tremoveClass( id( \\\"qunit-tests\\\" ), \\\"hidepass\\\" );\\n\\t\\t}\\n\\n\\t\\t// It is not necessary to refresh the whole page\\n\\t\\twindow.history.replaceState( null, \\\"\\\", updatedUrl );\\n\\t} else {\\n\\t\\twindow.location = updatedUrl;\\n\\t}\\n}\\n\\nfunction setUrl( params ) {\\n\\tvar key,\\n\\t\\tquerystring = \\\"?\\\";\\n\\n\\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\\n\\n\\tfor ( key in params ) {\\n\\t\\tif ( hasOwn.call( params, key ) ) {\\n\\t\\t\\tif ( params[ key ] === undefined ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tquerystring += encodeURIComponent( key );\\n\\t\\t\\tif ( params[ key ] !== true ) {\\n\\t\\t\\t\\tquerystring += \\\"=\\\" + encodeURIComponent( params[ key ] );\\n\\t\\t\\t}\\n\\t\\t\\tquerystring += \\\"&\\\";\\n\\t\\t}\\n\\t}\\n\\treturn location.protocol + \\\"//\\\" + location.host +\\n\\t\\tlocation.pathname + querystring.slice( 0, -1 );\\n}\\n\\nfunction applyUrlParams() {\\n\\tvar selectedModule,\\n\\t\\tmodulesList = id( \\\"qunit-modulefilter\\\" ),\\n\\t\\tfilter = id( \\\"qunit-filter-input\\\" ).value;\\n\\n\\tselectedModule = modulesList ?\\n\\t\\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\\n\\t\\tundefined;\\n\\n\\twindow.location = setUrl({\\n\\t\\tmodule: ( selectedModule === \\\"\\\" ) ? undefined : selectedModule,\\n\\t\\tfilter: ( filter === \\\"\\\" ) ? undefined : filter,\\n\\n\\t\\t// Remove testId filter\\n\\t\\ttestId: undefined\\n\\t});\\n}\\n\\nfunction toolbarUrlConfigContainer() {\\n\\tvar urlConfigContainer = document.createElement( \\\"span\\\" );\\n\\n\\turlConfigContainer.innerHTML = getUrlConfigHtml();\\n\\taddClass( urlConfigContainer, \\\"qunit-url-config\\\" );\\n\\n\\t// For oldIE support:\\n\\t// * Add handlers to the individual elements instead of the container\\n\\t// * Use \\\"click\\\" instead of \\\"change\\\" for checkboxes\\n\\taddEvents( urlConfigContainer.getElementsByTagName( \\\"input\\\" ), \\\"click\\\", toolbarChanged );\\n\\taddEvents( urlConfigContainer.getElementsByTagName( \\\"select\\\" ), \\\"change\\\", toolbarChanged );\\n\\n\\treturn urlConfigContainer;\\n}\\n\\nfunction toolbarLooseFilter() {\\n\\tvar filter = document.createElement( \\\"form\\\" ),\\n\\t\\tlabel = document.createElement( \\\"label\\\" ),\\n\\t\\tinput = document.createElement( \\\"input\\\" ),\\n\\t\\tbutton = document.createElement( \\\"button\\\" );\\n\\n\\taddClass( filter, \\\"qunit-filter\\\" );\\n\\n\\tlabel.innerHTML = \\\"Filter: \\\";\\n\\n\\tinput.type = \\\"text\\\";\\n\\tinput.value = config.filter || \\\"\\\";\\n\\tinput.name = \\\"filter\\\";\\n\\tinput.id = \\\"qunit-filter-input\\\";\\n\\n\\tbutton.innerHTML = \\\"Go\\\";\\n\\n\\tlabel.appendChild( input );\\n\\n\\tfilter.appendChild( label );\\n\\tfilter.appendChild( button );\\n\\taddEvent( filter, \\\"submit\\\", function( ev ) {\\n\\t\\tapplyUrlParams();\\n\\n\\t\\tif ( ev && ev.preventDefault ) {\\n\\t\\t\\tev.preventDefault();\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t});\\n\\n\\treturn filter;\\n}\\n\\nfunction toolbarModuleFilterHtml() {\\n\\tvar i,\\n\\t\\tmoduleFilterHtml = \\\"\\\";\\n\\n\\tif ( !modulesList.length ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tmodulesList.sort(function( a, b ) {\\n\\t\\treturn a.localeCompare( b );\\n\\t});\\n\\n\\tmoduleFilterHtml += \\\"<label for='qunit-modulefilter'>Module: </label>\\\" +\\n\\t\\t\\\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \\\" +\\n\\t\\t( QUnit.urlParams.module === undefined ? \\\"selected='selected'\\\" : \\\"\\\" ) +\\n\\t\\t\\\">< All Modules ></option>\\\";\\n\\n\\tfor ( i = 0; i < modulesList.length; i++ ) {\\n\\t\\tmoduleFilterHtml += \\\"<option value='\\\" +\\n\\t\\t\\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \\\"' \\\" +\\n\\t\\t\\t( QUnit.urlParams.module === modulesList[ i ] ? \\\"selected='selected'\\\" : \\\"\\\" ) +\\n\\t\\t\\t\\\">\\\" + escapeText( modulesList[ i ] ) + \\\"</option>\\\";\\n\\t}\\n\\tmoduleFilterHtml += \\\"</select>\\\";\\n\\n\\treturn moduleFilterHtml;\\n}\\n\\nfunction toolbarModuleFilter() {\\n\\tvar toolbar = id( \\\"qunit-testrunner-toolbar\\\" ),\\n\\t\\tmoduleFilter = document.createElement( \\\"span\\\" ),\\n\\t\\tmoduleFilterHtml = toolbarModuleFilterHtml();\\n\\n\\tif ( !toolbar || !moduleFilterHtml ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tmoduleFilter.setAttribute( \\\"id\\\", \\\"qunit-modulefilter-container\\\" );\\n\\tmoduleFilter.innerHTML = moduleFilterHtml;\\n\\n\\taddEvent( moduleFilter.lastChild, \\\"change\\\", applyUrlParams );\\n\\n\\ttoolbar.appendChild( moduleFilter );\\n}\\n\\nfunction appendToolbar() {\\n\\tvar toolbar = id( \\\"qunit-testrunner-toolbar\\\" );\\n\\n\\tif ( toolbar ) {\\n\\t\\ttoolbar.appendChild( toolbarUrlConfigContainer() );\\n\\t\\ttoolbar.appendChild( toolbarLooseFilter() );\\n\\t}\\n}\\n\\nfunction appendHeader() {\\n\\tvar header = id( \\\"qunit-header\\\" );\\n\\n\\tif ( header ) {\\n\\t\\theader.innerHTML = \\\"<a href='\\\" +\\n\\t\\t\\tsetUrl({ filter: undefined, module: undefined, testId: undefined }) +\\n\\t\\t\\t\\\"'>\\\" + header.innerHTML + \\\"</a> \\\";\\n\\t}\\n}\\n\\nfunction appendBanner() {\\n\\tvar banner = id( \\\"qunit-banner\\\" );\\n\\n\\tif ( banner ) {\\n\\t\\tbanner.className = \\\"\\\";\\n\\t}\\n}\\n\\nfunction appendTestResults() {\\n\\tvar tests = id( \\\"qunit-tests\\\" ),\\n\\t\\tresult = id( \\\"qunit-testresult\\\" );\\n\\n\\tif ( result ) {\\n\\t\\tresult.parentNode.removeChild( result );\\n\\t}\\n\\n\\tif ( tests ) {\\n\\t\\ttests.innerHTML = \\\"\\\";\\n\\t\\tresult = document.createElement( \\\"p\\\" );\\n\\t\\tresult.id = \\\"qunit-testresult\\\";\\n\\t\\tresult.className = \\\"result\\\";\\n\\t\\ttests.parentNode.insertBefore( result, tests );\\n\\t\\tresult.innerHTML = \\\"Running...<br />&#160;\\\";\\n\\t}\\n}\\n\\nfunction storeFixture() {\\n\\tvar fixture = id( \\\"qunit-fixture\\\" );\\n\\tif ( fixture ) {\\n\\t\\tconfig.fixture = fixture.innerHTML;\\n\\t}\\n}\\n\\nfunction appendFilteredTest() {\\n\\tvar testId = QUnit.config.testId;\\n\\tif ( !testId || testId.length <= 0 ) {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\treturn \\\"<div id='qunit-filteredTest'>Rerunning selected tests: \\\" + testId.join(\\\", \\\") +\\n\\t\\t\\\" <a id='qunit-clearFilter' href='\\\" +\\n\\t\\tsetUrl({ filter: undefined, module: undefined, testId: undefined }) +\\n\\t\\t\\\"'>\\\" + \\\"Run all tests\\\" + \\\"</a></div>\\\";\\n}\\n\\nfunction appendUserAgent() {\\n\\tvar userAgent = id( \\\"qunit-userAgent\\\" );\\n\\n\\tif ( userAgent ) {\\n\\t\\tuserAgent.innerHTML = \\\"\\\";\\n\\t\\tuserAgent.appendChild(\\n\\t\\t\\tdocument.createTextNode(\\n\\t\\t\\t\\t\\\"QUnit \\\" + QUnit.version + \\\"; \\\" + navigator.userAgent\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n}\\n\\nfunction appendTestsList( modules ) {\\n\\tvar i, l, x, z, test, moduleObj;\\n\\n\\tfor ( i = 0, l = modules.length; i < l; i++ ) {\\n\\t\\tmoduleObj = modules[ i ];\\n\\n\\t\\tif ( moduleObj.name ) {\\n\\t\\t\\tmodulesList.push( moduleObj.name );\\n\\t\\t}\\n\\n\\t\\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\\n\\t\\t\\ttest = moduleObj.tests[ x ];\\n\\n\\t\\t\\tappendTest( test.name, test.testId, moduleObj.name );\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction appendTest( name, testId, moduleName ) {\\n\\tvar title, rerunTrigger, testBlock, assertList,\\n\\t\\ttests = id( \\\"qunit-tests\\\" );\\n\\n\\tif ( !tests ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\ttitle = document.createElement( \\\"strong\\\" );\\n\\ttitle.innerHTML = getNameHtml( name, moduleName );\\n\\n\\trerunTrigger = document.createElement( \\\"a\\\" );\\n\\trerunTrigger.innerHTML = \\\"Rerun\\\";\\n\\trerunTrigger.href = setUrl({ testId: testId });\\n\\n\\ttestBlock = document.createElement( \\\"li\\\" );\\n\\ttestBlock.appendChild( title );\\n\\ttestBlock.appendChild( rerunTrigger );\\n\\ttestBlock.id = \\\"qunit-test-output-\\\" + testId;\\n\\n\\tassertList = document.createElement( \\\"ol\\\" );\\n\\tassertList.className = \\\"qunit-assert-list\\\";\\n\\n\\ttestBlock.appendChild( assertList );\\n\\n\\ttests.appendChild( testBlock );\\n}\\n\\n// HTML Reporter initialization and load\\nQUnit.begin(function( details ) {\\n\\tvar qunit = id( \\\"qunit\\\" );\\n\\n\\t// Fixture is the only one necessary to run without the #qunit element\\n\\tstoreFixture();\\n\\n\\tif ( qunit ) {\\n\\t\\tqunit.innerHTML =\\n\\t\\t\\t\\\"<h1 id='qunit-header'>\\\" + escapeText( document.title ) + \\\"</h1>\\\" +\\n\\t\\t\\t\\\"<h2 id='qunit-banner'></h2>\\\" +\\n\\t\\t\\t\\\"<div id='qunit-testrunner-toolbar'></div>\\\" +\\n\\t\\t\\tappendFilteredTest() +\\n\\t\\t\\t\\\"<h2 id='qunit-userAgent'></h2>\\\" +\\n\\t\\t\\t\\\"<ol id='qunit-tests'></ol>\\\";\\n\\t}\\n\\n\\tappendHeader();\\n\\tappendBanner();\\n\\tappendTestResults();\\n\\tappendUserAgent();\\n\\tappendToolbar();\\n\\tappendTestsList( details.modules );\\n\\ttoolbarModuleFilter();\\n\\n\\tif ( qunit && config.hidepassed ) {\\n\\t\\taddClass( qunit.lastChild, \\\"hidepass\\\" );\\n\\t}\\n});\\n\\nQUnit.done(function( details ) {\\n\\tvar i, key,\\n\\t\\tbanner = id( \\\"qunit-banner\\\" ),\\n\\t\\ttests = id( \\\"qunit-tests\\\" ),\\n\\t\\thtml = [\\n\\t\\t\\t\\\"Tests completed in \\\",\\n\\t\\t\\tdetails.runtime,\\n\\t\\t\\t\\\" milliseconds.<br />\\\",\\n\\t\\t\\t\\\"<span class='passed'>\\\",\\n\\t\\t\\tdetails.passed,\\n\\t\\t\\t\\\"</span> assertions of <span class='total'>\\\",\\n\\t\\t\\tdetails.total,\\n\\t\\t\\t\\\"</span> passed, <span class='failed'>\\\",\\n\\t\\t\\tdetails.failed,\\n\\t\\t\\t\\\"</span> failed.\\\"\\n\\t\\t].join( \\\"\\\" );\\n\\n\\tif ( banner ) {\\n\\t\\tbanner.className = details.failed ? \\\"qunit-fail\\\" : \\\"qunit-pass\\\";\\n\\t}\\n\\n\\tif ( tests ) {\\n\\t\\tid( \\\"qunit-testresult\\\" ).innerHTML = html;\\n\\t}\\n\\n\\tif ( config.altertitle && defined.document && document.title ) {\\n\\n\\t\\t// show ✖ for good, ✔ for bad suite result in title\\n\\t\\t// use escape sequences in case file gets loaded with non-utf-8-charset\\n\\t\\tdocument.title = [\\n\\t\\t\\t( details.failed ? \\\"\\\\u2716\\\" : \\\"\\\\u2714\\\" ),\\n\\t\\t\\tdocument.title.replace( /^[\\\\u2714\\\\u2716] /i, \\\"\\\" )\\n\\t\\t].join( \\\" \\\" );\\n\\t}\\n\\n\\t// clear own sessionStorage items if all tests passed\\n\\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\\n\\t\\tfor ( i = 0; i < sessionStorage.length; i++ ) {\\n\\t\\t\\tkey = sessionStorage.key( i++ );\\n\\t\\t\\tif ( key.indexOf( \\\"qunit-test-\\\" ) === 0 ) {\\n\\t\\t\\t\\tsessionStorage.removeItem( key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// scroll back to top to show results\\n\\tif ( config.scrolltop && window.scrollTo ) {\\n\\t\\twindow.scrollTo( 0, 0 );\\n\\t}\\n});\\n\\nfunction getNameHtml( name, module ) {\\n\\tvar nameHtml = \\\"\\\";\\n\\n\\tif ( module ) {\\n\\t\\tnameHtml = \\\"<span class='module-name'>\\\" + escapeText( module ) + \\\"</span>: \\\";\\n\\t}\\n\\n\\tnameHtml += \\\"<span class='test-name'>\\\" + escapeText( name ) + \\\"</span>\\\";\\n\\n\\treturn nameHtml;\\n}\\n\\nQUnit.testStart(function( details ) {\\n\\tvar running, testBlock, bad;\\n\\n\\ttestBlock = id( \\\"qunit-test-output-\\\" + details.testId );\\n\\tif ( testBlock ) {\\n\\t\\ttestBlock.className = \\\"running\\\";\\n\\t} else {\\n\\n\\t\\t// Report later registered tests\\n\\t\\tappendTest( details.name, details.testId, details.module );\\n\\t}\\n\\n\\trunning = id( \\\"qunit-testresult\\\" );\\n\\tif ( running ) {\\n\\t\\tbad = QUnit.config.reorder && defined.sessionStorage &&\\n\\t\\t\\t+sessionStorage.getItem( \\\"qunit-test-\\\" + details.module + \\\"-\\\" + details.name );\\n\\n\\t\\trunning.innerHTML = ( bad ?\\n\\t\\t\\t\\\"Rerunning previously failed test: <br />\\\" :\\n\\t\\t\\t\\\"Running: <br />\\\" ) +\\n\\t\\t\\tgetNameHtml( details.name, details.module );\\n\\t}\\n\\n});\\n\\nfunction stripHtml( string ) {\\n\\t// strip tags, html entity and whitespaces\\n\\treturn string.replace(/<\\\\/?[^>]+(>|$)/g, \\\"\\\").replace(/\\\\&quot;/g, \\\"\\\").replace(/\\\\s+/g, \\\"\\\");\\n}\\n\\nQUnit.log(function( details ) {\\n\\tvar assertList, assertLi,\\n\\t\\tmessage, expected, actual, diff,\\n\\t\\tshowDiff = false,\\n\\t\\ttestItem = id( \\\"qunit-test-output-\\\" + details.testId );\\n\\n\\tif ( !testItem ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tmessage = escapeText( details.message ) || ( details.result ? \\\"okay\\\" : \\\"failed\\\" );\\n\\tmessage = \\\"<span class='test-message'>\\\" + message + \\\"</span>\\\";\\n\\tmessage += \\\"<span class='runtime'>@ \\\" + details.runtime + \\\" ms</span>\\\";\\n\\n\\t// pushFailure doesn't provide details.expected\\n\\t// when it calls, it's implicit to also not show expected and diff stuff\\n\\t// Also, we need to check details.expected existence, as it can exist and be undefined\\n\\tif ( !details.result && hasOwn.call( details, \\\"expected\\\" ) ) {\\n\\t\\tif ( details.negative ) {\\n\\t\\t\\texpected = escapeText( \\\"NOT \\\" + QUnit.dump.parse( details.expected ) );\\n\\t\\t} else {\\n\\t\\t\\texpected = escapeText( QUnit.dump.parse( details.expected ) );\\n\\t\\t}\\n\\n\\t\\tactual = escapeText( QUnit.dump.parse( details.actual ) );\\n\\t\\tmessage += \\\"<table><tr class='test-expected'><th>Expected: </th><td><pre>\\\" +\\n\\t\\t\\texpected +\\n\\t\\t\\t\\\"</pre></td></tr>\\\";\\n\\n\\t\\tif ( actual !== expected ) {\\n\\n\\t\\t\\tmessage += \\\"<tr class='test-actual'><th>Result: </th><td><pre>\\\" +\\n\\t\\t\\t\\tactual + \\\"</pre></td></tr>\\\";\\n\\n\\t\\t\\t// Don't show diff if actual or expected are booleans\\n\\t\\t\\tif ( !( /^(true|false)$/.test( actual ) ) &&\\n\\t\\t\\t\\t\\t!( /^(true|false)$/.test( expected ) ) ) {\\n\\t\\t\\t\\tdiff = QUnit.diff( expected, actual );\\n\\t\\t\\t\\tshowDiff = stripHtml( diff ).length !==\\n\\t\\t\\t\\t\\tstripHtml( expected ).length +\\n\\t\\t\\t\\t\\tstripHtml( actual ).length;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Don't show diff if expected and actual are totally different\\n\\t\\t\\tif ( showDiff ) {\\n\\t\\t\\t\\tmessage += \\\"<tr class='test-diff'><th>Diff: </th><td><pre>\\\" +\\n\\t\\t\\t\\t\\tdiff + \\\"</pre></td></tr>\\\";\\n\\t\\t\\t}\\n\\t\\t} else if ( expected.indexOf( \\\"[object Array]\\\" ) !== -1 ||\\n\\t\\t\\t\\texpected.indexOf( \\\"[object Object]\\\" ) !== -1 ) {\\n\\t\\t\\tmessage += \\\"<tr class='test-message'><th>Message: </th><td>\\\" +\\n\\t\\t\\t\\t\\\"Diff suppressed as the depth of object is more than current max depth (\\\" +\\n\\t\\t\\t\\tQUnit.config.maxDepth + \\\").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \\\" +\\n\\t\\t\\t\\t\\\" run with a higher max depth or <a href='\\\" + setUrl({ maxDepth: -1 }) + \\\"'>\\\" +\\n\\t\\t\\t\\t\\\"Rerun</a> without max depth.</p></td></tr>\\\";\\n\\t\\t}\\n\\n\\t\\tif ( details.source ) {\\n\\t\\t\\tmessage += \\\"<tr class='test-source'><th>Source: </th><td><pre>\\\" +\\n\\t\\t\\t\\tescapeText( details.source ) + \\\"</pre></td></tr>\\\";\\n\\t\\t}\\n\\n\\t\\tmessage += \\\"</table>\\\";\\n\\n\\t// this occours when pushFailure is set and we have an extracted stack trace\\n\\t} else if ( !details.result && details.source ) {\\n\\t\\tmessage += \\\"<table>\\\" +\\n\\t\\t\\t\\\"<tr class='test-source'><th>Source: </th><td><pre>\\\" +\\n\\t\\t\\tescapeText( details.source ) + \\\"</pre></td></tr>\\\" +\\n\\t\\t\\t\\\"</table>\\\";\\n\\t}\\n\\n\\tassertList = testItem.getElementsByTagName( \\\"ol\\\" )[ 0 ];\\n\\n\\tassertLi = document.createElement( \\\"li\\\" );\\n\\tassertLi.className = details.result ? \\\"pass\\\" : \\\"fail\\\";\\n\\tassertLi.innerHTML = message;\\n\\tassertList.appendChild( assertLi );\\n});\\n\\nQUnit.testDone(function( details ) {\\n\\tvar testTitle, time, testItem, assertList,\\n\\t\\tgood, bad, testCounts, skipped, sourceName,\\n\\t\\ttests = id( \\\"qunit-tests\\\" );\\n\\n\\tif ( !tests ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\ttestItem = id( \\\"qunit-test-output-\\\" + details.testId );\\n\\n\\tassertList = testItem.getElementsByTagName( \\\"ol\\\" )[ 0 ];\\n\\n\\tgood = details.passed;\\n\\tbad = details.failed;\\n\\n\\t// store result when possible\\n\\tif ( config.reorder && defined.sessionStorage ) {\\n\\t\\tif ( bad ) {\\n\\t\\t\\tsessionStorage.setItem( \\\"qunit-test-\\\" + details.module + \\\"-\\\" + details.name, bad );\\n\\t\\t} else {\\n\\t\\t\\tsessionStorage.removeItem( \\\"qunit-test-\\\" + details.module + \\\"-\\\" + details.name );\\n\\t\\t}\\n\\t}\\n\\n\\tif ( bad === 0 ) {\\n\\n\\t\\t// Collapse the passing tests\\n\\t\\taddClass( assertList, \\\"qunit-collapsed\\\" );\\n\\t} else if ( bad && config.collapse && !collapseNext ) {\\n\\n\\t\\t// Skip collapsing the first failing test\\n\\t\\tcollapseNext = true;\\n\\t} else {\\n\\n\\t\\t// Collapse remaining tests\\n\\t\\taddClass( assertList, \\\"qunit-collapsed\\\" );\\n\\t}\\n\\n\\t// testItem.firstChild is the test name\\n\\ttestTitle = testItem.firstChild;\\n\\n\\ttestCounts = bad ?\\n\\t\\t\\\"<b class='failed'>\\\" + bad + \\\"</b>, \\\" + \\\"<b class='passed'>\\\" + good + \\\"</b>, \\\" :\\n\\t\\t\\\"\\\";\\n\\n\\ttestTitle.innerHTML += \\\" <b class='counts'>(\\\" + testCounts +\\n\\t\\tdetails.assertions.length + \\\")</b>\\\";\\n\\n\\tif ( details.skipped ) {\\n\\t\\ttestItem.className = \\\"skipped\\\";\\n\\t\\tskipped = document.createElement( \\\"em\\\" );\\n\\t\\tskipped.className = \\\"qunit-skipped-label\\\";\\n\\t\\tskipped.innerHTML = \\\"skipped\\\";\\n\\t\\ttestItem.insertBefore( skipped, testTitle );\\n\\t} else {\\n\\t\\taddEvent( testTitle, \\\"click\\\", function() {\\n\\t\\t\\ttoggleClass( assertList, \\\"qunit-collapsed\\\" );\\n\\t\\t});\\n\\n\\t\\ttestItem.className = bad ? \\\"fail\\\" : \\\"pass\\\";\\n\\n\\t\\ttime = document.createElement( \\\"span\\\" );\\n\\t\\ttime.className = \\\"runtime\\\";\\n\\t\\ttime.innerHTML = details.runtime + \\\" ms\\\";\\n\\t\\ttestItem.insertBefore( time, assertList );\\n\\t}\\n\\n\\t// Show the source of the test when showing assertions\\n\\tif ( details.source ) {\\n\\t\\tsourceName = document.createElement( \\\"p\\\" );\\n\\t\\tsourceName.innerHTML = \\\"<strong>Source: </strong>\\\" + details.source;\\n\\t\\taddClass( sourceName, \\\"qunit-source\\\" );\\n\\t\\tif ( bad === 0 ) {\\n\\t\\t\\taddClass( sourceName, \\\"qunit-collapsed\\\" );\\n\\t\\t}\\n\\t\\taddEvent( testTitle, \\\"click\\\", function() {\\n\\t\\t\\ttoggleClass( sourceName, \\\"qunit-collapsed\\\" );\\n\\t\\t});\\n\\t\\ttestItem.appendChild( sourceName );\\n\\t}\\n});\\n\\nif ( defined.document ) {\\n\\n\\t// Avoid readyState issue with phantomjs\\n\\t// Ref: #818\\n\\tvar notPhantom = ( function( p ) {\\n\\t\\treturn !( p && p.version && p.version.major > 0 );\\n\\t} )( window.phantom );\\n\\n\\tif ( notPhantom && document.readyState === \\\"complete\\\" ) {\\n\\t\\tQUnit.load();\\n\\t} else {\\n\\t\\taddEvent( window, \\\"load\\\", QUnit.load );\\n\\t}\\n} else {\\n\\tconfig.pageLoaded = true;\\n\\tconfig.autorun = true;\\n}\\n\\n})();\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }\n/******/ ]);\n/*!\n * Bootstrap v4.0.0-alpha.4 (http://getbootstrap.com)\n * Copyright 2011-2016 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\nif (typeof jQuery === 'undefined') {\n  throw new Error('Bootstrap\\'s JavaScript requires jQuery')\n}\n\n+function ($) {\n  var version = $.fn.jquery.split(' ')[0].split('.')\n  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] >= 4)) {\n    throw new Error('Bootstrap\\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0')\n  }\n}(jQuery);\n\n\n+function ($) {\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): util.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n'use strict';\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Util = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Private TransitionEnd Helpers\n   * ------------------------------------------------------------------------\n   */\n\n  var transition = false;\n\n  var MAX_UID = 1000000;\n\n  var TransitionEndEvent = {\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'transitionend',\n    OTransition: 'oTransitionEnd otransitionend',\n    transition: 'transitionend'\n  };\n\n  // shoutout AngusCroll (https://goo.gl/pxwQGp)\n  function toType(obj) {\n    return ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n  }\n\n  function isElement(obj) {\n    return (obj[0] || obj).nodeType;\n  }\n\n  function getSpecialTransitionEndEvent() {\n    return {\n      bindType: transition.end,\n      delegateType: transition.end,\n      handle: function handle(event) {\n        if ($(event.target).is(this)) {\n          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params\n        }\n        return undefined;\n      }\n    };\n  }\n\n  function transitionEndTest() {\n    if (window.QUnit) {\n      return false;\n    }\n\n    var el = document.createElement('bootstrap');\n\n    for (var _name in TransitionEndEvent) {\n      if (el.style[_name] !== undefined) {\n        return { end: TransitionEndEvent[_name] };\n      }\n    }\n\n    return false;\n  }\n\n  function transitionEndEmulator(duration) {\n    var _this = this;\n\n    var called = false;\n\n    $(this).one(Util.TRANSITION_END, function () {\n      called = true;\n    });\n\n    setTimeout(function () {\n      if (!called) {\n        Util.triggerTransitionEnd(_this);\n      }\n    }, duration);\n\n    return this;\n  }\n\n  function setTransitionEndSupport() {\n    transition = transitionEndTest();\n\n    $.fn.emulateTransitionEnd = transitionEndEmulator;\n\n    if (Util.supportsTransitionEnd()) {\n      $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\n    }\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n  var Util = {\n\n    TRANSITION_END: 'bsTransitionEnd',\n\n    getUID: function getUID(prefix) {\n      do {\n        /* eslint-disable no-bitwise */\n        prefix += ~ ~(Math.random() * MAX_UID); // \"~~\" acts like a faster Math.floor() here\n        /* eslint-enable no-bitwise */\n      } while (document.getElementById(prefix));\n      return prefix;\n    },\n\n    getSelectorFromElement: function getSelectorFromElement(element) {\n      var selector = element.getAttribute('data-target');\n\n      if (!selector) {\n        selector = element.getAttribute('href') || '';\n        selector = /^#[a-z]/i.test(selector) ? selector : null;\n      }\n\n      return selector;\n    },\n\n    reflow: function reflow(element) {\n      new Function('bs', 'return bs')(element.offsetHeight);\n    },\n\n    triggerTransitionEnd: function triggerTransitionEnd(element) {\n      $(element).trigger(transition.end);\n    },\n\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(transition);\n    },\n\n    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {\n      for (var property in configTypes) {\n        if (configTypes.hasOwnProperty(property)) {\n          var expectedTypes = configTypes[property];\n          var value = config[property];\n          var valueType = undefined;\n\n          if (value && isElement(value)) {\n            valueType = 'element';\n          } else {\n            valueType = toType(value);\n          }\n\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new Error(componentName.toUpperCase() + ': ' + ('Option \"' + property + '\" provided type \"' + valueType + '\" ') + ('but expected type \"' + expectedTypes + '\".'));\n          }\n        }\n      }\n    }\n  };\n\n  setTransitionEndSupport();\n\n  return Util;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Alert = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'alert';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.alert';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 150;\n\n  var Selector = {\n    DISMISS: '[data-dismiss=\"alert\"]'\n  };\n\n  var Event = {\n    CLOSE: 'close' + EVENT_KEY,\n    CLOSED: 'closed' + EVENT_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    ALERT: 'alert',\n    FADE: 'fade',\n    IN: 'in'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Alert = (function () {\n    function Alert(element) {\n      _classCallCheck(this, Alert);\n\n      this._element = element;\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Alert, [{\n      key: 'close',\n\n      // public\n\n      value: function close(element) {\n        element = element || this._element;\n\n        var rootElement = this._getRootElement(element);\n        var customEvent = this._triggerCloseEvent(rootElement);\n\n        if (customEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        this._removeElement(rootElement);\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n        this._element = null;\n      }\n\n      // private\n\n    }, {\n      key: '_getRootElement',\n      value: function _getRootElement(element) {\n        var selector = Util.getSelectorFromElement(element);\n        var parent = false;\n\n        if (selector) {\n          parent = $(selector)[0];\n        }\n\n        if (!parent) {\n          parent = $(element).closest('.' + ClassName.ALERT)[0];\n        }\n\n        return parent;\n      }\n    }, {\n      key: '_triggerCloseEvent',\n      value: function _triggerCloseEvent(element) {\n        var closeEvent = $.Event(Event.CLOSE);\n\n        $(element).trigger(closeEvent);\n        return closeEvent;\n      }\n    }, {\n      key: '_removeElement',\n      value: function _removeElement(element) {\n        $(element).removeClass(ClassName.IN);\n\n        if (!Util.supportsTransitionEnd() || !$(element).hasClass(ClassName.FADE)) {\n          this._destroyElement(element);\n          return;\n        }\n\n        $(element).one(Util.TRANSITION_END, $.proxy(this._destroyElement, this, element)).emulateTransitionEnd(TRANSITION_DURATION);\n      }\n    }, {\n      key: '_destroyElement',\n      value: function _destroyElement(element) {\n        $(element).detach().trigger(Event.CLOSED).remove();\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var $element = $(this);\n          var data = $element.data(DATA_KEY);\n\n          if (!data) {\n            data = new Alert(this);\n            $element.data(DATA_KEY, data);\n          }\n\n          if (config === 'close') {\n            data[config](this);\n          }\n        });\n      }\n    }, {\n      key: '_handleDismiss',\n      value: function _handleDismiss(alertInstance) {\n        return function (event) {\n          if (event) {\n            event.preventDefault();\n          }\n\n          alertInstance.close(this);\n        };\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }]);\n\n    return Alert;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Alert._jQueryInterface;\n  $.fn[NAME].Constructor = Alert;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Alert._jQueryInterface;\n  };\n\n  return Alert;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Button = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'button';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.button';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n\n  var ClassName = {\n    ACTIVE: 'active',\n    BUTTON: 'btn',\n    FOCUS: 'focus'\n  };\n\n  var Selector = {\n    DATA_TOGGLE_CARROT: '[data-toggle^=\"button\"]',\n    DATA_TOGGLE: '[data-toggle=\"buttons\"]',\n    INPUT: 'input',\n    ACTIVE: '.active',\n    BUTTON: '.btn'\n  };\n\n  var Event = {\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,\n    FOCUS_BLUR_DATA_API: 'focus' + EVENT_KEY + DATA_API_KEY + ' ' + ('blur' + EVENT_KEY + DATA_API_KEY)\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Button = (function () {\n    function Button(element) {\n      _classCallCheck(this, Button);\n\n      this._element = element;\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Button, [{\n      key: 'toggle',\n\n      // public\n\n      value: function toggle() {\n        var triggerChangeEvent = true;\n        var rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];\n\n        if (rootElement) {\n          var input = $(this._element).find(Selector.INPUT)[0];\n\n          if (input) {\n            if (input.type === 'radio') {\n              if (input.checked && $(this._element).hasClass(ClassName.ACTIVE)) {\n                triggerChangeEvent = false;\n              } else {\n                var activeElement = $(rootElement).find(Selector.ACTIVE)[0];\n\n                if (activeElement) {\n                  $(activeElement).removeClass(ClassName.ACTIVE);\n                }\n              }\n            }\n\n            if (triggerChangeEvent) {\n              input.checked = !$(this._element).hasClass(ClassName.ACTIVE);\n              $(this._element).trigger('change');\n            }\n\n            input.focus();\n          }\n        } else {\n          this._element.setAttribute('aria-pressed', !$(this._element).hasClass(ClassName.ACTIVE));\n        }\n\n        if (triggerChangeEvent) {\n          $(this._element).toggleClass(ClassName.ACTIVE);\n        }\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n        this._element = null;\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          if (!data) {\n            data = new Button(this);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'toggle') {\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }]);\n\n    return Button;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\n    event.preventDefault();\n\n    var button = event.target;\n\n    if (!$(button).hasClass(ClassName.BUTTON)) {\n      button = $(button).closest(Selector.BUTTON);\n    }\n\n    Button._jQueryInterface.call($(button), 'toggle');\n  }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\n    var button = $(event.target).closest(Selector.BUTTON)[0];\n    $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Button._jQueryInterface;\n  $.fn[NAME].Constructor = Button;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Button._jQueryInterface;\n  };\n\n  return Button;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Carousel = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'carousel';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.carousel';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 600;\n  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key\n  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key\n\n  var Default = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true\n  };\n\n  var DefaultType = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean'\n  };\n\n  var Direction = {\n    NEXT: 'next',\n    PREVIOUS: 'prev'\n  };\n\n  var Event = {\n    SLIDE: 'slide' + EVENT_KEY,\n    SLID: 'slid' + EVENT_KEY,\n    KEYDOWN: 'keydown' + EVENT_KEY,\n    MOUSEENTER: 'mouseenter' + EVENT_KEY,\n    MOUSELEAVE: 'mouseleave' + EVENT_KEY,\n    LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    CAROUSEL: 'carousel',\n    ACTIVE: 'active',\n    SLIDE: 'slide',\n    RIGHT: 'right',\n    LEFT: 'left',\n    ITEM: 'carousel-item'\n  };\n\n  var Selector = {\n    ACTIVE: '.active',\n    ACTIVE_ITEM: '.active.carousel-item',\n    ITEM: '.carousel-item',\n    NEXT_PREV: '.next, .prev',\n    INDICATORS: '.carousel-indicators',\n    DATA_SLIDE: '[data-slide], [data-slide-to]',\n    DATA_RIDE: '[data-ride=\"carousel\"]'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Carousel = (function () {\n    function Carousel(element, config) {\n      _classCallCheck(this, Carousel);\n\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n\n      this._isPaused = false;\n      this._isSliding = false;\n\n      this._config = this._getConfig(config);\n      this._element = $(element)[0];\n      this._indicatorsElement = $(this._element).find(Selector.INDICATORS)[0];\n\n      this._addEventListeners();\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Carousel, [{\n      key: 'next',\n\n      // public\n\n      value: function next() {\n        if (!this._isSliding) {\n          this._slide(Direction.NEXT);\n        }\n      }\n    }, {\n      key: 'nextWhenVisible',\n      value: function nextWhenVisible() {\n        // Don't call next when the page isn't visible\n        if (!document.hidden) {\n          this.next();\n        }\n      }\n    }, {\n      key: 'prev',\n      value: function prev() {\n        if (!this._isSliding) {\n          this._slide(Direction.PREVIOUS);\n        }\n      }\n    }, {\n      key: 'pause',\n      value: function pause(event) {\n        if (!event) {\n          this._isPaused = true;\n        }\n\n        if ($(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {\n          Util.triggerTransitionEnd(this._element);\n          this.cycle(true);\n        }\n\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n    }, {\n      key: 'cycle',\n      value: function cycle(event) {\n        if (!event) {\n          this._isPaused = false;\n        }\n\n        if (this._interval) {\n          clearInterval(this._interval);\n          this._interval = null;\n        }\n\n        if (this._config.interval && !this._isPaused) {\n          this._interval = setInterval($.proxy(document.visibilityState ? this.nextWhenVisible : this.next, this), this._config.interval);\n        }\n      }\n    }, {\n      key: 'to',\n      value: function to(index) {\n        var _this2 = this;\n\n        this._activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];\n\n        var activeIndex = this._getItemIndex(this._activeElement);\n\n        if (index > this._items.length - 1 || index < 0) {\n          return;\n        }\n\n        if (this._isSliding) {\n          $(this._element).one(Event.SLID, function () {\n            return _this2.to(index);\n          });\n          return;\n        }\n\n        if (activeIndex === index) {\n          this.pause();\n          this.cycle();\n          return;\n        }\n\n        var direction = index > activeIndex ? Direction.NEXT : Direction.PREVIOUS;\n\n        this._slide(direction, this._items[index]);\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $(this._element).off(EVENT_KEY);\n        $.removeData(this._element, DATA_KEY);\n\n        this._items = null;\n        this._config = null;\n        this._element = null;\n        this._interval = null;\n        this._isPaused = null;\n        this._isSliding = null;\n        this._activeElement = null;\n        this._indicatorsElement = null;\n      }\n\n      // private\n\n    }, {\n      key: '_getConfig',\n      value: function _getConfig(config) {\n        config = $.extend({}, Default, config);\n        Util.typeCheckConfig(NAME, config, DefaultType);\n        return config;\n      }\n    }, {\n      key: '_addEventListeners',\n      value: function _addEventListeners() {\n        if (this._config.keyboard) {\n          $(this._element).on(Event.KEYDOWN, $.proxy(this._keydown, this));\n        }\n\n        if (this._config.pause === 'hover' && !('ontouchstart' in document.documentElement)) {\n          $(this._element).on(Event.MOUSEENTER, $.proxy(this.pause, this)).on(Event.MOUSELEAVE, $.proxy(this.cycle, this));\n        }\n      }\n    }, {\n      key: '_keydown',\n      value: function _keydown(event) {\n        event.preventDefault();\n\n        if (/input|textarea/i.test(event.target.tagName)) {\n          return;\n        }\n\n        switch (event.which) {\n          case ARROW_LEFT_KEYCODE:\n            this.prev();\n            break;\n          case ARROW_RIGHT_KEYCODE:\n            this.next();\n            break;\n          default:\n            return;\n        }\n      }\n    }, {\n      key: '_getItemIndex',\n      value: function _getItemIndex(element) {\n        this._items = $.makeArray($(element).parent().find(Selector.ITEM));\n        return this._items.indexOf(element);\n      }\n    }, {\n      key: '_getItemByDirection',\n      value: function _getItemByDirection(direction, activeElement) {\n        var isNextDirection = direction === Direction.NEXT;\n        var isPrevDirection = direction === Direction.PREVIOUS;\n        var activeIndex = this._getItemIndex(activeElement);\n        var lastItemIndex = this._items.length - 1;\n        var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n\n        if (isGoingToWrap && !this._config.wrap) {\n          return activeElement;\n        }\n\n        var delta = direction === Direction.PREVIOUS ? -1 : 1;\n        var itemIndex = (activeIndex + delta) % this._items.length;\n\n        return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n      }\n    }, {\n      key: '_triggerSlideEvent',\n      value: function _triggerSlideEvent(relatedTarget, directionalClassname) {\n        var slideEvent = $.Event(Event.SLIDE, {\n          relatedTarget: relatedTarget,\n          direction: directionalClassname\n        });\n\n        $(this._element).trigger(slideEvent);\n\n        return slideEvent;\n      }\n    }, {\n      key: '_setActiveIndicatorElement',\n      value: function _setActiveIndicatorElement(element) {\n        if (this._indicatorsElement) {\n          $(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);\n\n          var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n\n          if (nextIndicator) {\n            $(nextIndicator).addClass(ClassName.ACTIVE);\n          }\n        }\n      }\n    }, {\n      key: '_slide',\n      value: function _slide(direction, element) {\n        var _this3 = this;\n\n        var activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];\n        var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n\n        var isCycling = Boolean(this._interval);\n\n        var directionalClassName = direction === Direction.NEXT ? ClassName.LEFT : ClassName.RIGHT;\n\n        if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {\n          this._isSliding = false;\n          return;\n        }\n\n        var slideEvent = this._triggerSlideEvent(nextElement, directionalClassName);\n        if (slideEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        if (!activeElement || !nextElement) {\n          // some weirdness is happening, so we bail\n          return;\n        }\n\n        this._isSliding = true;\n\n        if (isCycling) {\n          this.pause();\n        }\n\n        this._setActiveIndicatorElement(nextElement);\n\n        var slidEvent = $.Event(Event.SLID, {\n          relatedTarget: nextElement,\n          direction: directionalClassName\n        });\n\n        if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.SLIDE)) {\n\n          $(nextElement).addClass(direction);\n\n          Util.reflow(nextElement);\n\n          $(activeElement).addClass(directionalClassName);\n          $(nextElement).addClass(directionalClassName);\n\n          $(activeElement).one(Util.TRANSITION_END, function () {\n            $(nextElement).removeClass(directionalClassName).removeClass(direction);\n\n            $(nextElement).addClass(ClassName.ACTIVE);\n\n            $(activeElement).removeClass(ClassName.ACTIVE).removeClass(direction).removeClass(directionalClassName);\n\n            _this3._isSliding = false;\n\n            setTimeout(function () {\n              return $(_this3._element).trigger(slidEvent);\n            }, 0);\n          }).emulateTransitionEnd(TRANSITION_DURATION);\n        } else {\n          $(activeElement).removeClass(ClassName.ACTIVE);\n          $(nextElement).addClass(ClassName.ACTIVE);\n\n          this._isSliding = false;\n          $(this._element).trigger(slidEvent);\n        }\n\n        if (isCycling) {\n          this.cycle();\n        }\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n          var _config = $.extend({}, Default, $(this).data());\n\n          if (typeof config === 'object') {\n            $.extend(_config, config);\n          }\n\n          var action = typeof config === 'string' ? config : _config.slide;\n\n          if (!data) {\n            data = new Carousel(this, _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'number') {\n            data.to(config);\n          } else if (typeof action === 'string') {\n            if (data[action] === undefined) {\n              throw new Error('No method named \"' + action + '\"');\n            }\n            data[action]();\n          } else if (_config.interval) {\n            data.pause();\n            data.cycle();\n          }\n        });\n      }\n    }, {\n      key: '_dataApiClickHandler',\n      value: function _dataApiClickHandler(event) {\n        var selector = Util.getSelectorFromElement(this);\n\n        if (!selector) {\n          return;\n        }\n\n        var target = $(selector)[0];\n\n        if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {\n          return;\n        }\n\n        var config = $.extend({}, $(target).data(), $(this).data());\n        var slideIndex = this.getAttribute('data-slide-to');\n\n        if (slideIndex) {\n          config.interval = false;\n        }\n\n        Carousel._jQueryInterface.call($(target), config);\n\n        if (slideIndex) {\n          $(target).data(DATA_KEY).to(slideIndex);\n        }\n\n        event.preventDefault();\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Carousel;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);\n\n  $(window).on(Event.LOAD_DATA_API, function () {\n    $(Selector.DATA_RIDE).each(function () {\n      var $carousel = $(this);\n      Carousel._jQueryInterface.call($carousel, $carousel.data());\n    });\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Carousel._jQueryInterface;\n  $.fn[NAME].Constructor = Carousel;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Carousel._jQueryInterface;\n  };\n\n  return Carousel;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Collapse = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'collapse';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.collapse';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 600;\n\n  var Default = {\n    toggle: true,\n    parent: ''\n  };\n\n  var DefaultType = {\n    toggle: 'boolean',\n    parent: 'string'\n  };\n\n  var Event = {\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    IN: 'in',\n    COLLAPSE: 'collapse',\n    COLLAPSING: 'collapsing',\n    COLLAPSED: 'collapsed'\n  };\n\n  var Dimension = {\n    WIDTH: 'width',\n    HEIGHT: 'height'\n  };\n\n  var Selector = {\n    ACTIVES: '.panel > .in, .panel > .collapsing',\n    DATA_TOGGLE: '[data-toggle=\"collapse\"]'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Collapse = (function () {\n    function Collapse(element, config) {\n      _classCallCheck(this, Collapse);\n\n      this._isTransitioning = false;\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._triggerArray = $.makeArray($('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' + ('[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')));\n\n      this._parent = this._config.parent ? this._getParent() : null;\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Collapse, [{\n      key: 'toggle',\n\n      // public\n\n      value: function toggle() {\n        if ($(this._element).hasClass(ClassName.IN)) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n    }, {\n      key: 'show',\n      value: function show() {\n        var _this4 = this;\n\n        if (this._isTransitioning || $(this._element).hasClass(ClassName.IN)) {\n          return;\n        }\n\n        var actives = undefined;\n        var activesData = undefined;\n\n        if (this._parent) {\n          actives = $.makeArray($(Selector.ACTIVES));\n          if (!actives.length) {\n            actives = null;\n          }\n        }\n\n        if (actives) {\n          activesData = $(actives).data(DATA_KEY);\n          if (activesData && activesData._isTransitioning) {\n            return;\n          }\n        }\n\n        var startEvent = $.Event(Event.SHOW);\n        $(this._element).trigger(startEvent);\n        if (startEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        if (actives) {\n          Collapse._jQueryInterface.call($(actives), 'hide');\n          if (!activesData) {\n            $(actives).data(DATA_KEY, null);\n          }\n        }\n\n        var dimension = this._getDimension();\n\n        $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\n\n        this._element.style[dimension] = 0;\n        this._element.setAttribute('aria-expanded', true);\n\n        if (this._triggerArray.length) {\n          $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\n        }\n\n        this.setTransitioning(true);\n\n        var complete = function complete() {\n          $(_this4._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.IN);\n\n          _this4._element.style[dimension] = '';\n\n          _this4.setTransitioning(false);\n\n          $(_this4._element).trigger(Event.SHOWN);\n        };\n\n        if (!Util.supportsTransitionEnd()) {\n          complete();\n          return;\n        }\n\n        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n        var scrollSize = 'scroll' + capitalizedDimension;\n\n        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n\n        this._element.style[dimension] = this._element[scrollSize] + 'px';\n      }\n    }, {\n      key: 'hide',\n      value: function hide() {\n        var _this5 = this;\n\n        if (this._isTransitioning || !$(this._element).hasClass(ClassName.IN)) {\n          return;\n        }\n\n        var startEvent = $.Event(Event.HIDE);\n        $(this._element).trigger(startEvent);\n        if (startEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        var dimension = this._getDimension();\n        var offsetDimension = dimension === Dimension.WIDTH ? 'offsetWidth' : 'offsetHeight';\n\n        this._element.style[dimension] = this._element[offsetDimension] + 'px';\n\n        Util.reflow(this._element);\n\n        $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.IN);\n\n        this._element.setAttribute('aria-expanded', false);\n\n        if (this._triggerArray.length) {\n          $(this._triggerArray).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\n        }\n\n        this.setTransitioning(true);\n\n        var complete = function complete() {\n          _this5.setTransitioning(false);\n          $(_this5._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\n        };\n\n        this._element.style[dimension] = 0;\n\n        if (!Util.supportsTransitionEnd()) {\n          complete();\n          return;\n        }\n\n        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n      }\n    }, {\n      key: 'setTransitioning',\n      value: function setTransitioning(isTransitioning) {\n        this._isTransitioning = isTransitioning;\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n\n        this._config = null;\n        this._parent = null;\n        this._element = null;\n        this._triggerArray = null;\n        this._isTransitioning = null;\n      }\n\n      // private\n\n    }, {\n      key: '_getConfig',\n      value: function _getConfig(config) {\n        config = $.extend({}, Default, config);\n        config.toggle = Boolean(config.toggle); // coerce string values\n        Util.typeCheckConfig(NAME, config, DefaultType);\n        return config;\n      }\n    }, {\n      key: '_getDimension',\n      value: function _getDimension() {\n        var hasWidth = $(this._element).hasClass(Dimension.WIDTH);\n        return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\n      }\n    }, {\n      key: '_getParent',\n      value: function _getParent() {\n        var _this6 = this;\n\n        var parent = $(this._config.parent)[0];\n        var selector = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]';\n\n        $(parent).find(selector).each(function (i, element) {\n          _this6._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\n        });\n\n        return parent;\n      }\n    }, {\n      key: '_addAriaAndCollapsedClass',\n      value: function _addAriaAndCollapsedClass(element, triggerArray) {\n        if (element) {\n          var isOpen = $(element).hasClass(ClassName.IN);\n          element.setAttribute('aria-expanded', isOpen);\n\n          if (triggerArray.length) {\n            $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\n          }\n        }\n      }\n\n      // static\n\n    }], [{\n      key: '_getTargetFromElement',\n      value: function _getTargetFromElement(element) {\n        var selector = Util.getSelectorFromElement(element);\n        return selector ? $(selector)[0] : null;\n      }\n    }, {\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var $this = $(this);\n          var data = $this.data(DATA_KEY);\n          var _config = $.extend({}, Default, $this.data(), typeof config === 'object' && config);\n\n          if (!data && _config.toggle && /show|hide/.test(config)) {\n            _config.toggle = false;\n          }\n\n          if (!data) {\n            data = new Collapse(this, _config);\n            $this.data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Collapse;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n    event.preventDefault();\n\n    var target = Collapse._getTargetFromElement(this);\n    var data = $(target).data(DATA_KEY);\n    var config = data ? 'toggle' : $(this).data();\n\n    Collapse._jQueryInterface.call($(target), config);\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Collapse._jQueryInterface;\n  $.fn[NAME].Constructor = Collapse;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Collapse._jQueryInterface;\n  };\n\n  return Collapse;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Dropdown = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'dropdown';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.dropdown';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key\n  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key\n  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)\n\n  var Event = {\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    CLICK: 'click' + EVENT_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,\n    KEYDOWN_DATA_API: 'keydown' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    BACKDROP: 'dropdown-backdrop',\n    DISABLED: 'disabled',\n    OPEN: 'open'\n  };\n\n  var Selector = {\n    BACKDROP: '.dropdown-backdrop',\n    DATA_TOGGLE: '[data-toggle=\"dropdown\"]',\n    FORM_CHILD: '.dropdown form',\n    ROLE_MENU: '[role=\"menu\"]',\n    ROLE_LISTBOX: '[role=\"listbox\"]',\n    NAVBAR_NAV: '.navbar-nav',\n    VISIBLE_ITEMS: '[role=\"menu\"] li:not(.disabled) a, ' + '[role=\"listbox\"] li:not(.disabled) a'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Dropdown = (function () {\n    function Dropdown(element) {\n      _classCallCheck(this, Dropdown);\n\n      this._element = element;\n\n      this._addEventListeners();\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Dropdown, [{\n      key: 'toggle',\n\n      // public\n\n      value: function toggle() {\n        if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\n          return false;\n        }\n\n        var parent = Dropdown._getParentFromElement(this);\n        var isActive = $(parent).hasClass(ClassName.OPEN);\n\n        Dropdown._clearMenus();\n\n        if (isActive) {\n          return false;\n        }\n\n        if ('ontouchstart' in document.documentElement && !$(parent).closest(Selector.NAVBAR_NAV).length) {\n\n          // if mobile we use a backdrop because click events don't delegate\n          var dropdown = document.createElement('div');\n          dropdown.className = ClassName.BACKDROP;\n          $(dropdown).insertBefore(this);\n          $(dropdown).on('click', Dropdown._clearMenus);\n        }\n\n        var relatedTarget = { relatedTarget: this };\n        var showEvent = $.Event(Event.SHOW, relatedTarget);\n\n        $(parent).trigger(showEvent);\n\n        if (showEvent.isDefaultPrevented()) {\n          return false;\n        }\n\n        this.focus();\n        this.setAttribute('aria-expanded', 'true');\n\n        $(parent).toggleClass(ClassName.OPEN);\n        $(parent).trigger($.Event(Event.SHOWN, relatedTarget));\n\n        return false;\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n        $(this._element).off(EVENT_KEY);\n        this._element = null;\n      }\n\n      // private\n\n    }, {\n      key: '_addEventListeners',\n      value: function _addEventListeners() {\n        $(this._element).on(Event.CLICK, this.toggle);\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          if (!data) {\n            $(this).data(DATA_KEY, data = new Dropdown(this));\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config].call(this);\n          }\n        });\n      }\n    }, {\n      key: '_clearMenus',\n      value: function _clearMenus(event) {\n        if (event && event.which === RIGHT_MOUSE_BUTTON_WHICH) {\n          return;\n        }\n\n        var backdrop = $(Selector.BACKDROP)[0];\n        if (backdrop) {\n          backdrop.parentNode.removeChild(backdrop);\n        }\n\n        var toggles = $.makeArray($(Selector.DATA_TOGGLE));\n\n        for (var i = 0; i < toggles.length; i++) {\n          var _parent = Dropdown._getParentFromElement(toggles[i]);\n          var relatedTarget = { relatedTarget: toggles[i] };\n\n          if (!$(_parent).hasClass(ClassName.OPEN)) {\n            continue;\n          }\n\n          if (event && event.type === 'click' && /input|textarea/i.test(event.target.tagName) && $.contains(_parent, event.target)) {\n            continue;\n          }\n\n          var hideEvent = $.Event(Event.HIDE, relatedTarget);\n          $(_parent).trigger(hideEvent);\n          if (hideEvent.isDefaultPrevented()) {\n            continue;\n          }\n\n          toggles[i].setAttribute('aria-expanded', 'false');\n\n          $(_parent).removeClass(ClassName.OPEN).trigger($.Event(Event.HIDDEN, relatedTarget));\n        }\n      }\n    }, {\n      key: '_getParentFromElement',\n      value: function _getParentFromElement(element) {\n        var parent = undefined;\n        var selector = Util.getSelectorFromElement(element);\n\n        if (selector) {\n          parent = $(selector)[0];\n        }\n\n        return parent || element.parentNode;\n      }\n    }, {\n      key: '_dataApiKeydownHandler',\n      value: function _dataApiKeydownHandler(event) {\n        if (!/(38|40|27|32)/.test(event.which) || /input|textarea/i.test(event.target.tagName)) {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\n          return;\n        }\n\n        var parent = Dropdown._getParentFromElement(this);\n        var isActive = $(parent).hasClass(ClassName.OPEN);\n\n        if (!isActive && event.which !== ESCAPE_KEYCODE || isActive && event.which === ESCAPE_KEYCODE) {\n\n          if (event.which === ESCAPE_KEYCODE) {\n            var toggle = $(parent).find(Selector.DATA_TOGGLE)[0];\n            $(toggle).trigger('focus');\n          }\n\n          $(this).trigger('click');\n          return;\n        }\n\n        var items = $.makeArray($(Selector.VISIBLE_ITEMS));\n\n        items = items.filter(function (item) {\n          return item.offsetWidth || item.offsetHeight;\n        });\n\n        if (!items.length) {\n          return;\n        }\n\n        var index = items.indexOf(event.target);\n\n        if (event.which === ARROW_UP_KEYCODE && index > 0) {\n          // up\n          index--;\n        }\n\n        if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\n          // down\n          index++;\n        }\n\n        if (index < 0) {\n          index = 0;\n        }\n\n        items[index].focus();\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }]);\n\n    return Dropdown;\n  })();\n\n  $(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_MENU, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_LISTBOX, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, Dropdown.prototype.toggle).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {\n    e.stopPropagation();\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Dropdown._jQueryInterface;\n  $.fn[NAME].Constructor = Dropdown;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Dropdown._jQueryInterface;\n  };\n\n  return Dropdown;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Modal = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'modal';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.modal';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 300;\n  var BACKDROP_TRANSITION_DURATION = 150;\n  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n\n  var Default = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: true\n  };\n\n  var DefaultType = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean',\n    show: 'boolean'\n  };\n\n  var Event = {\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    FOCUSIN: 'focusin' + EVENT_KEY,\n    RESIZE: 'resize' + EVENT_KEY,\n    CLICK_DISMISS: 'click.dismiss' + EVENT_KEY,\n    KEYDOWN_DISMISS: 'keydown.dismiss' + EVENT_KEY,\n    MOUSEUP_DISMISS: 'mouseup.dismiss' + EVENT_KEY,\n    MOUSEDOWN_DISMISS: 'mousedown.dismiss' + EVENT_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\n    BACKDROP: 'modal-backdrop',\n    OPEN: 'modal-open',\n    FADE: 'fade',\n    IN: 'in'\n  };\n\n  var Selector = {\n    DIALOG: '.modal-dialog',\n    DATA_TOGGLE: '[data-toggle=\"modal\"]',\n    DATA_DISMISS: '[data-dismiss=\"modal\"]',\n    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Modal = (function () {\n    function Modal(element, config) {\n      _classCallCheck(this, Modal);\n\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._dialog = $(element).find(Selector.DIALOG)[0];\n      this._backdrop = null;\n      this._isShown = false;\n      this._isBodyOverflowing = false;\n      this._ignoreBackdropClick = false;\n      this._originalBodyPadding = 0;\n      this._scrollbarWidth = 0;\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Modal, [{\n      key: 'toggle',\n\n      // public\n\n      value: function toggle(relatedTarget) {\n        return this._isShown ? this.hide() : this.show(relatedTarget);\n      }\n    }, {\n      key: 'show',\n      value: function show(relatedTarget) {\n        var _this7 = this;\n\n        var showEvent = $.Event(Event.SHOW, {\n          relatedTarget: relatedTarget\n        });\n\n        $(this._element).trigger(showEvent);\n\n        if (this._isShown || showEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        this._isShown = true;\n\n        this._checkScrollbar();\n        this._setScrollbar();\n\n        $(document.body).addClass(ClassName.OPEN);\n\n        this._setEscapeEvent();\n        this._setResizeEvent();\n\n        $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, $.proxy(this.hide, this));\n\n        $(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {\n          $(_this7._element).one(Event.MOUSEUP_DISMISS, function (event) {\n            if ($(event.target).is(_this7._element)) {\n              _this7._ignoreBackdropClick = true;\n            }\n          });\n        });\n\n        this._showBackdrop($.proxy(this._showElement, this, relatedTarget));\n      }\n    }, {\n      key: 'hide',\n      value: function hide(event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        var hideEvent = $.Event(Event.HIDE);\n\n        $(this._element).trigger(hideEvent);\n\n        if (!this._isShown || hideEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        this._isShown = false;\n\n        this._setEscapeEvent();\n        this._setResizeEvent();\n\n        $(document).off(Event.FOCUSIN);\n\n        $(this._element).removeClass(ClassName.IN);\n\n        $(this._element).off(Event.CLICK_DISMISS);\n        $(this._dialog).off(Event.MOUSEDOWN_DISMISS);\n\n        if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\n\n          $(this._element).one(Util.TRANSITION_END, $.proxy(this._hideModal, this)).emulateTransitionEnd(TRANSITION_DURATION);\n        } else {\n          this._hideModal();\n        }\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n\n        $(window).off(EVENT_KEY);\n        $(document).off(EVENT_KEY);\n        $(this._element).off(EVENT_KEY);\n        $(this._backdrop).off(EVENT_KEY);\n\n        this._config = null;\n        this._element = null;\n        this._dialog = null;\n        this._backdrop = null;\n        this._isShown = null;\n        this._isBodyOverflowing = null;\n        this._ignoreBackdropClick = null;\n        this._originalBodyPadding = null;\n        this._scrollbarWidth = null;\n      }\n\n      // private\n\n    }, {\n      key: '_getConfig',\n      value: function _getConfig(config) {\n        config = $.extend({}, Default, config);\n        Util.typeCheckConfig(NAME, config, DefaultType);\n        return config;\n      }\n    }, {\n      key: '_showElement',\n      value: function _showElement(relatedTarget) {\n        var _this8 = this;\n\n        var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);\n\n        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n          // don't move modals dom position\n          document.body.appendChild(this._element);\n        }\n\n        this._element.style.display = 'block';\n        this._element.removeAttribute('aria-hidden');\n        this._element.scrollTop = 0;\n\n        if (transition) {\n          Util.reflow(this._element);\n        }\n\n        $(this._element).addClass(ClassName.IN);\n\n        if (this._config.focus) {\n          this._enforceFocus();\n        }\n\n        var shownEvent = $.Event(Event.SHOWN, {\n          relatedTarget: relatedTarget\n        });\n\n        var transitionComplete = function transitionComplete() {\n          if (_this8._config.focus) {\n            _this8._element.focus();\n          }\n          $(_this8._element).trigger(shownEvent);\n        };\n\n        if (transition) {\n          $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);\n        } else {\n          transitionComplete();\n        }\n      }\n    }, {\n      key: '_enforceFocus',\n      value: function _enforceFocus() {\n        var _this9 = this;\n\n        $(document).off(Event.FOCUSIN) // guard against infinite focus loop\n        .on(Event.FOCUSIN, function (event) {\n          if (document !== event.target && _this9._element !== event.target && !$(_this9._element).has(event.target).length) {\n            _this9._element.focus();\n          }\n        });\n      }\n    }, {\n      key: '_setEscapeEvent',\n      value: function _setEscapeEvent() {\n        var _this10 = this;\n\n        if (this._isShown && this._config.keyboard) {\n          $(this._element).on(Event.KEYDOWN_DISMISS, function (event) {\n            if (event.which === ESCAPE_KEYCODE) {\n              _this10.hide();\n            }\n          });\n        } else if (!this._isShown) {\n          $(this._element).off(Event.KEYDOWN_DISMISS);\n        }\n      }\n    }, {\n      key: '_setResizeEvent',\n      value: function _setResizeEvent() {\n        if (this._isShown) {\n          $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this));\n        } else {\n          $(window).off(Event.RESIZE);\n        }\n      }\n    }, {\n      key: '_hideModal',\n      value: function _hideModal() {\n        var _this11 = this;\n\n        this._element.style.display = 'none';\n        this._element.setAttribute('aria-hidden', 'true');\n        this._showBackdrop(function () {\n          $(document.body).removeClass(ClassName.OPEN);\n          _this11._resetAdjustments();\n          _this11._resetScrollbar();\n          $(_this11._element).trigger(Event.HIDDEN);\n        });\n      }\n    }, {\n      key: '_removeBackdrop',\n      value: function _removeBackdrop() {\n        if (this._backdrop) {\n          $(this._backdrop).remove();\n          this._backdrop = null;\n        }\n      }\n    }, {\n      key: '_showBackdrop',\n      value: function _showBackdrop(callback) {\n        var _this12 = this;\n\n        var animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\n\n        if (this._isShown && this._config.backdrop) {\n          var doAnimate = Util.supportsTransitionEnd() && animate;\n\n          this._backdrop = document.createElement('div');\n          this._backdrop.className = ClassName.BACKDROP;\n\n          if (animate) {\n            $(this._backdrop).addClass(animate);\n          }\n\n          $(this._backdrop).appendTo(document.body);\n\n          $(this._element).on(Event.CLICK_DISMISS, function (event) {\n            if (_this12._ignoreBackdropClick) {\n              _this12._ignoreBackdropClick = false;\n              return;\n            }\n            if (event.target !== event.currentTarget) {\n              return;\n            }\n            if (_this12._config.backdrop === 'static') {\n              _this12._element.focus();\n            } else {\n              _this12.hide();\n            }\n          });\n\n          if (doAnimate) {\n            Util.reflow(this._backdrop);\n          }\n\n          $(this._backdrop).addClass(ClassName.IN);\n\n          if (!callback) {\n            return;\n          }\n\n          if (!doAnimate) {\n            callback();\n            return;\n          }\n\n          $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\n        } else if (!this._isShown && this._backdrop) {\n          $(this._backdrop).removeClass(ClassName.IN);\n\n          var callbackRemove = function callbackRemove() {\n            _this12._removeBackdrop();\n            if (callback) {\n              callback();\n            }\n          };\n\n          if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\n            $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\n          } else {\n            callbackRemove();\n          }\n        } else if (callback) {\n          callback();\n        }\n      }\n\n      // ----------------------------------------------------------------------\n      // the following methods are used to handle overflowing modals\n      // todo (fat): these should probably be refactored out of modal.js\n      // ----------------------------------------------------------------------\n\n    }, {\n      key: '_handleUpdate',\n      value: function _handleUpdate() {\n        this._adjustDialog();\n      }\n    }, {\n      key: '_adjustDialog',\n      value: function _adjustDialog() {\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n        if (!this._isBodyOverflowing && isModalOverflowing) {\n          this._element.style.paddingLeft = this._scrollbarWidth + 'px';\n        }\n\n        if (this._isBodyOverflowing && !isModalOverflowing) {\n          this._element.style.paddingRight = this._scrollbarWidth + 'px';\n        }\n      }\n    }, {\n      key: '_resetAdjustments',\n      value: function _resetAdjustments() {\n        this._element.style.paddingLeft = '';\n        this._element.style.paddingRight = '';\n      }\n    }, {\n      key: '_checkScrollbar',\n      value: function _checkScrollbar() {\n        this._isBodyOverflowing = document.body.clientWidth < window.innerWidth;\n        this._scrollbarWidth = this._getScrollbarWidth();\n      }\n    }, {\n      key: '_setScrollbar',\n      value: function _setScrollbar() {\n        var bodyPadding = parseInt($(Selector.FIXED_CONTENT).css('padding-right') || 0, 10);\n\n        this._originalBodyPadding = document.body.style.paddingRight || '';\n\n        if (this._isBodyOverflowing) {\n          document.body.style.paddingRight = bodyPadding + this._scrollbarWidth + 'px';\n        }\n      }\n    }, {\n      key: '_resetScrollbar',\n      value: function _resetScrollbar() {\n        document.body.style.paddingRight = this._originalBodyPadding;\n      }\n    }, {\n      key: '_getScrollbarWidth',\n      value: function _getScrollbarWidth() {\n        // thx d.walsh\n        var scrollDiv = document.createElement('div');\n        scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\n        document.body.appendChild(scrollDiv);\n        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config, relatedTarget) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n          var _config = $.extend({}, Modal.Default, $(this).data(), typeof config === 'object' && config);\n\n          if (!data) {\n            data = new Modal(this, _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config](relatedTarget);\n          } else if (_config.show) {\n            data.show(relatedTarget);\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Modal;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n    var _this13 = this;\n\n    var target = undefined;\n    var selector = Util.getSelectorFromElement(this);\n\n    if (selector) {\n      target = $(selector)[0];\n    }\n\n    var config = $(target).data(DATA_KEY) ? 'toggle' : $.extend({}, $(target).data(), $(this).data());\n\n    if (this.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var $target = $(target).one(Event.SHOW, function (showEvent) {\n      if (showEvent.isDefaultPrevented()) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      $target.one(Event.HIDDEN, function () {\n        if ($(_this13).is(':visible')) {\n          _this13.focus();\n        }\n      });\n    });\n\n    Modal._jQueryInterface.call($(target), config, this);\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Modal._jQueryInterface;\n  $.fn[NAME].Constructor = Modal;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Modal._jQueryInterface;\n  };\n\n  return Modal;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar ScrollSpy = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'scrollspy';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.scrollspy';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n\n  var Default = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n\n  var DefaultType = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n\n  var Event = {\n    ACTIVATE: 'activate' + EVENT_KEY,\n    SCROLL: 'scroll' + EVENT_KEY,\n    LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    DROPDOWN_ITEM: 'dropdown-item',\n    DROPDOWN_MENU: 'dropdown-menu',\n    NAV_LINK: 'nav-link',\n    NAV: 'nav',\n    ACTIVE: 'active'\n  };\n\n  var Selector = {\n    DATA_SPY: '[data-spy=\"scroll\"]',\n    ACTIVE: '.active',\n    LIST_ITEM: '.list-item',\n    LI: 'li',\n    LI_DROPDOWN: 'li.dropdown',\n    NAV_LINKS: '.nav-link',\n    DROPDOWN: '.dropdown',\n    DROPDOWN_ITEMS: '.dropdown-item',\n    DROPDOWN_TOGGLE: '.dropdown-toggle'\n  };\n\n  var OffsetMethod = {\n    OFFSET: 'offset',\n    POSITION: 'position'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var ScrollSpy = (function () {\n    function ScrollSpy(element, config) {\n      _classCallCheck(this, ScrollSpy);\n\n      this._element = element;\n      this._scrollElement = element.tagName === 'BODY' ? window : element;\n      this._config = this._getConfig(config);\n      this._selector = this._config.target + ' ' + Selector.NAV_LINKS + ',' + (this._config.target + ' ' + Selector.DROPDOWN_ITEMS);\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n\n      $(this._scrollElement).on(Event.SCROLL, $.proxy(this._process, this));\n\n      this.refresh();\n      this._process();\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(ScrollSpy, [{\n      key: 'refresh',\n\n      // public\n\n      value: function refresh() {\n        var _this14 = this;\n\n        var autoMethod = this._scrollElement !== this._scrollElement.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n\n        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n\n        var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;\n\n        this._offsets = [];\n        this._targets = [];\n\n        this._scrollHeight = this._getScrollHeight();\n\n        var targets = $.makeArray($(this._selector));\n\n        targets.map(function (element) {\n          var target = undefined;\n          var targetSelector = Util.getSelectorFromElement(element);\n\n          if (targetSelector) {\n            target = $(targetSelector)[0];\n          }\n\n          if (target && (target.offsetWidth || target.offsetHeight)) {\n            // todo (fat): remove sketch reliance on jQuery position/offset\n            return [$(target)[offsetMethod]().top + offsetBase, targetSelector];\n          }\n          return null;\n        }).filter(function (item) {\n          return item;\n        }).sort(function (a, b) {\n          return a[0] - b[0];\n        }).forEach(function (item) {\n          _this14._offsets.push(item[0]);\n          _this14._targets.push(item[1]);\n        });\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeData(this._element, DATA_KEY);\n        $(this._scrollElement).off(EVENT_KEY);\n\n        this._element = null;\n        this._scrollElement = null;\n        this._config = null;\n        this._selector = null;\n        this._offsets = null;\n        this._targets = null;\n        this._activeTarget = null;\n        this._scrollHeight = null;\n      }\n\n      // private\n\n    }, {\n      key: '_getConfig',\n      value: function _getConfig(config) {\n        config = $.extend({}, Default, config);\n\n        if (typeof config.target !== 'string') {\n          var id = $(config.target).attr('id');\n          if (!id) {\n            id = Util.getUID(NAME);\n            $(config.target).attr('id', id);\n          }\n          config.target = '#' + id;\n        }\n\n        Util.typeCheckConfig(NAME, config, DefaultType);\n\n        return config;\n      }\n    }, {\n      key: '_getScrollTop',\n      value: function _getScrollTop() {\n        return this._scrollElement === window ? this._scrollElement.scrollY : this._scrollElement.scrollTop;\n      }\n    }, {\n      key: '_getScrollHeight',\n      value: function _getScrollHeight() {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n      }\n    }, {\n      key: '_process',\n      value: function _process() {\n        var this$1 = this;\n\n        var scrollTop = this._getScrollTop() + this._config.offset;\n        var scrollHeight = this._getScrollHeight();\n        var maxScroll = this._config.offset + scrollHeight - this._scrollElement.offsetHeight;\n\n        if (this._scrollHeight !== scrollHeight) {\n          this.refresh();\n        }\n\n        if (scrollTop >= maxScroll) {\n          var target = this._targets[this._targets.length - 1];\n\n          if (this._activeTarget !== target) {\n            this._activate(target);\n          }\n        }\n\n        if (this._activeTarget && scrollTop < this._offsets[0]) {\n          this._activeTarget = null;\n          this._clear();\n          return;\n        }\n\n        for (var i = this._offsets.length; i--;) {\n          var isActiveTarget = this$1._activeTarget !== this$1._targets[i] && scrollTop >= this$1._offsets[i] && (this$1._offsets[i + 1] === undefined || scrollTop < this$1._offsets[i + 1]);\n\n          if (isActiveTarget) {\n            this$1._activate(this$1._targets[i]);\n          }\n        }\n      }\n    }, {\n      key: '_activate',\n      value: function _activate(target) {\n        this._activeTarget = target;\n\n        this._clear();\n\n        var queries = this._selector.split(',');\n        queries = queries.map(function (selector) {\n          return selector + '[data-target=\"' + target + '\"],' + (selector + '[href=\"' + target + '\"]');\n        });\n\n        var $link = $(queries.join(','));\n\n        if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {\n          $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\n          $link.addClass(ClassName.ACTIVE);\n        } else {\n          // todo (fat) this is kinda sus...\n          // recursively add actives to tested nav-links\n          $link.parents(Selector.LI).find(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);\n        }\n\n        $(this._scrollElement).trigger(Event.ACTIVATE, {\n          relatedTarget: target\n        });\n      }\n    }, {\n      key: '_clear',\n      value: function _clear() {\n        $(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n          var _config = typeof config === 'object' && config || null;\n\n          if (!data) {\n            data = new ScrollSpy(this, _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return ScrollSpy;\n  })();\n\n  $(window).on(Event.LOAD_DATA_API, function () {\n    var scrollSpys = $.makeArray($(Selector.DATA_SPY));\n\n    for (var i = scrollSpys.length; i--;) {\n      var $spy = $(scrollSpys[i]);\n      ScrollSpy._jQueryInterface.call($spy, $spy.data());\n    }\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = ScrollSpy._jQueryInterface;\n  $.fn[NAME].Constructor = ScrollSpy;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return ScrollSpy._jQueryInterface;\n  };\n\n  return ScrollSpy;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Tab = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'tab';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.tab';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 150;\n\n  var Event = {\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\n  };\n\n  var ClassName = {\n    DROPDOWN_MENU: 'dropdown-menu',\n    ACTIVE: 'active',\n    FADE: 'fade',\n    IN: 'in'\n  };\n\n  var Selector = {\n    A: 'a',\n    LI: 'li',\n    DROPDOWN: '.dropdown',\n    UL: 'ul:not(.dropdown-menu)',\n    FADE_CHILD: '> .nav-item .fade, > .fade',\n    ACTIVE: '.active',\n    ACTIVE_CHILD: '> .nav-item > .active, > .active',\n    DATA_TOGGLE: '[data-toggle=\"tab\"], [data-toggle=\"pill\"]',\n    DROPDOWN_TOGGLE: '.dropdown-toggle',\n    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tab = (function () {\n    function Tab(element) {\n      _classCallCheck(this, Tab);\n\n      this._element = element;\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Tab, [{\n      key: 'show',\n\n      // public\n\n      value: function show() {\n        var _this15 = this;\n\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE)) {\n          return;\n        }\n\n        var target = undefined;\n        var previous = undefined;\n        var ulElement = $(this._element).closest(Selector.UL)[0];\n        var selector = Util.getSelectorFromElement(this._element);\n\n        if (ulElement) {\n          previous = $.makeArray($(ulElement).find(Selector.ACTIVE));\n          previous = previous[previous.length - 1];\n        }\n\n        var hideEvent = $.Event(Event.HIDE, {\n          relatedTarget: this._element\n        });\n\n        var showEvent = $.Event(Event.SHOW, {\n          relatedTarget: previous\n        });\n\n        if (previous) {\n          $(previous).trigger(hideEvent);\n        }\n\n        $(this._element).trigger(showEvent);\n\n        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        if (selector) {\n          target = $(selector)[0];\n        }\n\n        this._activate(this._element, ulElement);\n\n        var complete = function complete() {\n          var hiddenEvent = $.Event(Event.HIDDEN, {\n            relatedTarget: _this15._element\n          });\n\n          var shownEvent = $.Event(Event.SHOWN, {\n            relatedTarget: previous\n          });\n\n          $(previous).trigger(hiddenEvent);\n          $(_this15._element).trigger(shownEvent);\n        };\n\n        if (target) {\n          this._activate(target, target.parentNode, complete);\n        } else {\n          complete();\n        }\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        $.removeClass(this._element, DATA_KEY);\n        this._element = null;\n      }\n\n      // private\n\n    }, {\n      key: '_activate',\n      value: function _activate(element, container, callback) {\n        var active = $(container).find(Selector.ACTIVE_CHILD)[0];\n        var isTransitioning = callback && Util.supportsTransitionEnd() && (active && $(active).hasClass(ClassName.FADE) || Boolean($(container).find(Selector.FADE_CHILD)[0]));\n\n        var complete = $.proxy(this._transitionComplete, this, element, active, isTransitioning, callback);\n\n        if (active && isTransitioning) {\n          $(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n        } else {\n          complete();\n        }\n\n        if (active) {\n          $(active).removeClass(ClassName.IN);\n        }\n      }\n    }, {\n      key: '_transitionComplete',\n      value: function _transitionComplete(element, active, isTransitioning, callback) {\n        if (active) {\n          $(active).removeClass(ClassName.ACTIVE);\n\n          var dropdownChild = $(active).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];\n\n          if (dropdownChild) {\n            $(dropdownChild).removeClass(ClassName.ACTIVE);\n          }\n\n          active.setAttribute('aria-expanded', false);\n        }\n\n        $(element).addClass(ClassName.ACTIVE);\n        element.setAttribute('aria-expanded', true);\n\n        if (isTransitioning) {\n          Util.reflow(element);\n          $(element).addClass(ClassName.IN);\n        } else {\n          $(element).removeClass(ClassName.FADE);\n        }\n\n        if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {\n\n          var dropdownElement = $(element).closest(Selector.DROPDOWN)[0];\n          if (dropdownElement) {\n            $(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\n          }\n\n          element.setAttribute('aria-expanded', true);\n        }\n\n        if (callback) {\n          callback();\n        }\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var $this = $(this);\n          var data = $this.data(DATA_KEY);\n\n          if (!data) {\n            data = data = new Tab(this);\n            $this.data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }]);\n\n    return Tab;\n  })();\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n    event.preventDefault();\n    Tab._jQueryInterface.call($(this), 'show');\n  });\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Tab._jQueryInterface;\n  $.fn[NAME].Constructor = Tab;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Tab._jQueryInterface;\n  };\n\n  return Tab;\n})(jQuery);\n\n/* global Tether */\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Tooltip = (function ($) {\n\n  /**\n   * Check for Tether dependency\n   * Tether - http://github.hubspot.com/tether/\n   */\n  if (window.Tether === undefined) {\n    throw new Error('Bootstrap tooltips require Tether (http://github.hubspot.com/tether/)');\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'tooltip';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.tooltip';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 150;\n  var CLASS_PREFIX = 'bs-tether';\n\n  var Default = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: '0 0',\n    constraints: []\n  };\n\n  var DefaultType = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: 'string',\n    constraints: 'array'\n  };\n\n  var AttachmentMap = {\n    TOP: 'bottom center',\n    RIGHT: 'middle left',\n    BOTTOM: 'top center',\n    LEFT: 'middle right'\n  };\n\n  var HoverState = {\n    IN: 'in',\n    OUT: 'out'\n  };\n\n  var Event = {\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    INSERTED: 'inserted' + EVENT_KEY,\n    CLICK: 'click' + EVENT_KEY,\n    FOCUSIN: 'focusin' + EVENT_KEY,\n    FOCUSOUT: 'focusout' + EVENT_KEY,\n    MOUSEENTER: 'mouseenter' + EVENT_KEY,\n    MOUSELEAVE: 'mouseleave' + EVENT_KEY\n  };\n\n  var ClassName = {\n    FADE: 'fade',\n    IN: 'in'\n  };\n\n  var Selector = {\n    TOOLTIP: '.tooltip',\n    TOOLTIP_INNER: '.tooltip-inner'\n  };\n\n  var TetherClass = {\n    element: false,\n    enabled: false\n  };\n\n  var Trigger = {\n    HOVER: 'hover',\n    FOCUS: 'focus',\n    CLICK: 'click',\n    MANUAL: 'manual'\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tooltip = (function () {\n    function Tooltip(element, config) {\n      _classCallCheck(this, Tooltip);\n\n      // private\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._tether = null;\n\n      // protected\n      this.element = element;\n      this.config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * jQuery\n     * ------------------------------------------------------------------------\n     */\n\n    // getters\n\n    _createClass(Tooltip, [{\n      key: 'enable',\n\n      // public\n\n      value: function enable() {\n        this._isEnabled = true;\n      }\n    }, {\n      key: 'disable',\n      value: function disable() {\n        this._isEnabled = false;\n      }\n    }, {\n      key: 'toggleEnabled',\n      value: function toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n      }\n    }, {\n      key: 'toggle',\n      value: function toggle(event) {\n        if (event) {\n          var dataKey = this.constructor.DATA_KEY;\n          var context = $(event.currentTarget).data(dataKey);\n\n          if (!context) {\n            context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n            $(event.currentTarget).data(dataKey, context);\n          }\n\n          context._activeTrigger.click = !context._activeTrigger.click;\n\n          if (context._isWithActiveTrigger()) {\n            context._enter(null, context);\n          } else {\n            context._leave(null, context);\n          }\n        } else {\n\n          if ($(this.getTipElement()).hasClass(ClassName.IN)) {\n            this._leave(null, this);\n            return;\n          }\n\n          this._enter(null, this);\n        }\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        clearTimeout(this._timeout);\n\n        this.cleanupTether();\n\n        $.removeData(this.element, this.constructor.DATA_KEY);\n\n        $(this.element).off(this.constructor.EVENT_KEY);\n\n        if (this.tip) {\n          $(this.tip).remove();\n        }\n\n        this._isEnabled = null;\n        this._timeout = null;\n        this._hoverState = null;\n        this._activeTrigger = null;\n        this._tether = null;\n\n        this.element = null;\n        this.config = null;\n        this.tip = null;\n      }\n    }, {\n      key: 'show',\n      value: function show() {\n        var _this16 = this;\n\n        var showEvent = $.Event(this.constructor.Event.SHOW);\n\n        if (this.isWithContent() && this._isEnabled) {\n          $(this.element).trigger(showEvent);\n\n          var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);\n\n          if (showEvent.isDefaultPrevented() || !isInTheDom) {\n            return;\n          }\n\n          var tip = this.getTipElement();\n          var tipId = Util.getUID(this.constructor.NAME);\n\n          tip.setAttribute('id', tipId);\n          this.element.setAttribute('aria-describedby', tipId);\n\n          this.setContent();\n\n          if (this.config.animation) {\n            $(tip).addClass(ClassName.FADE);\n          }\n\n          var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n\n          var attachment = this._getAttachment(placement);\n\n          $(tip).data(this.constructor.DATA_KEY, this).appendTo(document.body);\n\n          $(this.element).trigger(this.constructor.Event.INSERTED);\n\n          this._tether = new Tether({\n            attachment: attachment,\n            element: tip,\n            target: this.element,\n            classes: TetherClass,\n            classPrefix: CLASS_PREFIX,\n            offset: this.config.offset,\n            constraints: this.config.constraints,\n            addTargetClasses: false\n          });\n\n          Util.reflow(tip);\n          this._tether.position();\n\n          $(tip).addClass(ClassName.IN);\n\n          var complete = function complete() {\n            var prevHoverState = _this16._hoverState;\n            _this16._hoverState = null;\n\n            $(_this16.element).trigger(_this16.constructor.Event.SHOWN);\n\n            if (prevHoverState === HoverState.OUT) {\n              _this16._leave(null, _this16);\n            }\n          };\n\n          if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\n            $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);\n            return;\n          }\n\n          complete();\n        }\n      }\n    }, {\n      key: 'hide',\n      value: function hide(callback) {\n        var _this17 = this;\n\n        var tip = this.getTipElement();\n        var hideEvent = $.Event(this.constructor.Event.HIDE);\n        var complete = function complete() {\n          if (_this17._hoverState !== HoverState.IN && tip.parentNode) {\n            tip.parentNode.removeChild(tip);\n          }\n\n          _this17.element.removeAttribute('aria-describedby');\n          $(_this17.element).trigger(_this17.constructor.Event.HIDDEN);\n          _this17.cleanupTether();\n\n          if (callback) {\n            callback();\n          }\n        };\n\n        $(this.element).trigger(hideEvent);\n\n        if (hideEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        $(tip).removeClass(ClassName.IN);\n\n        if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\n\n          $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n        } else {\n          complete();\n        }\n\n        this._hoverState = '';\n      }\n\n      // protected\n\n    }, {\n      key: 'isWithContent',\n      value: function isWithContent() {\n        return Boolean(this.getTitle());\n      }\n    }, {\n      key: 'getTipElement',\n      value: function getTipElement() {\n        return this.tip = this.tip || $(this.config.template)[0];\n      }\n    }, {\n      key: 'setContent',\n      value: function setContent() {\n        var $tip = $(this.getTipElement());\n\n        this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());\n\n        $tip.removeClass(ClassName.FADE).removeClass(ClassName.IN);\n\n        this.cleanupTether();\n      }\n    }, {\n      key: 'setElementContent',\n      value: function setElementContent($element, content) {\n        var html = this.config.html;\n        if (typeof content === 'object' && (content.nodeType || content.jquery)) {\n          // content is a DOM node or a jQuery\n          if (html) {\n            if (!$(content).parent().is($element)) {\n              $element.empty().append(content);\n            }\n          } else {\n            $element.text($(content).text());\n          }\n        } else {\n          $element[html ? 'html' : 'text'](content);\n        }\n      }\n    }, {\n      key: 'getTitle',\n      value: function getTitle() {\n        var title = this.element.getAttribute('data-original-title');\n\n        if (!title) {\n          title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n        }\n\n        return title;\n      }\n    }, {\n      key: 'cleanupTether',\n      value: function cleanupTether() {\n        if (this._tether) {\n          this._tether.destroy();\n        }\n      }\n\n      // private\n\n    }, {\n      key: '_getAttachment',\n      value: function _getAttachment(placement) {\n        return AttachmentMap[placement.toUpperCase()];\n      }\n    }, {\n      key: '_setListeners',\n      value: function _setListeners() {\n        var _this18 = this;\n\n        var triggers = this.config.trigger.split(' ');\n\n        triggers.forEach(function (trigger) {\n          if (trigger === 'click') {\n            $(_this18.element).on(_this18.constructor.Event.CLICK, _this18.config.selector, $.proxy(_this18.toggle, _this18));\n          } else if (trigger !== Trigger.MANUAL) {\n            var eventIn = trigger === Trigger.HOVER ? _this18.constructor.Event.MOUSEENTER : _this18.constructor.Event.FOCUSIN;\n            var eventOut = trigger === Trigger.HOVER ? _this18.constructor.Event.MOUSELEAVE : _this18.constructor.Event.FOCUSOUT;\n\n            $(_this18.element).on(eventIn, _this18.config.selector, $.proxy(_this18._enter, _this18)).on(eventOut, _this18.config.selector, $.proxy(_this18._leave, _this18));\n          }\n        });\n\n        if (this.config.selector) {\n          this.config = $.extend({}, this.config, {\n            trigger: 'manual',\n            selector: ''\n          });\n        } else {\n          this._fixTitle();\n        }\n      }\n    }, {\n      key: '_fixTitle',\n      value: function _fixTitle() {\n        var titleType = typeof this.element.getAttribute('data-original-title');\n        if (this.element.getAttribute('title') || titleType !== 'string') {\n          this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n          this.element.setAttribute('title', '');\n        }\n      }\n    }, {\n      key: '_enter',\n      value: function _enter(event, context) {\n        var dataKey = this.constructor.DATA_KEY;\n\n        context = context || $(event.currentTarget).data(dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n          $(event.currentTarget).data(dataKey, context);\n        }\n\n        if (event) {\n          context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;\n        }\n\n        if ($(context.getTipElement()).hasClass(ClassName.IN) || context._hoverState === HoverState.IN) {\n          context._hoverState = HoverState.IN;\n          return;\n        }\n\n        clearTimeout(context._timeout);\n\n        context._hoverState = HoverState.IN;\n\n        if (!context.config.delay || !context.config.delay.show) {\n          context.show();\n          return;\n        }\n\n        context._timeout = setTimeout(function () {\n          if (context._hoverState === HoverState.IN) {\n            context.show();\n          }\n        }, context.config.delay.show);\n      }\n    }, {\n      key: '_leave',\n      value: function _leave(event, context) {\n        var dataKey = this.constructor.DATA_KEY;\n\n        context = context || $(event.currentTarget).data(dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n          $(event.currentTarget).data(dataKey, context);\n        }\n\n        if (event) {\n          context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;\n        }\n\n        if (context._isWithActiveTrigger()) {\n          return;\n        }\n\n        clearTimeout(context._timeout);\n\n        context._hoverState = HoverState.OUT;\n\n        if (!context.config.delay || !context.config.delay.hide) {\n          context.hide();\n          return;\n        }\n\n        context._timeout = setTimeout(function () {\n          if (context._hoverState === HoverState.OUT) {\n            context.hide();\n          }\n        }, context.config.delay.hide);\n      }\n    }, {\n      key: '_isWithActiveTrigger',\n      value: function _isWithActiveTrigger() {\n        var this$1 = this;\n\n        for (var trigger in this._activeTrigger) {\n          if (this$1._activeTrigger[trigger]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: '_getConfig',\n      value: function _getConfig(config) {\n        config = $.extend({}, this.constructor.Default, $(this.element).data(), config);\n\n        if (config.delay && typeof config.delay === 'number') {\n          config.delay = {\n            show: config.delay,\n            hide: config.delay\n          };\n        }\n\n        Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n\n        return config;\n      }\n    }, {\n      key: '_getDelegateConfig',\n      value: function _getDelegateConfig() {\n        var this$1 = this;\n\n        var config = {};\n\n        if (this.config) {\n          for (var key in this.config) {\n            if (this$1.constructor.Default[key] !== this$1.config[key]) {\n              config[key] = this$1.config[key];\n            }\n          }\n        }\n\n        return config;\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n          var _config = typeof config === 'object' ? config : null;\n\n          if (!data && /destroy|hide/.test(config)) {\n            return;\n          }\n\n          if (!data) {\n            data = new Tooltip(this, _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: 'NAME',\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: 'DATA_KEY',\n      get: function get() {\n        return DATA_KEY;\n      }\n    }, {\n      key: 'Event',\n      get: function get() {\n        return Event;\n      }\n    }, {\n      key: 'EVENT_KEY',\n      get: function get() {\n        return EVENT_KEY;\n      }\n    }, {\n      key: 'DefaultType',\n      get: function get() {\n        return DefaultType;\n      }\n    }]);\n\n    return Tooltip;\n  })();\n\n  $.fn[NAME] = Tooltip._jQueryInterface;\n  $.fn[NAME].Constructor = Tooltip;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Tooltip._jQueryInterface;\n  };\n\n  return Tooltip;\n})(jQuery);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0-alpha.4): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nvar Popover = (function ($) {\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'popover';\n  var VERSION = '4.0.0-alpha.4';\n  var DATA_KEY = 'bs.popover';\n  var EVENT_KEY = '.' + DATA_KEY;\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n\n  var Default = $.extend({}, Tooltip.Default, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-title\"></h3>' + '<div class=\"popover-content\"></div></div>'\n  });\n\n  var DefaultType = $.extend({}, Tooltip.DefaultType, {\n    content: '(string|element|function)'\n  });\n\n  var ClassName = {\n    FADE: 'fade',\n    IN: 'in'\n  };\n\n  var Selector = {\n    TITLE: '.popover-title',\n    CONTENT: '.popover-content',\n    ARROW: '.popover-arrow'\n  };\n\n  var Event = {\n    HIDE: 'hide' + EVENT_KEY,\n    HIDDEN: 'hidden' + EVENT_KEY,\n    SHOW: 'show' + EVENT_KEY,\n    SHOWN: 'shown' + EVENT_KEY,\n    INSERTED: 'inserted' + EVENT_KEY,\n    CLICK: 'click' + EVENT_KEY,\n    FOCUSIN: 'focusin' + EVENT_KEY,\n    FOCUSOUT: 'focusout' + EVENT_KEY,\n    MOUSEENTER: 'mouseenter' + EVENT_KEY,\n    MOUSELEAVE: 'mouseleave' + EVENT_KEY\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Popover = (function (_Tooltip) {\n    _inherits(Popover, _Tooltip);\n\n    function Popover() {\n      _classCallCheck(this, Popover);\n\n      _get(Object.getPrototypeOf(Popover.prototype), 'constructor', this).apply(this, arguments);\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * jQuery\n     * ------------------------------------------------------------------------\n     */\n\n    _createClass(Popover, [{\n      key: 'isWithContent',\n\n      // overrides\n\n      value: function isWithContent() {\n        return this.getTitle() || this._getContent();\n      }\n    }, {\n      key: 'getTipElement',\n      value: function getTipElement() {\n        return this.tip = this.tip || $(this.config.template)[0];\n      }\n    }, {\n      key: 'setContent',\n      value: function setContent() {\n        var $tip = $(this.getTipElement());\n\n        // we use append for html objects to maintain js events\n        this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\n        this.setElementContent($tip.find(Selector.CONTENT), this._getContent());\n\n        $tip.removeClass(ClassName.FADE).removeClass(ClassName.IN);\n\n        this.cleanupTether();\n      }\n\n      // private\n\n    }, {\n      key: '_getContent',\n      value: function _getContent() {\n        return this.element.getAttribute('data-content') || (typeof this.config.content === 'function' ? this.config.content.call(this.element) : this.config.content);\n      }\n\n      // static\n\n    }], [{\n      key: '_jQueryInterface',\n      value: function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n          var _config = typeof config === 'object' ? config : null;\n\n          if (!data && /destroy|hide/.test(config)) {\n            return;\n          }\n\n          if (!data) {\n            data = new Popover(this, _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof config === 'string') {\n            if (data[config] === undefined) {\n              throw new Error('No method named \"' + config + '\"');\n            }\n            data[config]();\n          }\n        });\n      }\n    }, {\n      key: 'VERSION',\n\n      // getters\n\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: 'Default',\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: 'NAME',\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: 'DATA_KEY',\n      get: function get() {\n        return DATA_KEY;\n      }\n    }, {\n      key: 'Event',\n      get: function get() {\n        return Event;\n      }\n    }, {\n      key: 'EVENT_KEY',\n      get: function get() {\n        return EVENT_KEY;\n      }\n    }, {\n      key: 'DefaultType',\n      get: function get() {\n        return DefaultType;\n      }\n    }]);\n\n    return Popover;\n  })(Tooltip);\n\n  $.fn[NAME] = Popover._jQueryInterface;\n  $.fn[NAME].Constructor = Popover;\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Popover._jQueryInterface;\n  };\n\n  return Popover;\n})(jQuery);\n\n}(jQuery);\n\n/**\n * First we will load all of this project's JavaScript dependencies which\n * include Vue and Vue Resource. This gives a great starting point for\n * building robust, powerful web applications using Vue and Laravel.\n */\n\n//require('./bootstrap');\n\n/**\n * Next, we will create a fresh Vue application instance and attach it to\n * the page. Then, you may begin adding components to this application\n * or customize the JavaScript scaffolding to fit your unique needs.\n */\n\n// Vue.component('example', require('./components/Example.vue'));\n\n// const app = new Vue({\n//     el: '#app'\n// });\n\nconsole.log(\"funciona\");\n//# sourceMappingURL=main.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);